
stmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000762c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080077b4  080077b4  000087b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800780c  0800780c  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  0800780c  0800780c  0000880c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007814  08007814  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007814  08007814  00008814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007818  08007818  00008818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800781c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  2000000c  08007828  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  08007828  00009dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b65  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1f  00000000  00000000  0001eba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  000218c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea4  00000000  00000000  00022b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028458  00000000  00000000  00023a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170a7  00000000  00000000  0004be74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7ed0  00000000  00000000  00062f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015adeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  0015ae30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800779c 	.word	0x0800779c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800779c 	.word	0x0800779c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96a 	b.w	8000c90 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	460c      	mov	r4, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14e      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e0:	4694      	mov	ip, r2
 80009e2:	458c      	cmp	ip, r1
 80009e4:	4686      	mov	lr, r0
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	d962      	bls.n	8000ab2 <__udivmoddi4+0xde>
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0320 	rsb	r3, r2, #32
 80009f2:	4091      	lsls	r1, r2
 80009f4:	fa20 f303 	lsr.w	r3, r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fa1f f68c 	uxth.w	r6, ip
 8000a0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a12:	fb07 1114 	mls	r1, r7, r4, r1
 8000a16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1a:	fb04 f106 	mul.w	r1, r4, r6
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a2a:	f080 8112 	bcs.w	8000c52 <__udivmoddi4+0x27e>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 810f 	bls.w	8000c52 <__udivmoddi4+0x27e>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1110 	mls	r1, r7, r0, r1
 8000a46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4a:	fb00 f606 	mul.w	r6, r0, r6
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x94>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5a:	f080 80fc 	bcs.w	8000c56 <__udivmoddi4+0x282>
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	f240 80f9 	bls.w	8000c56 <__udivmoddi4+0x282>
 8000a64:	4463      	add	r3, ip
 8000a66:	3802      	subs	r0, #2
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6e:	2100      	movs	r1, #0
 8000a70:	b11d      	cbz	r5, 8000a7a <__udivmoddi4+0xa6>
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d905      	bls.n	8000a8e <__udivmoddi4+0xba>
 8000a82:	b10d      	cbz	r5, 8000a88 <__udivmoddi4+0xb4>
 8000a84:	e9c5 0100 	strd	r0, r1, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e7f5      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000a8e:	fab3 f183 	clz	r1, r3
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d146      	bne.n	8000b24 <__udivmoddi4+0x150>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xcc>
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	f0c0 80f0 	bcc.w	8000c80 <__udivmoddi4+0x2ac>
 8000aa0:	1a86      	subs	r6, r0, r2
 8000aa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d0e6      	beq.n	8000a7a <__udivmoddi4+0xa6>
 8000aac:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab0:	e7e3      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8090 	bne.w	8000bd8 <__udivmoddi4+0x204>
 8000ab8:	eba1 040c 	sub.w	r4, r1, ip
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa1f f78c 	uxth.w	r7, ip
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ace:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad6:	fb07 f006 	mul.w	r0, r7, r6
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x11c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x11a>
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	f200 80cd 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000aee:	4626      	mov	r6, r4
 8000af0:	1a1c      	subs	r4, r3, r0
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afa:	fb08 4410 	mls	r4, r8, r0, r4
 8000afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b02:	fb00 f707 	mul.w	r7, r0, r7
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x148>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x146>
 8000b14:	429f      	cmp	r7, r3
 8000b16:	f200 80b0 	bhi.w	8000c7a <__udivmoddi4+0x2a6>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	1bdb      	subs	r3, r3, r7
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	e7a5      	b.n	8000a70 <__udivmoddi4+0x9c>
 8000b24:	f1c1 0620 	rsb	r6, r1, #32
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b34:	fa04 f301 	lsl.w	r3, r4, r1
 8000b38:	ea43 030c 	orr.w	r3, r3, ip
 8000b3c:	40f4      	lsrs	r4, r6
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	0c38      	lsrs	r0, r7, #16
 8000b44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b48:	fbb4 fef0 	udiv	lr, r4, r0
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	fb00 441e 	mls	r4, r0, lr, r4
 8000b54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b58:	fb0e f90c 	mul.w	r9, lr, ip
 8000b5c:	45a1      	cmp	r9, r4
 8000b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x1a6>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b6a:	f080 8084 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	f240 8081 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000b74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	eba4 0409 	sub.w	r4, r4, r9
 8000b7e:	fa1f f983 	uxth.w	r9, r3
 8000b82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b86:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x1d2>
 8000b96:	193c      	adds	r4, r7, r4
 8000b98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b9c:	d267      	bcs.n	8000c6e <__udivmoddi4+0x29a>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0x29a>
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	443c      	add	r4, r7
 8000ba6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000baa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	46ce      	mov	lr, r9
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	d351      	bcc.n	8000c5e <__udivmoddi4+0x28a>
 8000bba:	d04e      	beq.n	8000c5a <__udivmoddi4+0x286>
 8000bbc:	b155      	cbz	r5, 8000bd4 <__udivmoddi4+0x200>
 8000bbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bca:	40cb      	lsrs	r3, r1
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	40cc      	lsrs	r4, r1
 8000bd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e750      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	fa24 f303 	lsr.w	r3, r4, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	430c      	orrs	r4, r1
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf4:	fa1f f78c 	uxth.w	r7, ip
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb00 f107 	mul.w	r1, r0, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x24c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c16:	d22c      	bcs.n	8000c72 <__udivmoddi4+0x29e>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d92a      	bls.n	8000c72 <__udivmoddi4+0x29e>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c28:	fb08 3311 	mls	r3, r8, r1, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb01 f307 	mul.w	r3, r1, r7
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x276>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c40:	d213      	bcs.n	8000c6a <__udivmoddi4+0x296>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d911      	bls.n	8000c6a <__udivmoddi4+0x296>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	1ae4      	subs	r4, r4, r3
 8000c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c50:	e739      	b.n	8000ac6 <__udivmoddi4+0xf2>
 8000c52:	4604      	mov	r4, r0
 8000c54:	e6f0      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c56:	4608      	mov	r0, r1
 8000c58:	e706      	b.n	8000a68 <__udivmoddi4+0x94>
 8000c5a:	45c8      	cmp	r8, r9
 8000c5c:	d2ae      	bcs.n	8000bbc <__udivmoddi4+0x1e8>
 8000c5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7a8      	b.n	8000bbc <__udivmoddi4+0x1e8>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	e7ed      	b.n	8000c4a <__udivmoddi4+0x276>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e799      	b.n	8000ba6 <__udivmoddi4+0x1d2>
 8000c72:	4630      	mov	r0, r6
 8000c74:	e7d4      	b.n	8000c20 <__udivmoddi4+0x24c>
 8000c76:	46d6      	mov	lr, sl
 8000c78:	e77f      	b.n	8000b7a <__udivmoddi4+0x1a6>
 8000c7a:	4463      	add	r3, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e74d      	b.n	8000b1c <__udivmoddi4+0x148>
 8000c80:	4606      	mov	r6, r0
 8000c82:	4623      	mov	r3, r4
 8000c84:	4608      	mov	r0, r1
 8000c86:	e70f      	b.n	8000aa8 <__udivmoddi4+0xd4>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	e730      	b.n	8000af0 <__udivmoddi4+0x11c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <__NVIC_SystemReset+0x24>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ca6:	4904      	ldr	r1, [pc, #16]	@ (8000cb8 <__NVIC_SystemReset+0x24>)
 8000ca8:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <__NVIC_SystemReset+0x28>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cae:	f3bf 8f4f 	dsb	sy
}
 8000cb2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <__NVIC_SystemReset+0x20>
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	05fa0004 	.word	0x05fa0004

08000cc0 <checkCRC>:
 */
#include "communication.h"


bool checkCRC(uint8_t * data, uint16_t size)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
    uint8_t sum = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < size - 1; i++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	e009      	b.n	8000cea <checkCRC+0x2a>
    {
        sum += data[i];
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < size - 1; i++)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf0      	blt.n	8000cd6 <checkCRC+0x16>
    }
    return sum == data[size - 1];
 8000cf4:	887b      	ldrh	r3, [r7, #2]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	7bfa      	ldrb	r2, [r7, #15]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	bf0c      	ite	eq
 8000d04:	2301      	moveq	r3, #1
 8000d06:	2300      	movne	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <parseUserInput>:

void parseUserInput()
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0

	switch (Rx1_data[0])
 8000d1e:	4ba6      	ldr	r3, [pc, #664]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b16      	cmp	r3, #22
 8000d24:	f200 81d4 	bhi.w	80010d0 <parseUserInput+0x3b8>
 8000d28:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <parseUserInput+0x18>)
 8000d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2e:	bf00      	nop
 8000d30:	08000d8d 	.word	0x08000d8d
 8000d34:	08000d91 	.word	0x08000d91
 8000d38:	08000de3 	.word	0x08000de3
 8000d3c:	080010d1 	.word	0x080010d1
 8000d40:	080010d1 	.word	0x080010d1
 8000d44:	08000e63 	.word	0x08000e63
 8000d48:	08000e85 	.word	0x08000e85
 8000d4c:	08000f0f 	.word	0x08000f0f
 8000d50:	08000f31 	.word	0x08000f31
 8000d54:	08000f55 	.word	0x08000f55
 8000d58:	08000f6f 	.word	0x08000f6f
 8000d5c:	08000f93 	.word	0x08000f93
 8000d60:	08001123 	.word	0x08001123
 8000d64:	08001123 	.word	0x08001123
 8000d68:	08000fe1 	.word	0x08000fe1
 8000d6c:	08001063 	.word	0x08001063
 8000d70:	08001123 	.word	0x08001123
 8000d74:	08001123 	.word	0x08001123
 8000d78:	08001123 	.word	0x08001123
 8000d7c:	0800106f 	.word	0x0800106f
 8000d80:	0800108f 	.word	0x0800108f
 8000d84:	08001099 	.word	0x08001099
 8000d88:	080010c3 	.word	0x080010c3
	{

        case 0x00: //system reset signal
            //printf("system reset...\r\n");
            NVIC_SystemReset();
 8000d8c:	f7ff ff82 	bl	8000c94 <__NVIC_SystemReset>
            break;

        case 0x01: //disable stimulation
            stimulationController.enableStimulation = false;
 8000d90:	4b8a      	ldr	r3, [pc, #552]	@ (8000fbc <parseUserInput+0x2a4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
            //printf("stimulation disabled\r\n");
            //set default timer setting
            htim2.Instance->ARR = DEFAULT_TIMING;
 8000d96:	4b8a      	ldr	r3, [pc, #552]	@ (8000fc0 <parseUserInput+0x2a8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f640 4235 	movw	r2, #3125	@ 0xc35
 8000d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
            hdma_tim2_up.Instance->CMAR = (uint32_t) &Line_LUT;
 8000da0:	4b88      	ldr	r3, [pc, #544]	@ (8000fc4 <parseUserInput+0x2ac>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a88      	ldr	r2, [pc, #544]	@ (8000fc8 <parseUserInput+0x2b0>)
 8000da6:	60da      	str	r2, [r3, #12]

            CLEAR_BIT(hdma_tim2_up.Instance->CCR, 0);
 8000da8:	4b86      	ldr	r3, [pc, #536]	@ (8000fc4 <parseUserInput+0x2ac>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b85      	ldr	r3, [pc, #532]	@ (8000fc4 <parseUserInput+0x2ac>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	601a      	str	r2, [r3, #0]
            hdma_tim2_up.Instance->CNDTR = NS;
 8000db4:	4b83      	ldr	r3, [pc, #524]	@ (8000fc4 <parseUserInput+0x2ac>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2284      	movs	r2, #132	@ 0x84
 8000dba:	605a      	str	r2, [r3, #4]
            SET_BIT(hdma_tim2_up.Instance->CCR, 0);
 8000dbc:	4b81      	ldr	r3, [pc, #516]	@ (8000fc4 <parseUserInput+0x2ac>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b80      	ldr	r3, [pc, #512]	@ (8000fc4 <parseUserInput+0x2ac>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6812      	ldr	r2, [r2, #0]
 8000dc6:	601a      	str	r2, [r3, #0]

            stimulationController.burstCounter = stimulationController.maxWaveNumber;
 8000dc8:	4b7c      	ldr	r3, [pc, #496]	@ (8000fbc <parseUserInput+0x2a4>)
 8000dca:	885a      	ldrh	r2, [r3, #2]
 8000dcc:	4b7b      	ldr	r3, [pc, #492]	@ (8000fbc <parseUserInput+0x2a4>)
 8000dce:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
            stimulationController.burstPauseIndex = 0;
 8000dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8000fbc <parseUserInput+0x2a4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

            stimulationInfoCommand = 0x03;
 8000dda:	4b7c      	ldr	r3, [pc, #496]	@ (8000fcc <parseUserInput+0x2b4>)
 8000ddc:	2203      	movs	r2, #3
 8000dde:	701a      	strb	r2, [r3, #0]

            break;
 8000de0:	e1a2      	b.n	8001128 <parseUserInput+0x410>

        case 0x02: //enable stimulation

            if (stimulationController.validIndeces > 0)
 8000de2:	4b76      	ldr	r3, [pc, #472]	@ (8000fbc <parseUserInput+0x2a4>)
 8000de4:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 819c 	beq.w	8001126 <parseUserInput+0x40e>
            {
                stimulationController.channelIndex = 0;
 8000dee:	4b73      	ldr	r3, [pc, #460]	@ (8000fbc <parseUserInput+0x2a4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
                //hdac1.Instance->DHR12R1 = (uint16_t)  (stimulationController.intensityMultiplier *
                //                                     (float) (stimulationController.channelOrderIntensity[stimulationController.channelIndex] & 0x0fff));

                //stimulationController.currentWaveState = upBump;

                stimulationController.enableStimulation = true;
 8000df6:	4b71      	ldr	r3, [pc, #452]	@ (8000fbc <parseUserInput+0x2a4>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]

                stimulationController.burstCounter = 0;
 8000dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8000fbc <parseUserInput+0x2a4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
                stimulationController.burstPauseIndex = stimulationController.timeBetweenBursts - //this hack is here to ensure that the first stimulation spike can be shown by the sync signal
 8000e04:	4b6d      	ldr	r3, [pc, #436]	@ (8000fbc <parseUserInput+0x2a4>)
 8000e06:	889c      	ldrh	r4, [r3, #4]
                		(uint16_t) ((400000.0) / (float) (timerSetting.D_ARR[0] * NS));
 8000e08:	4b71      	ldr	r3, [pc, #452]	@ (8000fd0 <parseUserInput+0x2b8>)
 8000e0a:	f8b3 3258 	ldrh.w	r3, [r3, #600]	@ 0x258
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4613      	mov	r3, r2
 8000e12:	015b      	lsls	r3, r3, #5
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	ee07 3a90 	vmov	s15, r3
 8000e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e20:	ee17 0a90 	vmov	r0, s15
 8000e24:	f7ff fb34 	bl	8000490 <__aeabi_f2d>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	a160      	add	r1, pc, #384	@ (adr r1, 8000fb0 <parseUserInput+0x298>)
 8000e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e32:	f7ff fcaf 	bl	8000794 <__aeabi_ddiv>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fd91 	bl	8000964 <__aeabi_d2uiz>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29b      	uxth	r3, r3
                stimulationController.burstPauseIndex = stimulationController.timeBetweenBursts - //this hack is here to ensure that the first stimulation spike can be shown by the sync signal
 8000e46:	1ae3      	subs	r3, r4, r3
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b5c      	ldr	r3, [pc, #368]	@ (8000fbc <parseUserInput+0x2a4>)
 8000e4c:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

                stimulationController.continuousStimulation = Rx1_data[1] > 0x7f;
 8000e50:	4b59      	ldr	r3, [pc, #356]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000e52:	785b      	ldrb	r3, [r3, #1]
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	09db      	lsrs	r3, r3, #7
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b57      	ldr	r3, [pc, #348]	@ (8000fbc <parseUserInput+0x2a4>)
 8000e5e:	705a      	strb	r2, [r3, #1]
                {
                    //printf("stimulating once\r\n");
                }
            }

            break;
 8000e60:	e161      	b.n	8001126 <parseUserInput+0x40e>

        case 0x05: //'A' A wave clock frequency

            timerSetting.A_ARR[Rx1_data[3]] = (Rx1_data[1] << 8) | Rx1_data[2];
 8000e62:	4b55      	ldr	r3, [pc, #340]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	4b53      	ldr	r3, [pc, #332]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000e6c:	789b      	ldrb	r3, [r3, #2]
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b219      	sxth	r1, r3
 8000e74:	4b50      	ldr	r3, [pc, #320]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000e76:	78db      	ldrb	r3, [r3, #3]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	4b54      	ldr	r3, [pc, #336]	@ (8000fd0 <parseUserInput+0x2b8>)
 8000e7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            //printf("A_ARR: %d\r\n", timerSetting.A_ARR);
            break;
 8000e82:	e151      	b.n	8001128 <parseUserInput+0x410>
        case 0x06: //'B' B line clock frequency

            // changed to: delay in microseconds

            ; //NS * (ARR) / 80MHz = t [us] (here, t is called 'delay')
            uint16_t delay = (Rx1_data[1] << 8) | Rx1_data[2];
 8000e84:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000e86:	785b      	ldrb	r3, [r3, #1]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000e8e:	789b      	ldrb	r3, [r3, #2]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	813b      	strh	r3, [r7, #8]

            uint16_t ARR_value = (uint16_t) (80.0 * (double) delay / (double) NS);
 8000e98:	893b      	ldrh	r3, [r7, #8]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fad6 	bl	800044c <__aeabi_ui2d>
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8000fd4 <parseUserInput+0x2bc>)
 8000ea6:	f7ff fb4b 	bl	8000540 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b48      	ldr	r3, [pc, #288]	@ (8000fd8 <parseUserInput+0x2c0>)
 8000eb8:	f7ff fc6c 	bl	8000794 <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fd4e 	bl	8000964 <__aeabi_d2uiz>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	82fb      	strh	r3, [r7, #22]


            if (ARR_value <= 20)
 8000ecc:	8afb      	ldrh	r3, [r7, #22]
 8000ece:	2b14      	cmp	r3, #20
 8000ed0:	d80d      	bhi.n	8000eee <parseUserInput+0x1d6>
            {
                ARR_value = 20;
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	82fb      	strh	r3, [r7, #22]
                stimulationController.shortFlatNS = (uint16_t) (2 * delay); //NS = 80 MHz * t / ARR
 8000ed6:	893b      	ldrh	r3, [r7, #8]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b37      	ldr	r3, [pc, #220]	@ (8000fbc <parseUserInput+0x2a4>)
 8000ee0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
                //if (stimulationController.shortFlatNS)
                stimulationController.skipDelay = true;
 8000ee4:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <parseUserInput+0x2a4>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 8000eec:	e007      	b.n	8000efe <parseUserInput+0x1e6>
            } else
            {
                stimulationController.shortFlatNS = NS;
 8000eee:	4b33      	ldr	r3, [pc, #204]	@ (8000fbc <parseUserInput+0x2a4>)
 8000ef0:	2284      	movs	r2, #132	@ 0x84
 8000ef2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207

                stimulationController.skipDelay = false;
 8000ef6:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <parseUserInput+0x2a4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
            }

            timerSetting.B_ARR[Rx1_data[3]] = ARR_value;
 8000efe:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f00:	78db      	ldrb	r3, [r3, #3]
 8000f02:	4933      	ldr	r1, [pc, #204]	@ (8000fd0 <parseUserInput+0x2b8>)
 8000f04:	3364      	adds	r3, #100	@ 0x64
 8000f06:	8afa      	ldrh	r2, [r7, #22]
 8000f08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

            break;
 8000f0c:	e10c      	b.n	8001128 <parseUserInput+0x410>

        case 0x07: //'C' C wave clock frequency
            timerSetting.C_ARR[Rx1_data[3]] = (Rx1_data[1] << 8) | Rx1_data[2];
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f22:	78db      	ldrb	r3, [r3, #3]
 8000f24:	b291      	uxth	r1, r2
 8000f26:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd0 <parseUserInput+0x2b8>)
 8000f28:	33c8      	adds	r3, #200	@ 0xc8
 8000f2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
 8000f2e:	e0fb      	b.n	8001128 <parseUserInput+0x410>

        case 0x08: //'D' D wave clock frequency
            timerSetting.D_ARR[Rx1_data[3]] = (Rx1_data[1] << 8) | Rx1_data[2];
 8000f30:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f44:	78db      	ldrb	r3, [r3, #3]
 8000f46:	b291      	uxth	r1, r2
 8000f48:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <parseUserInput+0x2b8>)
 8000f4a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8000f4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
 8000f52:	e0e9      	b.n	8001128 <parseUserInput+0x410>

        case 0x09: //'N' number of waves in a burst
            stimulationController.maxWaveNumber = (Rx1_data[1] << 8) | Rx1_data[2];
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f5e:	789b      	ldrb	r3, [r3, #2]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <parseUserInput+0x2a4>)
 8000f6a:	805a      	strh	r2, [r3, #2]
            break;
 8000f6c:	e0dc      	b.n	8001128 <parseUserInput+0x410>

        case 0x0a: //this was used for relay opening/closing, now it acts as GPIO control
            ;
            uint16_t tmp = Rx1_data[1] << 8 | Rx1_data[2];
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	817b      	strh	r3, [r7, #10]

            GPIOC->BSRR = (uint32_t) ((uint32_t) (~tmp) << 16 | tmp);
 8000f82:	897b      	ldrh	r3, [r7, #10]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	041a      	lsls	r2, r3, #16
 8000f88:	897b      	ldrh	r3, [r7, #10]
 8000f8a:	4914      	ldr	r1, [pc, #80]	@ (8000fdc <parseUserInput+0x2c4>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	618b      	str	r3, [r1, #24]
            break;
 8000f90:	e0ca      	b.n	8001128 <parseUserInput+0x410>

        case 0x0b: //before: 'm', default value: 50, sets the pause time between bursts
            stimulationController.timeBetweenBursts = (Rx1_data[1] << 8) | Rx1_data[2];
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <parseUserInput+0x2a0>)
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <parseUserInput+0x2a4>)
 8000fa8:	809a      	strh	r2, [r3, #4]
            break;
 8000faa:	e0bd      	b.n	8001128 <parseUserInput+0x410>
 8000fac:	f3af 8000 	nop.w
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	41186a00 	.word	0x41186a00
 8000fb8:	2000002c 	.word	0x2000002c
 8000fbc:	20000bb0 	.word	0x20000bb0
 8000fc0:	200000b4 	.word	0x200000b4
 8000fc4:	20000100 	.word	0x20000100
 8000fc8:	20000678 	.word	0x20000678
 8000fcc:	2000002a 	.word	0x2000002a
 8000fd0:	20000890 	.word	0x20000890
 8000fd4:	40540000 	.word	0x40540000
 8000fd8:	40608000 	.word	0x40608000
 8000fdc:	48000800 	.word	0x48000800
//            enableSPITransmit = 1;

            break;
        case 0x0e: //before: 's', sets the order of the channels, have to redo
            ;
            uint8_t channelOrderIndex = Rx1_data[1]; //which index in the programorder
 8000fe0:	4b53      	ldr	r3, [pc, #332]	@ (8001130 <parseUserInput+0x418>)
 8000fe2:	785b      	ldrb	r3, [r3, #1]
 8000fe4:	74fb      	strb	r3, [r7, #19]

            uint16_t channelOrderIntensity = Rx1_data[2] << 8 | Rx1_data[3]; //what intensity
 8000fe6:	4b52      	ldr	r3, [pc, #328]	@ (8001130 <parseUserInput+0x418>)
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b50      	ldr	r3, [pc, #320]	@ (8001130 <parseUserInput+0x418>)
 8000ff0:	78db      	ldrb	r3, [r3, #3]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	823b      	strh	r3, [r7, #16]

            uint16_t stimChannelToSet = Rx1_data[4] << 8 | Rx1_data[5]; //which channel
 8000ffa:	4b4d      	ldr	r3, [pc, #308]	@ (8001130 <parseUserInput+0x418>)
 8000ffc:	791b      	ldrb	r3, [r3, #4]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b4b      	ldr	r3, [pc, #300]	@ (8001130 <parseUserInput+0x418>)
 8001004:	795b      	ldrb	r3, [r3, #5]
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21b      	sxth	r3, r3
 800100c:	81fb      	strh	r3, [r7, #14]

            uint8_t stimChannelNumberOfBurstsToSet = Rx1_data[6]; //number of bursts
 800100e:	4b48      	ldr	r3, [pc, #288]	@ (8001130 <parseUserInput+0x418>)
 8001010:	799b      	ldrb	r3, [r3, #6]
 8001012:	737b      	strb	r3, [r7, #13]

            //verify channel indexes so that no short happens between the opamp an gnd
            if (((stimChannelToSet & 0x5555) & (stimChannelToSet >> 1)) == 0)
 8001014:	89fa      	ldrh	r2, [r7, #14]
 8001016:	f245 5355 	movw	r3, #21845	@ 0x5555
 800101a:	4013      	ands	r3, r2
 800101c:	89fa      	ldrh	r2, [r7, #14]
 800101e:	0852      	lsrs	r2, r2, #1
 8001020:	b292      	uxth	r2, r2
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d112      	bne.n	800104e <parseUserInput+0x336>
            {
				stimulationController.channelOrder[channelOrderIndex] = stimChannelToSet;
 8001028:	7cfb      	ldrb	r3, [r7, #19]
 800102a:	4942      	ldr	r1, [pc, #264]	@ (8001134 <parseUserInput+0x41c>)
 800102c:	3338      	adds	r3, #56	@ 0x38
 800102e:	89fa      	ldrh	r2, [r7, #14]
 8001030:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

				stimulationController.channelOrderIntensity[channelOrderIndex] = channelOrderIntensity;
 8001034:	7cfb      	ldrb	r3, [r7, #19]
 8001036:	4a3f      	ldr	r2, [pc, #252]	@ (8001134 <parseUserInput+0x41c>)
 8001038:	339c      	adds	r3, #156	@ 0x9c
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	8a3a      	ldrh	r2, [r7, #16]
 8001040:	805a      	strh	r2, [r3, #2]

				stimulationController.channelRepeatNumber[channelOrderIndex] = stimChannelNumberOfBurstsToSet;
 8001042:	7cfb      	ldrb	r3, [r7, #19]
 8001044:	4a3b      	ldr	r2, [pc, #236]	@ (8001134 <parseUserInput+0x41c>)
 8001046:	4413      	add	r3, r2
 8001048:	7b7a      	ldrb	r2, [r7, #13]
 800104a:	719a      	strb	r2, [r3, #6]
            	uint8_t errorMSG[2] = {0xbb, 0xbb};
            	HAL_UART_Transmit(&huart2,  errorMSG, 2, 100);
            }


            break;
 800104c:	e06c      	b.n	8001128 <parseUserInput+0x410>
            	uint8_t errorMSG[2] = {0xbb, 0xbb};
 800104e:	f64b 33bb 	movw	r3, #48059	@ 0xbbbb
 8001052:	80bb      	strh	r3, [r7, #4]
            	HAL_UART_Transmit(&huart2,  errorMSG, 2, 100);
 8001054:	1d39      	adds	r1, r7, #4
 8001056:	2364      	movs	r3, #100	@ 0x64
 8001058:	2202      	movs	r2, #2
 800105a:	4837      	ldr	r0, [pc, #220]	@ (8001138 <parseUserInput+0x420>)
 800105c:	f004 fe50 	bl	8005d00 <HAL_UART_Transmit>
            break;
 8001060:	e062      	b.n	8001128 <parseUserInput+0x410>
        case 0x0f: //before: 'v', number of valid indices in the channel ordering

            stimulationController.validIndeces = Rx1_data[1];
 8001062:	4b33      	ldr	r3, [pc, #204]	@ (8001130 <parseUserInput+0x418>)
 8001064:	785a      	ldrb	r2, [r3, #1]
 8001066:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <parseUserInput+0x41c>)
 8001068:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138

            break;
 800106c:	e05c      	b.n	8001128 <parseUserInput+0x410>
//            }

            break;
        case 0x13:
            ;
            uint16_t data = Rx1_data[1];
 800106e:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <parseUserInput+0x418>)
 8001070:	785b      	ldrb	r3, [r3, #1]
 8001072:	82bb      	strh	r3, [r7, #20]

            //hdac1.Instance->DHR12R1 = dacData & 0x0fff;

            stimulationController.intensityMultiplier = (float) data / 127.0f;
 8001074:	8abb      	ldrh	r3, [r7, #20]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800107e:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 800113c <parseUserInput+0x424>
 8001082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001086:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <parseUserInput+0x41c>)
 8001088:	edc3 7a83 	vstr	s15, [r3, #524]	@ 0x20c
            break;
 800108c:	e04c      	b.n	8001128 <parseUserInput+0x410>
        case 0x14:
        	//debug purposes for now
        	stimulationInfoCommand = Rx1_data[1];
 800108e:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <parseUserInput+0x418>)
 8001090:	785a      	ldrb	r2, [r3, #1]
 8001092:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <parseUserInput+0x428>)
 8001094:	701a      	strb	r2, [r3, #0]
        	break;
 8001096:	e047      	b.n	8001128 <parseUserInput+0x410>
        case 0x15:
        	if (Rx1_data[1] > 127)
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <parseUserInput+0x418>)
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da07      	bge.n	80010b2 <parseUserInput+0x39a>
        	{
        		GPIOC->BSRR = (uint32_t) GPIO_PIN_7;
 80010a2:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <parseUserInput+0x42c>)
 80010a4:	2280      	movs	r2, #128	@ 0x80
 80010a6:	619a      	str	r2, [r3, #24]
        		GPIOC->BSRR = (uint32_t) GPIO_PIN_9;
 80010a8:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <parseUserInput+0x42c>)
 80010aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ae:	619a      	str	r2, [r3, #24]
        	{

        		GPIOC->BRR = (uint32_t) GPIO_PIN_7;
        		GPIOC->BRR = (uint32_t) GPIO_PIN_9;
        	}
        	break;
 80010b0:	e03a      	b.n	8001128 <parseUserInput+0x410>
        		GPIOC->BRR = (uint32_t) GPIO_PIN_7;
 80010b2:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <parseUserInput+0x42c>)
 80010b4:	2280      	movs	r2, #128	@ 0x80
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
        		GPIOC->BRR = (uint32_t) GPIO_PIN_9;
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <parseUserInput+0x42c>)
 80010ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
        	break;
 80010c0:	e032      	b.n	8001128 <parseUserInput+0x410>

        case 0x16:
        	HAL_UART_Transmit(&huart2,  Rx1_data, 8, 100);
 80010c2:	2364      	movs	r3, #100	@ 0x64
 80010c4:	2208      	movs	r2, #8
 80010c6:	491a      	ldr	r1, [pc, #104]	@ (8001130 <parseUserInput+0x418>)
 80010c8:	481b      	ldr	r0, [pc, #108]	@ (8001138 <parseUserInput+0x420>)
 80010ca:	f004 fe19 	bl	8005d00 <HAL_UART_Transmit>
        	break;
 80010ce:	e02b      	b.n	8001128 <parseUserInput+0x410>
        default:
            //printf("unknown command, disabling stimulation\r\n");

            stimulationController.enableStimulation = false;
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <parseUserInput+0x41c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
            htim2.Instance->ARR = DEFAULT_TIMING;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <parseUserInput+0x430>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f640 4235 	movw	r2, #3125	@ 0xc35
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
            hdma_tim2_up.Instance->CMAR = (uint32_t) &Line_LUT;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <parseUserInput+0x434>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001150 <parseUserInput+0x438>)
 80010e6:	60da      	str	r2, [r3, #12]

            CLEAR_BIT(hdma_tim2_up.Instance->CCR, 0);
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <parseUserInput+0x434>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <parseUserInput+0x434>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	601a      	str	r2, [r3, #0]
            hdma_tim2_up.Instance->CNDTR = NS;
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <parseUserInput+0x434>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2284      	movs	r2, #132	@ 0x84
 80010fa:	605a      	str	r2, [r3, #4]
            SET_BIT(hdma_tim2_up.Instance->CCR, 0);
 80010fc:	4b13      	ldr	r3, [pc, #76]	@ (800114c <parseUserInput+0x434>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <parseUserInput+0x434>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	601a      	str	r2, [r3, #0]

            stimulationController.burstCounter = stimulationController.maxWaveNumber;
 8001108:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <parseUserInput+0x41c>)
 800110a:	885a      	ldrh	r2, [r3, #2]
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <parseUserInput+0x41c>)
 800110e:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
            stimulationController.burstPauseIndex = 0;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <parseUserInput+0x41c>)
 8001114:	2200      	movs	r2, #0
 8001116:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

            stimulationInfoCommand = 0x03;
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <parseUserInput+0x428>)
 800111c:	2203      	movs	r2, #3
 800111e:	701a      	strb	r2, [r3, #0]

            break;
 8001120:	e002      	b.n	8001128 <parseUserInput+0x410>
            break;
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <parseUserInput+0x410>
            break;
 8001126:	bf00      	nop
	}
}
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	2000002c 	.word	0x2000002c
 8001134:	20000bb0 	.word	0x20000bb0
 8001138:	200001d0 	.word	0x200001d0
 800113c:	42fe0000 	.word	0x42fe0000
 8001140:	2000002a 	.word	0x2000002a
 8001144:	48000800 	.word	0x48000800
 8001148:	200000b4 	.word	0x200000b4
 800114c:	20000100 	.word	0x20000100
 8001150:	20000678 	.word	0x20000678

08001154 <sendStimProgramInfo>:

void sendStimProgramInfo(uint8_t command)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]

	uint8_t data[7] = {0x69};
 800115e:	2369      	movs	r3, #105	@ 0x69
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2100      	movs	r1, #0
 8001168:	460a      	mov	r2, r1
 800116a:	801a      	strh	r2, [r3, #0]
 800116c:	460a      	mov	r2, r1
 800116e:	709a      	strb	r2, [r3, #2]
	uint8_t size = 1; //holds the number of valid data bytes (excluding the CHKSUM, but including the header)
 8001170:	2301      	movs	r3, #1
 8001172:	77fb      	strb	r3, [r7, #31]
	switch (command)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b04      	cmp	r3, #4
 8001178:	d010      	beq.n	800119c <sendStimProgramInfo+0x48>
 800117a:	2b04      	cmp	r3, #4
 800117c:	dc47      	bgt.n	800120e <sendStimProgramInfo+0xba>
 800117e:	2b02      	cmp	r3, #2
 8001180:	d002      	beq.n	8001188 <sendStimProgramInfo+0x34>
 8001182:	2b03      	cmp	r3, #3
 8001184:	d005      	beq.n	8001192 <sendStimProgramInfo+0x3e>
 8001186:	e042      	b.n	800120e <sendStimProgramInfo+0xba>
	{
	case 0x02: //START STIMULATION
		data[1] = 0x02;
 8001188:	2302      	movs	r3, #2
 800118a:	737b      	strb	r3, [r7, #13]
		size = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	77fb      	strb	r3, [r7, #31]
		break;
 8001190:	e03d      	b.n	800120e <sendStimProgramInfo+0xba>

	case 0x03: //STOP STIMULATION
		data[1] = 0x03;
 8001192:	2303      	movs	r3, #3
 8001194:	737b      	strb	r3, [r7, #13]
		size = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	77fb      	strb	r3, [r7, #31]
		break;
 800119a:	e038      	b.n	800120e <sendStimProgramInfo+0xba>

	case 0x04: //LIVE STIMULATION UPDATE
		data[1] = 0x04;
 800119c:	2304      	movs	r3, #4
 800119e:	737b      	strb	r3, [r7, #13]
		data[2] = (uint8_t) (stimulationController.channelOrder[stimulationController.channelIndex] >> 8);
 80011a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <sendStimProgramInfo+0x10c>)
 80011a2:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80011a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001260 <sendStimProgramInfo+0x10c>)
 80011a8:	3338      	adds	r3, #56	@ 0x38
 80011aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	73bb      	strb	r3, [r7, #14]
		data[3] = (uint8_t) (stimulationController.channelOrder[stimulationController.channelIndex] & 0xff);
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <sendStimProgramInfo+0x10c>)
 80011b8:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <sendStimProgramInfo+0x10c>)
 80011be:	3338      	adds	r3, #56	@ 0x38
 80011c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	73fb      	strb	r3, [r7, #15]

		uint16_t amplitude = (uint16_t)  (stimulationController.intensityMultiplier *
 80011c8:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <sendStimProgramInfo+0x10c>)
 80011ca:	ed93 7a83 	vldr	s14, [r3, #524]	@ 0x20c
                (float) (stimulationController.channelOrderIntensity[stimulationController.channelIndex] & 0x0fff));
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <sendStimProgramInfo+0x10c>)
 80011d0:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80011d4:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <sendStimProgramInfo+0x10c>)
 80011d6:	339c      	adds	r3, #156	@ 0x9c
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	885b      	ldrh	r3, [r3, #2]
 80011de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		uint16_t amplitude = (uint16_t)  (stimulationController.intensityMultiplier *
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
 80011f6:	82fb      	strh	r3, [r7, #22]
		data[4] = (uint8_t) (amplitude >> 8);
 80011f8:	8afb      	ldrh	r3, [r7, #22]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	743b      	strb	r3, [r7, #16]
		data[5] = (uint8_t) (amplitude & 0xff);
 8001202:	8afb      	ldrh	r3, [r7, #22]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	747b      	strb	r3, [r7, #17]

		size = 6;
 8001208:	2306      	movs	r3, #6
 800120a:	77fb      	strb	r3, [r7, #31]
		break;
 800120c:	bf00      	nop
	}

	//append CHKSUM
	uint8_t sum = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	77bb      	strb	r3, [r7, #30]
	for (int i = 0; i < size + 1; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	e00a      	b.n	800122e <sendStimProgramInfo+0xda>
	{
		sum += data[i];
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4413      	add	r3, r2
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	7fbb      	ldrb	r3, [r7, #30]
 8001224:	4413      	add	r3, r2
 8001226:	77bb      	strb	r3, [r7, #30]
	for (int i = 0; i < size + 1; i++)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	3301      	adds	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	429a      	cmp	r2, r3
 8001234:	ddf0      	ble.n	8001218 <sendStimProgramInfo+0xc4>
	}

	data[size] = sum;
 8001236:	7ffb      	ldrb	r3, [r7, #31]
 8001238:	3320      	adds	r3, #32
 800123a:	443b      	add	r3, r7
 800123c:	7fba      	ldrb	r2, [r7, #30]
 800123e:	f803 2c14 	strb.w	r2, [r3, #-20]

	HAL_UART_Transmit(&huart2, data, size + 1, 100);
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	b29b      	uxth	r3, r3
 8001246:	3301      	adds	r3, #1
 8001248:	b29a      	uxth	r2, r3
 800124a:	f107 010c 	add.w	r1, r7, #12
 800124e:	2364      	movs	r3, #100	@ 0x64
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <sendStimProgramInfo+0x110>)
 8001252:	f004 fd55 	bl	8005d00 <HAL_UART_Transmit>
}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000bb0 	.word	0x20000bb0
 8001264:	200001d0 	.word	0x200001d0

08001268 <parseBatteryInfo>:


void parseBatteryInfo()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, Rx2_data, RX2_SIZE, 100);
 800126c:	2364      	movs	r3, #100	@ 0x64
 800126e:	2203      	movs	r2, #3
 8001270:	4902      	ldr	r1, [pc, #8]	@ (800127c <parseBatteryInfo+0x14>)
 8001272:	4803      	ldr	r0, [pc, #12]	@ (8001280 <parseBatteryInfo+0x18>)
 8001274:	f004 fd44 	bl	8005d00 <HAL_UART_Transmit>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000034 	.word	0x20000034
 8001280:	20000148 	.word	0x20000148

08001284 <UART_handleTimeOut>:



void UART_handleTimeOut()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    //restart UART reception
    HAL_UART_Abort_IT(&huart1);
 8001288:	481f      	ldr	r0, [pc, #124]	@ (8001308 <UART_handleTimeOut+0x84>)
 800128a:	f004 fe0f 	bl	8005eac <HAL_UART_Abort_IT>
    HAL_UART_Receive_IT(&huart1, Rx1_data, RX1_SIZE);
 800128e:	2208      	movs	r2, #8
 8001290:	491e      	ldr	r1, [pc, #120]	@ (800130c <UART_handleTimeOut+0x88>)
 8001292:	481d      	ldr	r0, [pc, #116]	@ (8001308 <UART_handleTimeOut+0x84>)
 8001294:	f004 fdbe 	bl	8005e14 <HAL_UART_Receive_IT>
    HAL_UART_Abort_IT(&huart2);
 8001298:	481d      	ldr	r0, [pc, #116]	@ (8001310 <UART_handleTimeOut+0x8c>)
 800129a:	f004 fe07 	bl	8005eac <HAL_UART_Abort_IT>
    HAL_UART_Receive_IT(&huart2, Rx2_data, RX2_SIZE);
 800129e:	2203      	movs	r2, #3
 80012a0:	491c      	ldr	r1, [pc, #112]	@ (8001314 <UART_handleTimeOut+0x90>)
 80012a2:	481b      	ldr	r0, [pc, #108]	@ (8001310 <UART_handleTimeOut+0x8c>)
 80012a4:	f004 fdb6 	bl	8005e14 <HAL_UART_Receive_IT>
    UART_timeOutOccured = false;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <UART_handleTimeOut+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]

    //printf("UART timed out, resetting...\r\n");

    //clear interrupt bits, disable interrupt
    WRITE_REG(huart1.Instance->ICR, USART_ICR_RTOCF);
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <UART_handleTimeOut+0x84>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012b6:	621a      	str	r2, [r3, #32]
    CLEAR_BIT(huart1.Instance->CR2, USART_CR2_RTOEN);
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <UART_handleTimeOut+0x84>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <UART_handleTimeOut+0x84>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80012c6:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(huart1.Instance->CR1, USART_CR1_RTOIE);
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <UART_handleTimeOut+0x84>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <UART_handleTimeOut+0x84>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80012d6:	601a      	str	r2, [r3, #0]

    WRITE_REG(huart2.Instance->ICR, USART_ICR_RTOCF);
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <UART_handleTimeOut+0x8c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012e0:	621a      	str	r2, [r3, #32]
    CLEAR_BIT(huart2.Instance->CR2, USART_CR2_RTOEN);
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <UART_handleTimeOut+0x8c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <UART_handleTimeOut+0x8c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80012f0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RTOIE);
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <UART_handleTimeOut+0x8c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <UART_handleTimeOut+0x8c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000148 	.word	0x20000148
 800130c:	2000002c 	.word	0x2000002c
 8001310:	200001d0 	.word	0x200001d0
 8001314:	20000034 	.word	0x20000034
 8001318:	2000002b 	.word	0x2000002b

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 	generateStimulationPattern();
 8001322:	f000 fddd 	bl	8001ee0 <generateStimulationPattern>
	    initializeTimerSettings();
 8001326:	f000 fb67 	bl	80019f8 <initializeTimerSettings>
	    initializeStimparams();
 800132a:	f000 fb81 	bl	8001a30 <initializeStimparams>

	    spiHandler.enableTransit = false;
 800132e:	4b67      	ldr	r3, [pc, #412]	@ (80014cc <main+0x1b0>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	    spiHandler.data[0] = 0;
 8001334:	4b65      	ldr	r3, [pc, #404]	@ (80014cc <main+0x1b0>)
 8001336:	2200      	movs	r2, #0
 8001338:	805a      	strh	r2, [r3, #2]
	    spiHandler.data[1] = 0;
 800133a:	4b64      	ldr	r3, [pc, #400]	@ (80014cc <main+0x1b0>)
 800133c:	2200      	movs	r2, #0
 800133e:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f001 fb2d 	bl	800299e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f8e0 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 fa6a 	bl	8001820 <MX_GPIO_Init>
  MX_DMA_Init();
 800134c:	f000 fa4a 	bl	80017e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001350:	f000 fa18 	bl	8001784 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001354:	f000 f928 	bl	80015a8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001358:	f000 f996 	bl	8001688 <MX_TIM2_Init>
  MX_SPI1_Init();
 800135c:	f000 f956 	bl	800160c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001360:	f000 f9e0 	bl	8001724 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	//DAC CLR
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_5,  GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2120      	movs	r1, #32
 8001368:	4859      	ldr	r0, [pc, #356]	@ (80014d0 <main+0x1b4>)
 800136a:	f002 fa79 	bl	8003860 <HAL_GPIO_WritePin>
  	//-HV ENABLE
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_7,  GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2180      	movs	r1, #128	@ 0x80
 8001372:	4857      	ldr	r0, [pc, #348]	@ (80014d0 <main+0x1b4>)
 8001374:	f002 fa74 	bl	8003860 <HAL_GPIO_WritePin>
  	//+HV ENABLE
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_9,  GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137e:	4854      	ldr	r0, [pc, #336]	@ (80014d0 <main+0x1b4>)
 8001380:	f002 fa6e 	bl	8003860 <HAL_GPIO_WritePin>
  	//SWITCH CLR
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_8,  GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800138a:	4851      	ldr	r0, [pc, #324]	@ (80014d0 <main+0x1b4>)
 800138c:	f002 fa68 	bl	8003860 <HAL_GPIO_WritePin>
  	//SWITCH LATCH ENABLE
  	HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_15,  GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139a:	f002 fa61 	bl	8003860 <HAL_GPIO_WritePin>
  	//PC4 sync signal
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_4,  GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2110      	movs	r1, #16
 80013a2:	484b      	ldr	r0, [pc, #300]	@ (80014d0 <main+0x1b4>)
 80013a4:	f002 fa5c 	bl	8003860 <HAL_GPIO_WritePin>



	HAL_TIM_Base_Start_IT(&htim2);
 80013a8:	484a      	ldr	r0, [pc, #296]	@ (80014d4 <main+0x1b8>)
 80013aa:	f004 f965 	bl	8005678 <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80013ae:	2100      	movs	r1, #0
 80013b0:	4849      	ldr	r0, [pc, #292]	@ (80014d8 <main+0x1bc>)
 80013b2:	f001 fcc0 	bl	8002d36 <HAL_DAC_Start>

	start_DMA();
 80013b6:	f000 fe75 	bl	80020a4 <start_DMA>

	hdac1.Instance->DHR12R1 = 0;
 80013ba:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <main+0x1bc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]


	if (HAL_UART_Receive_IT(&huart1, Rx1_data, RX1_SIZE) != HAL_OK)
 80013c2:	2208      	movs	r2, #8
 80013c4:	4945      	ldr	r1, [pc, #276]	@ (80014dc <main+0x1c0>)
 80013c6:	4846      	ldr	r0, [pc, #280]	@ (80014e0 <main+0x1c4>)
 80013c8:	f004 fd24 	bl	8005e14 <HAL_UART_Receive_IT>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <main+0xba>
	{
	   Error_Handler();
 80013d2:	f000 fb0b 	bl	80019ec <Error_Handler>
	}

	if (HAL_UART_Receive_IT(&huart2, Rx2_data, RX2_SIZE) != HAL_OK)
 80013d6:	2203      	movs	r2, #3
 80013d8:	4942      	ldr	r1, [pc, #264]	@ (80014e4 <main+0x1c8>)
 80013da:	4843      	ldr	r0, [pc, #268]	@ (80014e8 <main+0x1cc>)
 80013dc:	f004 fd1a 	bl	8005e14 <HAL_UART_Receive_IT>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <main+0xce>
	{
	   Error_Handler();
 80013e6:	f000 fb01 	bl	80019ec <Error_Handler>
	}

	//enable DMA request
	TIM2->DIER |= (1 << 8);
 80013ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f8:	60d3      	str	r3, [r2, #12]

	//disable the half transfer complete interrupt for the DMA
	__HAL_DMA_DISABLE_IT(&hdma_tim2_up, DMA_IT_HT);
 80013fa:	4b3c      	ldr	r3, [pc, #240]	@ (80014ec <main+0x1d0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b3a      	ldr	r3, [pc, #232]	@ (80014ec <main+0x1d0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0204 	bic.w	r2, r2, #4
 8001408:	601a      	str	r2, [r3, #0]


	//set UART timeout to two seconds (2 seconds * (1 / 115200 baud))
	MODIFY_REG(huart1.Instance->RTOR, USART_RTOR_RTO, 230400);
 800140a:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <main+0x1c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8001414:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <main+0x1c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f442 3261 	orr.w	r2, r2, #230400	@ 0x38400
 800141c:	615a      	str	r2, [r3, #20]

	MODIFY_REG(huart2.Instance->RTOR, USART_RTOR_RTO, 230400);
 800141e:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <main+0x1cc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8001428:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <main+0x1cc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 3261 	orr.w	r2, r2, #230400	@ 0x38400
 8001430:	615a      	str	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (startParseInput1 == 1)
 8001432:	4b2f      	ldr	r3, [pc, #188]	@ (80014f0 <main+0x1d4>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d104      	bne.n	8001444 <main+0x128>
	{
		parseUserInput();
 800143a:	f7ff fc6d 	bl	8000d18 <parseUserInput>
		startParseInput1 = 0;
 800143e:	4b2c      	ldr	r3, [pc, #176]	@ (80014f0 <main+0x1d4>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]

	}
	if (startParseInput2 == 2)
 8001444:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <main+0x1d8>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d104      	bne.n	8001456 <main+0x13a>
	{
		parseBatteryInfo();
 800144c:	f7ff ff0c 	bl	8001268 <parseBatteryInfo>
		startParseInput2 = 0;
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <main+0x1d8>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
	}

	if (stimulationInfoCommand != 0x0)
 8001456:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <main+0x1dc>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <main+0x152>
	{
		sendStimProgramInfo(stimulationInfoCommand);
 800145e:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <main+0x1dc>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fe76 	bl	8001154 <sendStimProgramInfo>
		stimulationInfoCommand = 0;
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <main+0x1dc>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
	}

	if (UART_timeOutOccured)
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <main+0x1e0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <main+0x160>
	{
	   UART_handleTimeOut();
 8001478:	f7ff ff04 	bl	8001284 <UART_handleTimeOut>
	}

	if (spiHandler.enableTransit)
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <main+0x1b0>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0d6      	beq.n	8001432 <main+0x116>
	{
		HAL_SPI_Transmit(&hspi1, (uint8_t*) spiHandler.data, 1, 100);
 8001484:	2364      	movs	r3, #100	@ 0x64
 8001486:	2201      	movs	r2, #1
 8001488:	491d      	ldr	r1, [pc, #116]	@ (8001500 <main+0x1e4>)
 800148a:	481e      	ldr	r0, [pc, #120]	@ (8001504 <main+0x1e8>)
 800148c:	f003 fdc3 	bl	8005016 <HAL_SPI_Transmit>
		GPIOA->BRR = (uint32_t) GPIO_PIN_15;
 8001490:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001494:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28
		for (int i = 0; i < 2; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	e008      	b.n	80014b2 <main+0x196>
		{
			i--;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	607b      	str	r3, [r7, #4]
			i++;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3301      	adds	r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < 2; i++)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3301      	adds	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	ddf3      	ble.n	80014a0 <main+0x184>
		}
		GPIOA->BSRR = (uint32_t) GPIO_PIN_15;
 80014b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c0:	619a      	str	r2, [r3, #24]
		spiHandler.enableTransit = false;
 80014c2:	4b02      	ldr	r3, [pc, #8]	@ (80014cc <main+0x1b0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
	if (startParseInput1 == 1)
 80014c8:	e7b3      	b.n	8001432 <main+0x116>
 80014ca:	bf00      	nop
 80014cc:	20000038 	.word	0x20000038
 80014d0:	48000800 	.word	0x48000800
 80014d4:	200000b4 	.word	0x200000b4
 80014d8:	2000003c 	.word	0x2000003c
 80014dc:	2000002c 	.word	0x2000002c
 80014e0:	20000148 	.word	0x20000148
 80014e4:	20000034 	.word	0x20000034
 80014e8:	200001d0 	.word	0x200001d0
 80014ec:	20000100 	.word	0x20000100
 80014f0:	20000028 	.word	0x20000028
 80014f4:	20000029 	.word	0x20000029
 80014f8:	2000002a 	.word	0x2000002a
 80014fc:	2000002b 	.word	0x2000002b
 8001500:	2000003a 	.word	0x2000003a
 8001504:	20000050 	.word	0x20000050

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b096      	sub	sp, #88	@ 0x58
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	2244      	movs	r2, #68	@ 0x44
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f006 f914 	bl	8007744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800152a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800152e:	f002 f9bd 	bl	80038ac <HAL_PWREx_ControlVoltageScaling>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001538:	f000 fa58 	bl	80019ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001540:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154a:	2303      	movs	r3, #3
 800154c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001552:	2314      	movs	r3, #20
 8001554:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001556:	2307      	movs	r3, #7
 8001558:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800155a:	2302      	movs	r3, #2
 800155c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800155e:	2302      	movs	r3, #2
 8001560:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4618      	mov	r0, r3
 8001568:	f002 f9f6 	bl	8003958 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001572:	f000 fa3b 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2303      	movs	r3, #3
 800157c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	2104      	movs	r1, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fdbe 	bl	8004110 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800159a:	f000 fa27 	bl	80019ec <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3758      	adds	r7, #88	@ 0x58
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2224      	movs	r2, #36	@ 0x24
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 f8c5 	bl	8007744 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <MX_DAC1_Init+0x5c>)
 80015bc:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <MX_DAC1_Init+0x60>)
 80015be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015c0:	4810      	ldr	r0, [pc, #64]	@ (8001604 <MX_DAC1_Init+0x5c>)
 80015c2:	f001 fb96 	bl	8002cf2 <HAL_DAC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015cc:	f000 fa0e 	bl	80019ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	@ (8001604 <MX_DAC1_Init+0x5c>)
 80015ec:	f001 fbf0 	bl	8002dd0 <HAL_DAC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015f6:	f000 f9f9 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	@ 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000003c 	.word	0x2000003c
 8001608:	40007400 	.word	0x40007400

0800160c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001612:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <MX_SPI1_Init+0x78>)
 8001614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001618:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800161c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001626:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800162a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_SPI1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_SPI1_Init+0x74>)
 800163a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001642:	2238      	movs	r2, #56	@ 0x38
 8001644:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <MX_SPI1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <MX_SPI1_Init+0x74>)
 800165a:	2207      	movs	r2, #7
 800165c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <MX_SPI1_Init+0x74>)
 8001666:	2208      	movs	r2, #8
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_SPI1_Init+0x74>)
 800166c:	f003 fc30 	bl	8004ed0 <HAL_SPI_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 f9b9 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000050 	.word	0x20000050
 8001684:	40013000 	.word	0x40013000

08001688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <MX_TIM2_Init+0x98>)
 80016a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <MX_TIM2_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <MX_TIM2_Init+0x98>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 320;
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <MX_TIM2_Init+0x98>)
 80016bc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <MX_TIM2_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c8:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <MX_TIM2_Init+0x98>)
 80016ca:	2280      	movs	r2, #128	@ 0x80
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ce:	4814      	ldr	r0, [pc, #80]	@ (8001720 <MX_TIM2_Init+0x98>)
 80016d0:	f003 ff7a 	bl	80055c8 <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016da:	f000 f987 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	4619      	mov	r1, r3
 80016ea:	480d      	ldr	r0, [pc, #52]	@ (8001720 <MX_TIM2_Init+0x98>)
 80016ec:	f004 f834 	bl	8005758 <HAL_TIM_ConfigClockSource>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016f6:	f000 f979 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016fa:	2320      	movs	r3, #32
 80016fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4619      	mov	r1, r3
 8001706:	4806      	ldr	r0, [pc, #24]	@ (8001720 <MX_TIM2_Init+0x98>)
 8001708:	f004 fa24 	bl	8005b54 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001712:	f000 f96b 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000b4 	.word	0x200000b4

08001724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_USART1_UART_Init+0x58>)
 800172a:	4a15      	ldr	r2, [pc, #84]	@ (8001780 <MX_USART1_UART_Init+0x5c>)
 800172c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_USART1_UART_Init+0x58>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_USART1_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <MX_USART1_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <MX_USART1_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <MX_USART1_UART_Init+0x58>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <MX_USART1_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <MX_USART1_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	@ (800177c <MX_USART1_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <MX_USART1_UART_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_USART1_UART_Init+0x58>)
 8001768:	f004 fa7c 	bl	8005c64 <HAL_UART_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001772:	f000 f93b 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000148 	.word	0x20000148
 8001780:	40013800 	.word	0x40013800

08001784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 800178a:	4a15      	ldr	r2, [pc, #84]	@ (80017e0 <MX_USART2_UART_Init+0x5c>)
 800178c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800178e:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 8001790:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017c8:	f004 fa4c 	bl	8005c64 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017d2:	f000 f90b 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200001d0 	.word	0x200001d0
 80017e0:	40004400 	.word	0x40004400

080017e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_DMA_Init+0x38>)
 80017ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ee:	4a0b      	ldr	r2, [pc, #44]	@ (800181c <MX_DMA_Init+0x38>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_DMA_Init+0x38>)
 80017f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	200c      	movs	r0, #12
 8001808:	f001 fa3d 	bl	8002c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800180c:	200c      	movs	r0, #12
 800180e:	f001 fa56 	bl	8002cbe <HAL_NVIC_EnableIRQ>

}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001836:	4b3a      	ldr	r3, [pc, #232]	@ (8001920 <MX_GPIO_Init+0x100>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a39      	ldr	r2, [pc, #228]	@ (8001920 <MX_GPIO_Init+0x100>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <MX_GPIO_Init+0x100>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b34      	ldr	r3, [pc, #208]	@ (8001920 <MX_GPIO_Init+0x100>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4a33      	ldr	r2, [pc, #204]	@ (8001920 <MX_GPIO_Init+0x100>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <MX_GPIO_Init+0x100>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <MX_GPIO_Init+0x100>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	4a2d      	ldr	r2, [pc, #180]	@ (8001920 <MX_GPIO_Init+0x100>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001872:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <MX_GPIO_Init+0x100>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <MX_GPIO_Init+0x100>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	4a27      	ldr	r2, [pc, #156]	@ (8001920 <MX_GPIO_Init+0x100>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188a:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <MX_GPIO_Init+0x100>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|DAC_CLR_Pin|GPIO_PIN_6|GPIO_PIN_7
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 800189c:	4821      	ldr	r0, [pc, #132]	@ (8001924 <MX_GPIO_Init+0x104>)
 800189e:	f001 ffdf 	bl	8003860 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80018a2:	2200      	movs	r2, #0
 80018a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80018a8:	481f      	ldr	r0, [pc, #124]	@ (8001928 <MX_GPIO_Init+0x108>)
 80018aa:	f001 ffd9 	bl	8003860 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b8:	f001 ffd2 	bl	8003860 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 DAC_CLR_Pin PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DAC_CLR_Pin|GPIO_PIN_6|GPIO_PIN_7
 80018bc:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 80018c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4813      	ldr	r0, [pc, #76]	@ (8001924 <MX_GPIO_Init+0x104>)
 80018d6:	f001 fe19 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80018da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018de:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	480d      	ldr	r0, [pc, #52]	@ (8001928 <MX_GPIO_Init+0x108>)
 80018f4:	f001 fe0a 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001914:	f001 fdfa 	bl	800350c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	@ 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	48000800 	.word	0x48000800
 8001928:	48000400 	.word	0x48000400

0800192c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

	//reset timeout interrupt registers because transfer is complete
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001942:	601a      	str	r2, [r3, #0]
	WRITE_REG(huart->Instance->ICR, USART_ICR_RTOCF);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800194c:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800195c:	605a      	str	r2, [r3, #4]

	GPIOC->BSRR = (uint32_t) GPIO_PIN_6;
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <HAL_UART_RxCpltCallback+0xa4>)
 8001960:	2240      	movs	r2, #64	@ 0x40
 8001962:	619a      	str	r2, [r3, #24]
	if (huart == &huart1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_UART_RxCpltCallback+0xa8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d116      	bne.n	800199a <HAL_UART_RxCpltCallback+0x6e>
	{
		if (checkCRC(Rx1_data, RX1_SIZE))
 800196c:	2108      	movs	r1, #8
 800196e:	481a      	ldr	r0, [pc, #104]	@ (80019d8 <HAL_UART_RxCpltCallback+0xac>)
 8001970:	f7ff f9a6 	bl	8000cc0 <checkCRC>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_UART_RxCpltCallback+0x5c>
		{
			if (startParseInput1 == 0)
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_UART_RxCpltCallback+0xb0>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_UART_RxCpltCallback+0x5c>
			{
				startParseInput1 = 1;
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_UART_RxCpltCallback+0xb0>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
		} else
		{
			//printf("CRC error\r\n");
		}

		GPIOC->BRR = (uint32_t) GPIO_PIN_6;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_UART_RxCpltCallback+0xa4>)
 800198a:	2240      	movs	r2, #64	@ 0x40
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_UART_Receive_IT(&huart1, Rx1_data, RX1_SIZE);
 800198e:	2208      	movs	r2, #8
 8001990:	4911      	ldr	r1, [pc, #68]	@ (80019d8 <HAL_UART_RxCpltCallback+0xac>)
 8001992:	4810      	ldr	r0, [pc, #64]	@ (80019d4 <HAL_UART_RxCpltCallback+0xa8>)
 8001994:	f004 fa3e 	bl	8005e14 <HAL_UART_Receive_IT>
		{
			//printf("CRC error\r\n");
		}
		HAL_UART_Receive_IT(&huart2, Rx2_data, RX2_SIZE);
	}
}
 8001998:	e016      	b.n	80019c8 <HAL_UART_RxCpltCallback+0x9c>
	} else if (huart == &huart2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a10      	ldr	r2, [pc, #64]	@ (80019e0 <HAL_UART_RxCpltCallback+0xb4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d112      	bne.n	80019c8 <HAL_UART_RxCpltCallback+0x9c>
		if (checkCRC(Rx2_data, RX2_SIZE))
 80019a2:	2103      	movs	r1, #3
 80019a4:	480f      	ldr	r0, [pc, #60]	@ (80019e4 <HAL_UART_RxCpltCallback+0xb8>)
 80019a6:	f7ff f98b 	bl	8000cc0 <checkCRC>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_UART_RxCpltCallback+0x92>
			if (startParseInput2 == 0)
 80019b0:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <HAL_UART_RxCpltCallback+0xbc>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <HAL_UART_RxCpltCallback+0x92>
				startParseInput2 = 2;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_UART_RxCpltCallback+0xbc>)
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, Rx2_data, RX2_SIZE);
 80019be:	2203      	movs	r2, #3
 80019c0:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <HAL_UART_RxCpltCallback+0xb8>)
 80019c2:	4807      	ldr	r0, [pc, #28]	@ (80019e0 <HAL_UART_RxCpltCallback+0xb4>)
 80019c4:	f004 fa26 	bl	8005e14 <HAL_UART_Receive_IT>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	48000800 	.word	0x48000800
 80019d4:	20000148 	.word	0x20000148
 80019d8:	2000002c 	.word	0x2000002c
 80019dc:	20000028 	.word	0x20000028
 80019e0:	200001d0 	.word	0x200001d0
 80019e4:	20000034 	.word	0x20000034
 80019e8:	20000029 	.word	0x20000029

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <Error_Handler+0x8>

080019f8 <initializeTimerSettings>:
TimerSettingHandle timerSetting;

StimulationControllerHandle stimulationController;

void initializeTimerSettings()
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
    timerSetting.A_ARR[0] = 312;
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <initializeTimerSettings+0x34>)
 80019fe:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8001a02:	801a      	strh	r2, [r3, #0]
    timerSetting.B_ARR[0] = 312;
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <initializeTimerSettings+0x34>)
 8001a06:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8001a0a:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
    timerSetting.C_ARR[0] = 312;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <initializeTimerSettings+0x34>)
 8001a10:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8001a14:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    timerSetting.D_ARR[0] = 3125;
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <initializeTimerSettings+0x34>)
 8001a1a:	f640 4235 	movw	r2, #3125	@ 0xc35
 8001a1e:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258

}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	20000890 	.word	0x20000890

08001a30 <initializeStimparams>:

void initializeStimparams()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
    stimulationController.enableStimulation = false;
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]

    stimulationController.continuousStimulation = false;
 8001a3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	705a      	strb	r2, [r3, #1]

    stimulationController.maxWaveNumber = 10;
 8001a42:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a44:	220a      	movs	r2, #10
 8001a46:	805a      	strh	r2, [r3, #2]

    stimulationController.timeBetweenBursts = 50;
 8001a48:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a4a:	2232      	movs	r2, #50	@ 0x32
 8001a4c:	809a      	strh	r2, [r3, #4]

    stimulationController.channelSwitchTime = 4999;
 8001a4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a50:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001a54:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    stimulationController.burstCounter = stimulationController.maxWaveNumber;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a5a:	885a      	ldrh	r2, [r3, #2]
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a5e:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202

    stimulationController.burstPauseIndex = 0;
 8001a62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

    stimulationController.currentChannelRepeatIndex = 0;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    stimulationController.currentWaveState = longFlat;
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a74:	2204      	movs	r2, #4
 8001a76:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

    stimulationController.shortFlatNS = NS;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a7c:	2284      	movs	r2, #132	@ 0x84
 8001a7e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207

    stimulationController.skipDelay = false;
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208

    stimulationController.panelSwitchRequest = false;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209

    stimulationController.panelSwitchAddress = 0x80;
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a94:	2280      	movs	r2, #128	@ 0x80
 8001a96:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a

    stimulationController.intensityMultiplier = 1;
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <initializeStimparams+0xa8>)
 8001a9c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001aa0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

    uint16_t dummyData = swapBits(2047);
 8001aa4:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001aa8:	f000 f9d8 	bl	8001e5c <swapBits>
 8001aac:	4603      	mov	r3, r0
 8001aae:	80fb      	strh	r3, [r7, #6]
    Dummy_Cycle[0] = (~dummyData) << 16 | dummyData;
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <initializeStimparams+0xac>)
 8001abe:	601a      	str	r2, [r3, #0]
    Dummy_Cycle[1] = swapBits(0x9000);
 8001ac0:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001ac4:	f000 f9ca 	bl	8001e5c <swapBits>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <initializeStimparams+0xac>)
 8001ace:	605a      	str	r2, [r3, #4]
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000bb0 	.word	0x20000bb0
 8001adc:	20000888 	.word	0x20000888

08001ae0 <offsetData>:


void offsetData(uint32_t* array)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001aec:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001af0:	6018      	str	r0, [r3, #0]
    uint32_t copyArray[NS];

    for (uint16_t i = 0; i < NS; i++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 8001af8:	e016      	b.n	8001b28 <offsetData+0x48>
    {
        copyArray[i] = array[i];
 8001afa:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001b04:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f8b7 221e 	ldrh.w	r2, [r7, #542]	@ 0x21e
 8001b10:	6819      	ldr	r1, [r3, #0]
 8001b12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b16:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint16_t i = 0; i < NS; i++)
 8001b1e:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8001b22:	3301      	adds	r3, #1
 8001b24:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 8001b28:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8001b2c:	2b83      	cmp	r3, #131	@ 0x83
 8001b2e:	d9e4      	bls.n	8001afa <offsetData+0x1a>
    }

    for (uint16_t i = TIMING_PADDING / 2; i < NS - TIMING_PADDING / 2; i++)
 8001b30:	2302      	movs	r3, #2
 8001b32:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
 8001b36:	e017      	b.n	8001b68 <offsetData+0x88>
    {
        array[i] = copyArray[i - TIMING_PADDING / 2];
 8001b38:	f8b7 321c 	ldrh.w	r3, [r7, #540]	@ 0x21c
 8001b3c:	1e99      	subs	r1, r3, #2
 8001b3e:	f8b7 321c 	ldrh.w	r3, [r7, #540]	@ 0x21c
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001b48:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001b54:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8001b58:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001b5c:	601a      	str	r2, [r3, #0]
    for (uint16_t i = TIMING_PADDING / 2; i < NS - TIMING_PADDING / 2; i++)
 8001b5e:	f8b7 321c 	ldrh.w	r3, [r7, #540]	@ 0x21c
 8001b62:	3301      	adds	r3, #1
 8001b64:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
 8001b68:	f8b7 321c 	ldrh.w	r3, [r7, #540]	@ 0x21c
 8001b6c:	2b81      	cmp	r3, #129	@ 0x81
 8001b6e:	d9e3      	bls.n	8001b38 <offsetData+0x58>
    }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <fillWithBell>:

void fillWithBell(uint32_t* array, size_t size, double avg, double dev, double amp, double offset)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0ae      	sub	sp, #184	@ 0xb8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b88:	6239      	str	r1, [r7, #32]
 8001b8a:	ed87 0b06 	vstr	d0, [r7, #24]
 8001b8e:	ed87 1b04 	vstr	d1, [r7, #16]
 8001b92:	ed87 2b02 	vstr	d2, [r7, #8]
 8001b96:	ed87 3b00 	vstr	d3, [r7]

    //TODO IMPORTANT check NS!!!!!
    int16_t Wave[NS / 2] = {
 8001b9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b9e:	2284      	movs	r2, #132	@ 0x84
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f005 fdce 	bl	8007744 <memset>
 8001ba8:	233c      	movs	r3, #60	@ 0x3c
 8001baa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001bac:	2352      	movs	r3, #82	@ 0x52
 8001bae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001bb0:	2370      	movs	r3, #112	@ 0x70
 8001bb2:	863b      	strh	r3, [r7, #48]	@ 0x30
 8001bb4:	2396      	movs	r3, #150	@ 0x96
 8001bb6:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001bb8:	23c7      	movs	r3, #199	@ 0xc7
 8001bba:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001bbc:	f240 1305 	movw	r3, #261	@ 0x105
 8001bc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001bc2:	f240 1353 	movw	r3, #339	@ 0x153
 8001bc6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8001bc8:	f240 13b5 	movw	r3, #437	@ 0x1b5
 8001bcc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001bce:	f44f 730b 	mov.w	r3, #556	@ 0x22c
 8001bd2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001bd4:	f240 23be 	movw	r3, #702	@ 0x2be
 8001bd8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001bda:	f44f 735b 	mov.w	r3, #876	@ 0x36c
 8001bde:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8001be2:	f240 433a 	movw	r3, #1082	@ 0x43a
 8001be6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001bea:	f240 532c 	movw	r3, #1324	@ 0x52c
 8001bee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8001bf2:	f240 6344 	movw	r3, #1604	@ 0x644
 8001bf6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001bfa:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001bfe:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001c02:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c06:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001c0a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c0e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001c12:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001c1a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c1e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001c22:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c26:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001c2a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c2e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8001c32:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c36:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8001c3a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c3e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8001c42:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c46:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8001c4a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c4e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8001c52:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c56:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8001c5a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c5e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8001c62:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c66:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8001c6a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c6e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8001c72:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c76:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8001c7a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c7e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8001c82:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c86:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8001c8a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c8e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001c92:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001c9a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001c9e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 8001ca2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001ca6:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8001caa:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cae:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8001cb2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cb6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8001cba:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cbe:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8001cc2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cc6:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8001cca:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cce:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8001cd2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cd6:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8001cda:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cde:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 8001ce2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001ce6:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8001cea:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cee:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8001cf2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cf6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8001cfa:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001cfe:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8001d02:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001d06:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001d0a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001d0e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8001d12:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001d16:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8001d1a:	f240 6344 	movw	r3, #1604	@ 0x644
 8001d1e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8001d22:	f240 532c 	movw	r3, #1324	@ 0x52c
 8001d26:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8001d2a:	f240 433a 	movw	r3, #1082	@ 0x43a
 8001d2e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8001d32:	f44f 735b 	mov.w	r3, #876	@ 0x36c
 8001d36:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8001d3a:	f240 23be 	movw	r3, #702	@ 0x2be
 8001d3e:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 8001d42:	f44f 730b 	mov.w	r3, #556	@ 0x22c
 8001d46:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
 8001d4a:	f240 13b5 	movw	r3, #437	@ 0x1b5
 8001d4e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001d52:	f240 1353 	movw	r3, #339	@ 0x153
 8001d56:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8001d5a:	f240 1305 	movw	r3, #261	@ 0x105
 8001d5e:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8001d62:	23c7      	movs	r3, #199	@ 0xc7
 8001d64:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8001d68:	2396      	movs	r3, #150	@ 0x96
 8001d6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
 8001d6e:	2370      	movs	r3, #112	@ 0x70
 8001d70:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001d74:	2352      	movs	r3, #82	@ 0x52
 8001d76:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 8001d7a:	233c      	movs	r3, #60	@ 0x3c
 8001d7c:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    };




    for (int i = 0; i + 1 < size; i += 2)
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d86:	e05c      	b.n	8001e42 <fillWithBell+0x2c2>
        uint16_t gpioValue;

        //generate bell curve
        //gpioValue = amp * 1800 * exp(-((i - avg)*(i - avg)/(2*dev*dev))) + offset;

        gpioValue = amp * Wave[i / 2] + offset;
 8001d88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d8c:	0fda      	lsrs	r2, r3, #31
 8001d8e:	4413      	add	r3, r2
 8001d90:	105b      	asrs	r3, r3, #1
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	33b8      	adds	r3, #184	@ 0xb8
 8001d96:	443b      	add	r3, r7
 8001d98:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb65 	bl	800046c <__aeabi_i2d>
 8001da2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001da6:	f7fe fbcb 	bl	8000540 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001db6:	f7fe fa0d 	bl	80001d4 <__adddf3>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fdcf 	bl	8000964 <__aeabi_d2uiz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
        if (gpioValue > 4095)
 8001dcc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dd4:	d303      	bcc.n	8001dde <fillWithBell+0x25e>
        {
            gpioValue = 4095;
 8001dd6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001dda:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
        //LDAC (bit #13) - PB7
        //A/B (bit #14) - PB0
        //R/W (bit #15) - PB8

        //set control bits to 0, leave data bits as is
        gpioValue &= 0b0000111111111111;
 8001dde:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2


        //swap bits according to the actual PCB routing
        gpioValue = swapBits(gpioValue);
 8001dea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f834 	bl	8001e5c <swapBits>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2

        //1 in upper 16 bits: drive the corresponding pin low
        //1 in lower 16 bits: drive the corresponding bit high
        //0 anywhere: no change
        array[i] = (~gpioValue) << 16 | gpioValue;
 8001dfa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001e06:	ea42 0103 	orr.w	r1, r2, r3
 8001e0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e12:	4413      	add	r3, r2
 8001e14:	460a      	mov	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]


        //array[i + 1] = (uint32_t) ((1 << 14) | (1 << 13)); //TODO, redo this - redone, have to test

        // set CS, R/W, A/B high (0b1001 0000 0000 0000)
        gpioValue = swapBits(0x9000);
 8001e18:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001e1c:	f000 f81e 	bl	8001e5c <swapBits>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
        array[i + 1] =  gpioValue;
 8001e26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e30:	4413      	add	r3, r2
 8001e32:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 8001e36:	601a      	str	r2, [r3, #0]
    for (int i = 0; i + 1 < size; i += 2)
 8001e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e46:	3301      	adds	r3, #1
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d89b      	bhi.n	8001d88 <fillWithBell+0x208>
    }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	37b8      	adds	r7, #184	@ 0xb8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <swapBits>:


uint16_t swapBits(uint16_t data)
{
 8001e5c:	b490      	push	{r4, r7}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]

    uint16_t result = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	83fb      	strh	r3, [r7, #30]
    /* single channel EEL:
     * uint8_t shiftTo[16] = {9, 12, 6, 11, 2, 1, 15, 10,
                           4, 14, 13, 3, 5, 7, 0, 8};*/

    // this is the pin configuration for the SMALL EEL PCB:
    uint8_t shiftTo[16] = {2, 11, 10, 12, 13, 14, 15, 9, 8, 7, 6, 3, 1, 5, 4, 0};
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <swapBits+0x80>)
 8001e6c:	f107 040c 	add.w	r4, r7, #12
 8001e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    //shift every bit to its place
    result |= (data & 1) << shiftTo[0];
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	7b3a      	ldrb	r2, [r7, #12]
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 1; i < 16; i++)
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	777b      	strb	r3, [r7, #29]
 8001e90:	e01b      	b.n	8001eca <swapBits+0x6e>
    {
        data = data >> 1;
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	80fb      	strh	r3, [r7, #6]
        result |= (((data & 1) > 0) << shiftTo[i]);
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bfcc      	ite	gt
 8001ea2:	2301      	movgt	r3, #1
 8001ea4:	2300      	movle	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	7f7b      	ldrb	r3, [r7, #29]
 8001eac:	3320      	adds	r3, #32
 8001eae:	443b      	add	r3, r7
 8001eb0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 1; i < 16; i++)
 8001ec4:	7f7b      	ldrb	r3, [r7, #29]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	777b      	strb	r3, [r7, #29]
 8001eca:	7f7b      	ldrb	r3, [r7, #29]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d9e0      	bls.n	8001e92 <swapBits+0x36>
    }

    return result;
 8001ed0:	8bfb      	ldrh	r3, [r7, #30]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc90      	pop	{r4, r7}
 8001eda:	4770      	bx	lr
 8001edc:	080077b4 	.word	0x080077b4

08001ee0 <generateStimulationPattern>:


void generateStimulationPattern()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
    fillWithBell(A_wave, NS, NS / 2.0, dev, 1, 2047);
 8001ee6:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8002070 <generateStimulationPattern+0x190>
 8001eea:	ed9f 3b63 	vldr	d3, [pc, #396]	@ 8002078 <generateStimulationPattern+0x198>
 8001eee:	ed9f 2b64 	vldr	d2, [pc, #400]	@ 8002080 <generateStimulationPattern+0x1a0>
 8001ef2:	eeb0 1a47 	vmov.f32	s2, s14
 8001ef6:	eef0 1a67 	vmov.f32	s3, s15
 8001efa:	ed9f 0b63 	vldr	d0, [pc, #396]	@ 8002088 <generateStimulationPattern+0x1a8>
 8001efe:	2184      	movs	r1, #132	@ 0x84
 8001f00:	4865      	ldr	r0, [pc, #404]	@ (8002098 <generateStimulationPattern+0x1b8>)
 8001f02:	f7ff fe3d 	bl	8001b80 <fillWithBell>
    fillWithBell(C_wave, NS, NS / 2.0, dev, -1, 2047);
 8001f06:	ed9f 7b5a 	vldr	d7, [pc, #360]	@ 8002070 <generateStimulationPattern+0x190>
 8001f0a:	ed9f 3b5b 	vldr	d3, [pc, #364]	@ 8002078 <generateStimulationPattern+0x198>
 8001f0e:	ed9f 2b60 	vldr	d2, [pc, #384]	@ 8002090 <generateStimulationPattern+0x1b0>
 8001f12:	eeb0 1a47 	vmov.f32	s2, s14
 8001f16:	eef0 1a67 	vmov.f32	s3, s15
 8001f1a:	ed9f 0b5b 	vldr	d0, [pc, #364]	@ 8002088 <generateStimulationPattern+0x1a8>
 8001f1e:	2184      	movs	r1, #132	@ 0x84
 8001f20:	485e      	ldr	r0, [pc, #376]	@ (800209c <generateStimulationPattern+0x1bc>)
 8001f22:	f7ff fe2d 	bl	8001b80 <fillWithBell>

    for (int i = 0; i + 1 < NS; i+=2)
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e01e      	b.n	8001f6a <generateStimulationPattern+0x8a>
    {
        uint16_t gpioValue;


        // set CS, R/W, A/B high (0b1001 0000 0000 0000)
        gpioValue = swapBits(2047);
 8001f2c:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001f30:	f7ff ff94 	bl	8001e5c <swapBits>
 8001f34:	4603      	mov	r3, r0
 8001f36:	80bb      	strh	r3, [r7, #4]
        Line_LUT[i] = (~gpioValue) << 16 | gpioValue; // set everything to 2047 (+ first 4 bits are control bits)
 8001f38:	88bb      	ldrh	r3, [r7, #4]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	4a56      	ldr	r2, [pc, #344]	@ (80020a0 <generateStimulationPattern+0x1c0>)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        gpioValue = swapBits(0x9000);
 8001f4c:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001f50:	f7ff ff84 	bl	8001e5c <swapBits>
 8001f54:	4603      	mov	r3, r0
 8001f56:	80bb      	strh	r3, [r7, #4]
        Line_LUT[i + 1] = gpioValue;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	88ba      	ldrh	r2, [r7, #4]
 8001f5e:	4950      	ldr	r1, [pc, #320]	@ (80020a0 <generateStimulationPattern+0x1c0>)
 8001f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i + 1 < NS; i+=2)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3302      	adds	r3, #2
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b82      	cmp	r3, #130	@ 0x82
 8001f6e:	dddd      	ble.n	8001f2c <generateStimulationPattern+0x4c>
    }

    offsetData(A_wave);
 8001f70:	4849      	ldr	r0, [pc, #292]	@ (8002098 <generateStimulationPattern+0x1b8>)
 8001f72:	f7ff fdb5 	bl	8001ae0 <offsetData>
    offsetData(C_wave);
 8001f76:	4849      	ldr	r0, [pc, #292]	@ (800209c <generateStimulationPattern+0x1bc>)
 8001f78:	f7ff fdb2 	bl	8001ae0 <offsetData>

    //perform padding //TODO - shift the first n data points maybe? (because first elements also get padded over)
    uint16_t gpioValue;
    gpioValue = swapBits(2047);
 8001f7c:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001f80:	f7ff ff6c 	bl	8001e5c <swapBits>
 8001f84:	4603      	mov	r3, r0
 8001f86:	80fb      	strh	r3, [r7, #6]

    for (int i = 0; i < TIMING_PADDING / 2; i++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	e068      	b.n	8002060 <generateStimulationPattern+0x180>
    {
        A_wave[2 * i] = (~gpioValue) << 16 | gpioValue;
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	041a      	lsls	r2, r3, #16
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002098 <generateStimulationPattern+0x1b8>)
 8001fa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        A_wave[2 * i + 1] = swapBits(0x9000);
 8001fa4:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001fa8:	f7ff ff58 	bl	8001e5c <swapBits>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4a37      	ldr	r2, [pc, #220]	@ (8002098 <generateStimulationPattern+0x1b8>)
 8001fba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        A_wave[NS - 2 - 2 * i] = (~gpioValue) << 16 | gpioValue;
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	041a      	lsls	r2, r3, #16
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f1c3 0341 	rsb	r3, r3, #65	@ 0x41
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4a31      	ldr	r2, [pc, #196]	@ (8002098 <generateStimulationPattern+0x1b8>)
 8001fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        A_wave[NS - 1 - 2 * i] = swapBits(0x9000);
 8001fd8:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001fdc:	f7ff ff3e 	bl	8001e5c <swapBits>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8001fec:	4611      	mov	r1, r2
 8001fee:	4a2a      	ldr	r2, [pc, #168]	@ (8002098 <generateStimulationPattern+0x1b8>)
 8001ff0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        C_wave[2 * i] = (~gpioValue) << 16 | gpioValue;
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	041a      	lsls	r2, r3, #16
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4611      	mov	r1, r2
 8002004:	4a25      	ldr	r2, [pc, #148]	@ (800209c <generateStimulationPattern+0x1bc>)
 8002006:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        C_wave[2 * i + 1] = swapBits(0x9000);
 800200a:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800200e:	f7ff ff25 	bl	8001e5c <swapBits>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	3301      	adds	r3, #1
 800201c:	4611      	mov	r1, r2
 800201e:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <generateStimulationPattern+0x1bc>)
 8002020:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        C_wave[NS - 2 - 2 * i] = (~gpioValue) << 16 | gpioValue;
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	43db      	mvns	r3, r3
 8002028:	041a      	lsls	r2, r3, #16
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	431a      	orrs	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f1c3 0341 	rsb	r3, r3, #65	@ 0x41
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4611      	mov	r1, r2
 8002038:	4a18      	ldr	r2, [pc, #96]	@ (800209c <generateStimulationPattern+0x1bc>)
 800203a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        C_wave[NS - 1 - 2 * i] = swapBits(0x9000);
 800203e:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8002042:	f7ff ff0b 	bl	8001e5c <swapBits>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8002052:	4611      	mov	r1, r2
 8002054:	4a11      	ldr	r2, [pc, #68]	@ (800209c <generateStimulationPattern+0x1bc>)
 8002056:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < TIMING_PADDING / 2; i++)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3301      	adds	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b01      	cmp	r3, #1
 8002064:	dd93      	ble.n	8001f8e <generateStimulationPattern+0xae>
    }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	00000000 	.word	0x00000000
 8002074:	40340000 	.word	0x40340000
 8002078:	00000000 	.word	0x00000000
 800207c:	409ffc00 	.word	0x409ffc00
 8002080:	00000000 	.word	0x00000000
 8002084:	3ff00000 	.word	0x3ff00000
 8002088:	00000000 	.word	0x00000000
 800208c:	40508000 	.word	0x40508000
 8002090:	00000000 	.word	0x00000000
 8002094:	bff00000 	.word	0xbff00000
 8002098:	20000258 	.word	0x20000258
 800209c:	20000468 	.word	0x20000468
 80020a0:	20000678 	.word	0x20000678

080020a4 <start_DMA>:

void start_DMA()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
    if (HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t) Line_LUT, (uint32_t)&(GPIOB->BSRR), NS) != HAL_OK)
 80020a8:	4906      	ldr	r1, [pc, #24]	@ (80020c4 <start_DMA+0x20>)
 80020aa:	2384      	movs	r3, #132	@ 0x84
 80020ac:	4a06      	ldr	r2, [pc, #24]	@ (80020c8 <start_DMA+0x24>)
 80020ae:	4807      	ldr	r0, [pc, #28]	@ (80020cc <start_DMA+0x28>)
 80020b0:	f001 f86e 	bl	8003190 <HAL_DMA_Start_IT>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <start_DMA+0x1a>
    {
        Error_Handler();
 80020ba:	f7ff fc97 	bl	80019ec <Error_Handler>
    }
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000678 	.word	0x20000678
 80020c8:	48000418 	.word	0x48000418
 80020cc:	20000100 	.word	0x20000100

080020d0 <handleStimulation>:
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, address & 0x80);
}


void handleStimulation()
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, debugPin);
//    debugPin = !debugPin;
    //enableStimulation is controlled by user commands from UART
    if (!stimulationController.enableStimulation)
 80020d4:	4ba8      	ldr	r3, [pc, #672]	@ (8002378 <handleStimulation+0x2a8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	f083 0301 	eor.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <handleStimulation+0x1a>
    {
    	GPIOC->BRR = (uint32_t) GPIO_PIN_4; //sync signal -> low
 80020e2:	4ba6      	ldr	r3, [pc, #664]	@ (800237c <handleStimulation+0x2ac>)
 80020e4:	2210      	movs	r2, #16
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28
        return;
 80020e8:	e1c7      	b.n	800247a <handleStimulation+0x3aa>
    }

    //burstCounter counts the number of bursts remaining after the enableStimulation flag is set to true
    //if it is 0, we skip timeBetweenBursts * D_ARR / 1.25 microseconds of stimulation
    if (stimulationController.burstCounter == 0)
 80020ea:	4ba3      	ldr	r3, [pc, #652]	@ (8002378 <handleStimulation+0x2a8>)
 80020ec:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 80f2 	bne.w	80022da <handleStimulation+0x20a>
    {
        if (stimulationController.burstPauseIndex < stimulationController.timeBetweenBursts) // == it's pausing time
 80020f6:	4ba0      	ldr	r3, [pc, #640]	@ (8002378 <handleStimulation+0x2a8>)
 80020f8:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 80020fc:	4b9e      	ldr	r3, [pc, #632]	@ (8002378 <handleStimulation+0x2a8>)
 80020fe:	889b      	ldrh	r3, [r3, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d237      	bcs.n	8002174 <handleStimulation+0xa4>
        {
            htim2.Instance->ARR = timerSetting.D_ARR[stimulationController.channelIndex];
 8002104:	4b9c      	ldr	r3, [pc, #624]	@ (8002378 <handleStimulation+0x2a8>)
 8002106:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800210a:	4a9d      	ldr	r2, [pc, #628]	@ (8002380 <handleStimulation+0x2b0>)
 800210c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002110:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002114:	4b9b      	ldr	r3, [pc, #620]	@ (8002384 <handleStimulation+0x2b4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	62da      	str	r2, [r3, #44]	@ 0x2c

            stimulationController.currentWaveState = longFlat;
 800211a:	4b97      	ldr	r3, [pc, #604]	@ (8002378 <handleStimulation+0x2a8>)
 800211c:	2204      	movs	r2, #4
 800211e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
            stimulationController.burstPauseIndex++;
 8002122:	4b95      	ldr	r3, [pc, #596]	@ (8002378 <handleStimulation+0x2a8>)
 8002124:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8002128:	3301      	adds	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	4b92      	ldr	r3, [pc, #584]	@ (8002378 <handleStimulation+0x2a8>)
 800212e:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

            if ((stimulationController.timeBetweenBursts - stimulationController.burstPauseIndex)
 8002132:	4b91      	ldr	r3, [pc, #580]	@ (8002378 <handleStimulation+0x2a8>)
 8002134:	889b      	ldrh	r3, [r3, #4]
 8002136:	461a      	mov	r2, r3
 8002138:	4b8f      	ldr	r3, [pc, #572]	@ (8002378 <handleStimulation+0x2a8>)
 800213a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800213e:	1ad3      	subs	r3, r2, r3
            		* timerSetting.D_ARR[stimulationController.channelIndex] * NS < 400000)
 8002140:	4a8d      	ldr	r2, [pc, #564]	@ (8002378 <handleStimulation+0x2a8>)
 8002142:	f892 206e 	ldrb.w	r2, [r2, #110]	@ 0x6e
 8002146:	498e      	ldr	r1, [pc, #568]	@ (8002380 <handleStimulation+0x2b0>)
 8002148:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 800214c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002150:	fb03 f202 	mul.w	r2, r3, r2
 8002154:	4613      	mov	r3, r2
 8002156:	015b      	lsls	r3, r3, #5
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	461a      	mov	r2, r3
            if ((stimulationController.timeBetweenBursts - stimulationController.burstPauseIndex)
 800215e:	4b8a      	ldr	r3, [pc, #552]	@ (8002388 <handleStimulation+0x2b8>)
 8002160:	429a      	cmp	r2, r3
 8002162:	dc03      	bgt.n	800216c <handleStimulation+0x9c>
            {
            	GPIOC->BSRR = (uint32_t) GPIO_PIN_4;
 8002164:	4b85      	ldr	r3, [pc, #532]	@ (800237c <handleStimulation+0x2ac>)
 8002166:	2210      	movs	r2, #16
 8002168:	619a      	str	r2, [r3, #24]
            } else
            {
            	GPIOC->BRR = (uint32_t) GPIO_PIN_4;
            }

            return; //return, as we have nothing else to do
 800216a:	e186      	b.n	800247a <handleStimulation+0x3aa>
            	GPIOC->BRR = (uint32_t) GPIO_PIN_4;
 800216c:	4b83      	ldr	r3, [pc, #524]	@ (800237c <handleStimulation+0x2ac>)
 800216e:	2210      	movs	r2, #16
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28
            return; //return, as we have nothing else to do
 8002172:	e182      	b.n	800247a <handleStimulation+0x3aa>
        } else //pause over, start a burst of waves
        {
            //reset pause counter
            stimulationController.burstPauseIndex = 0;
 8002174:	4b80      	ldr	r3, [pc, #512]	@ (8002378 <handleStimulation+0x2a8>)
 8002176:	2200      	movs	r2, #0
 8002178:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

            stimulationController.currentWaveState = upBump;
 800217c:	4b7e      	ldr	r3, [pc, #504]	@ (8002378 <handleStimulation+0x2a8>)
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

            //set TIM2 clock to frequency needed for the A wave
            htim2.Instance->ARR = timerSetting.A_ARR[stimulationController.channelIndex];
 8002184:	4b7c      	ldr	r3, [pc, #496]	@ (8002378 <handleStimulation+0x2a8>)
 8002186:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800218a:	461a      	mov	r2, r3
 800218c:	4b7c      	ldr	r3, [pc, #496]	@ (8002380 <handleStimulation+0x2b0>)
 800218e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002192:	4b7c      	ldr	r3, [pc, #496]	@ (8002384 <handleStimulation+0x2b4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	62da      	str	r2, [r3, #44]	@ 0x2c


            stimulationController.burstCounter = stimulationController.maxWaveNumber;
 8002198:	4b77      	ldr	r3, [pc, #476]	@ (8002378 <handleStimulation+0x2a8>)
 800219a:	885a      	ldrh	r2, [r3, #2]
 800219c:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <handleStimulation+0x2a8>)
 800219e:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202

            //this counts the number of times that a channel should be repeated for (is held in stimulationController.channelRepeatNumber[channelIndex])
            stimulationController.currentChannelRepeatIndex++;
 80021a2:	4b75      	ldr	r3, [pc, #468]	@ (8002378 <handleStimulation+0x2a8>)
 80021a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80021a8:	3301      	adds	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	4b72      	ldr	r3, [pc, #456]	@ (8002378 <handleStimulation+0x2a8>)
 80021ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 80021b2:	4b76      	ldr	r3, [pc, #472]	@ (800238c <handleStimulation+0x2bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a75      	ldr	r2, [pc, #468]	@ (800238c <handleStimulation+0x2bc>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CNDTR = NS;
 80021be:	4b73      	ldr	r3, [pc, #460]	@ (800238c <handleStimulation+0x2bc>)
 80021c0:	2284      	movs	r2, #132	@ 0x84
 80021c2:	605a      	str	r2, [r3, #4]
            SET_BIT(DMA1_Channel2->CCR, 1);
 80021c4:	4b71      	ldr	r3, [pc, #452]	@ (800238c <handleStimulation+0x2bc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a70      	ldr	r2, [pc, #448]	@ (800238c <handleStimulation+0x2bc>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

            if (stimulationController.currentChannelRepeatIndex >= stimulationController.channelRepeatNumber[stimulationController.channelIndex])
 80021d0:	4b69      	ldr	r3, [pc, #420]	@ (8002378 <handleStimulation+0x2a8>)
 80021d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80021d6:	4a68      	ldr	r2, [pc, #416]	@ (8002378 <handleStimulation+0x2a8>)
 80021d8:	f892 206e 	ldrb.w	r2, [r2, #110]	@ 0x6e
 80021dc:	4611      	mov	r1, r2
 80021de:	4a66      	ldr	r2, [pc, #408]	@ (8002378 <handleStimulation+0x2a8>)
 80021e0:	440a      	add	r2, r1
 80021e2:	7992      	ldrb	r2, [r2, #6]
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d378      	bcc.n	80022da <handleStimulation+0x20a>
            {

                stimulationController.currentChannelRepeatIndex = 0;
 80021e8:	4b63      	ldr	r3, [pc, #396]	@ (8002378 <handleStimulation+0x2a8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

                //go to next channel
                stimulationController.channelIndex++;
 80021f0:	4b61      	ldr	r3, [pc, #388]	@ (8002378 <handleStimulation+0x2a8>)
 80021f2:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80021f6:	3301      	adds	r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002378 <handleStimulation+0x2a8>)
 80021fc:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
                if (stimulationController.channelIndex >= stimulationController.validIndeces)
 8002200:	4b5d      	ldr	r3, [pc, #372]	@ (8002378 <handleStimulation+0x2a8>)
 8002202:	f893 206e 	ldrb.w	r2, [r3, #110]	@ 0x6e
 8002206:	4b5c      	ldr	r3, [pc, #368]	@ (8002378 <handleStimulation+0x2a8>)
 8002208:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 800220c:	429a      	cmp	r2, r3
 800220e:	d334      	bcc.n	800227a <handleStimulation+0x1aa>
                {
                    stimulationController.channelIndex = 0;
 8002210:	4b59      	ldr	r3, [pc, #356]	@ (8002378 <handleStimulation+0x2a8>)
 8002212:	2200      	movs	r2, #0
 8002214:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

                    if (!stimulationController.continuousStimulation) {
 8002218:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <handleStimulation+0x2a8>)
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	f083 0301 	eor.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d029      	beq.n	800227a <handleStimulation+0x1aa>

                        //this means that only one stimulation was requested
                        stimulationController.enableStimulation = 0;
 8002226:	4b54      	ldr	r3, [pc, #336]	@ (8002378 <handleStimulation+0x2a8>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]

                        stimulationInfoCommand = 0x03;
 800222c:	4b58      	ldr	r3, [pc, #352]	@ (8002390 <handleStimulation+0x2c0>)
 800222e:	2203      	movs	r2, #3
 8002230:	701a      	strb	r2, [r3, #0]

                        CLEAR_BIT(DMA1_Channel2->CCR, 1);
 8002232:	4b56      	ldr	r3, [pc, #344]	@ (800238c <handleStimulation+0x2bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a55      	ldr	r2, [pc, #340]	@ (800238c <handleStimulation+0x2bc>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6013      	str	r3, [r2, #0]
                        DMA1_Channel2->CMAR = (uint32_t) &Line_LUT;
 800223e:	4b53      	ldr	r3, [pc, #332]	@ (800238c <handleStimulation+0x2bc>)
 8002240:	4a54      	ldr	r2, [pc, #336]	@ (8002394 <handleStimulation+0x2c4>)
 8002242:	60da      	str	r2, [r3, #12]
                        TIM2->ARR = DEFAULT_TIMING;
 8002244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002248:	f640 4235 	movw	r2, #3125	@ 0xc35
 800224c:	62da      	str	r2, [r3, #44]	@ 0x2c
                        DMA1_Channel2->CNDTR = NS;
 800224e:	4b4f      	ldr	r3, [pc, #316]	@ (800238c <handleStimulation+0x2bc>)
 8002250:	2284      	movs	r2, #132	@ 0x84
 8002252:	605a      	str	r2, [r3, #4]
                        SET_BIT(DMA1_Channel2->CCR, 1);
 8002254:	4b4d      	ldr	r3, [pc, #308]	@ (800238c <handleStimulation+0x2bc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4c      	ldr	r2, [pc, #304]	@ (800238c <handleStimulation+0x2bc>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6013      	str	r3, [r2, #0]

                    	GPIOC->BRR = (uint32_t) GPIO_PIN_4;
 8002260:	4b46      	ldr	r3, [pc, #280]	@ (800237c <handleStimulation+0x2ac>)
 8002262:	2210      	movs	r2, #16
 8002264:	629a      	str	r2, [r3, #40]	@ 0x28


                        stimulationController.burstCounter = stimulationController.maxWaveNumber;
 8002266:	4b44      	ldr	r3, [pc, #272]	@ (8002378 <handleStimulation+0x2a8>)
 8002268:	885a      	ldrh	r2, [r3, #2]
 800226a:	4b43      	ldr	r3, [pc, #268]	@ (8002378 <handleStimulation+0x2a8>)
 800226c:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
                        stimulationController.burstPauseIndex = 0;
 8002270:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <handleStimulation+0x2a8>)
 8002272:	2200      	movs	r2, #0
 8002274:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
                        return;
 8002278:	e0ff      	b.n	800247a <handleStimulation+0x3aa>
                    }
                }
                GPIOC->BSRR = (uint32_t) GPIO_PIN_6;
 800227a:	4b40      	ldr	r3, [pc, #256]	@ (800237c <handleStimulation+0x2ac>)
 800227c:	2240      	movs	r2, #64	@ 0x40
 800227e:	619a      	str	r2, [r3, #24]
                //enablePanel(stimulationController.channelOrder[stimulationController.channelIndex]);
                spiHandler.data[0] = stimulationController.channelOrder[stimulationController.channelIndex];
 8002280:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <handleStimulation+0x2a8>)
 8002282:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8002286:	4a3c      	ldr	r2, [pc, #240]	@ (8002378 <handleStimulation+0x2a8>)
 8002288:	3338      	adds	r3, #56	@ 0x38
 800228a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800228e:	4b42      	ldr	r3, [pc, #264]	@ (8002398 <handleStimulation+0x2c8>)
 8002290:	805a      	strh	r2, [r3, #2]
                spiHandler.enableTransit = true;
 8002292:	4b41      	ldr	r3, [pc, #260]	@ (8002398 <handleStimulation+0x2c8>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]

                stimulationInfoCommand = 0x04;
 8002298:	4b3d      	ldr	r3, [pc, #244]	@ (8002390 <handleStimulation+0x2c0>)
 800229a:	2204      	movs	r2, #4
 800229c:	701a      	strb	r2, [r3, #0]
                GPIOC->BRR = (uint32_t) GPIO_PIN_6;
 800229e:	4b37      	ldr	r3, [pc, #220]	@ (800237c <handleStimulation+0x2ac>)
 80022a0:	2240      	movs	r2, #64	@ 0x40
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28

                hdac1.Instance->DHR12R1 = (uint16_t)  (stimulationController.intensityMultiplier *
 80022a4:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <handleStimulation+0x2a8>)
 80022a6:	ed93 7a83 	vldr	s14, [r3, #524]	@ 0x20c
                        (float) (stimulationController.channelOrderIntensity[stimulationController.channelIndex] & 0x0fff));
 80022aa:	4b33      	ldr	r3, [pc, #204]	@ (8002378 <handleStimulation+0x2a8>)
 80022ac:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80022b0:	4a31      	ldr	r2, [pc, #196]	@ (8002378 <handleStimulation+0x2a8>)
 80022b2:	339c      	adds	r3, #156	@ 0x9c
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	885b      	ldrh	r3, [r3, #2]
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                hdac1.Instance->DHR12R1 = (uint16_t)  (stimulationController.intensityMultiplier *
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022ce:	ee17 3a90 	vmov	r3, s15
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	4b31      	ldr	r3, [pc, #196]	@ (800239c <handleStimulation+0x2cc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	609a      	str	r2, [r3, #8]
        }
    }
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, debugPin);
//    debugPin = !debugPin;

    switch (stimulationController.currentWaveState)
 80022da:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <handleStimulation+0x2a8>)
 80022dc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	f200 80b1 	bhi.w	8002448 <handleStimulation+0x378>
 80022e6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <handleStimulation+0x21c>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	08002301 	.word	0x08002301
 80022f0:	0800233b 	.word	0x0800233b
 80022f4:	080023a5 	.word	0x080023a5
 80022f8:	080023df 	.word	0x080023df
 80022fc:	0800240d 	.word	0x0800240d
    {
        case upBump:

            //disable channel
            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 8002300:	4b22      	ldr	r3, [pc, #136]	@ (800238c <handleStimulation+0x2bc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a21      	ldr	r2, [pc, #132]	@ (800238c <handleStimulation+0x2bc>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]
            //update array pointer
            DMA1_Channel2->CMAR = (uint32_t) &A_wave;
 800230c:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <handleStimulation+0x2bc>)
 800230e:	4a24      	ldr	r2, [pc, #144]	@ (80023a0 <handleStimulation+0x2d0>)
 8002310:	60da      	str	r2, [r3, #12]
            //set timer setting
            TIM2->ARR = timerSetting.A_ARR[stimulationController.channelIndex];
 8002312:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <handleStimulation+0x2a8>)
 8002314:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8002318:	461a      	mov	r2, r3
 800231a:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <handleStimulation+0x2b0>)
 800231c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002320:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002324:	62da      	str	r2, [r3, #44]	@ 0x2c
            //update DMA counter
            DMA1_Channel2->CNDTR = NS;
 8002326:	4b19      	ldr	r3, [pc, #100]	@ (800238c <handleStimulation+0x2bc>)
 8002328:	2284      	movs	r2, #132	@ 0x84
 800232a:	605a      	str	r2, [r3, #4]
            //enable channel
            SET_BIT(DMA1_Channel2->CCR, 1);
 800232c:	4b17      	ldr	r3, [pc, #92]	@ (800238c <handleStimulation+0x2bc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a16      	ldr	r2, [pc, #88]	@ (800238c <handleStimulation+0x2bc>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6013      	str	r3, [r2, #0]
            break;
 8002338:	e086      	b.n	8002448 <handleStimulation+0x378>

        case shortFlat:

            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 800233a:	4b14      	ldr	r3, [pc, #80]	@ (800238c <handleStimulation+0x2bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a13      	ldr	r2, [pc, #76]	@ (800238c <handleStimulation+0x2bc>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CMAR = (uint32_t) &Line_LUT;
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <handleStimulation+0x2bc>)
 8002348:	4a12      	ldr	r2, [pc, #72]	@ (8002394 <handleStimulation+0x2c4>)
 800234a:	60da      	str	r2, [r3, #12]
            TIM2->ARR = timerSetting.B_ARR[stimulationController.channelIndex];
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <handleStimulation+0x2a8>)
 800234e:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8002352:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <handleStimulation+0x2b0>)
 8002354:	3364      	adds	r3, #100	@ 0x64
 8002356:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800235a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c
            DMA1_Channel2->CNDTR = stimulationController.shortFlatNS;
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <handleStimulation+0x2a8>)
 8002362:	f893 2207 	ldrb.w	r2, [r3, #519]	@ 0x207
 8002366:	4b09      	ldr	r3, [pc, #36]	@ (800238c <handleStimulation+0x2bc>)
 8002368:	605a      	str	r2, [r3, #4]
            SET_BIT(DMA1_Channel2->CCR, 1);
 800236a:	4b08      	ldr	r3, [pc, #32]	@ (800238c <handleStimulation+0x2bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a07      	ldr	r2, [pc, #28]	@ (800238c <handleStimulation+0x2bc>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]

            break;
 8002376:	e067      	b.n	8002448 <handleStimulation+0x378>
 8002378:	20000bb0 	.word	0x20000bb0
 800237c:	48000800 	.word	0x48000800
 8002380:	20000890 	.word	0x20000890
 8002384:	200000b4 	.word	0x200000b4
 8002388:	00061a7f 	.word	0x00061a7f
 800238c:	4002001c 	.word	0x4002001c
 8002390:	2000002a 	.word	0x2000002a
 8002394:	20000678 	.word	0x20000678
 8002398:	20000038 	.word	0x20000038
 800239c:	2000003c 	.word	0x2000003c
 80023a0:	20000258 	.word	0x20000258

        case downBump:

            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 80023a4:	4b37      	ldr	r3, [pc, #220]	@ (8002484 <handleStimulation+0x3b4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a36      	ldr	r2, [pc, #216]	@ (8002484 <handleStimulation+0x3b4>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CMAR = (uint32_t) &C_wave;
 80023b0:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <handleStimulation+0x3b4>)
 80023b2:	4a35      	ldr	r2, [pc, #212]	@ (8002488 <handleStimulation+0x3b8>)
 80023b4:	60da      	str	r2, [r3, #12]
            TIM2->ARR = timerSetting.C_ARR[stimulationController.channelIndex];
 80023b6:	4b35      	ldr	r3, [pc, #212]	@ (800248c <handleStimulation+0x3bc>)
 80023b8:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80023bc:	4a34      	ldr	r2, [pc, #208]	@ (8002490 <handleStimulation+0x3c0>)
 80023be:	33c8      	adds	r3, #200	@ 0xc8
 80023c0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80023c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023c8:	62da      	str	r2, [r3, #44]	@ 0x2c

            DMA1_Channel2->CNDTR = NS;
 80023ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002484 <handleStimulation+0x3b4>)
 80023cc:	2284      	movs	r2, #132	@ 0x84
 80023ce:	605a      	str	r2, [r3, #4]
            SET_BIT(DMA1_Channel2->CCR, 1);
 80023d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <handleStimulation+0x3b4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002484 <handleStimulation+0x3b4>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6013      	str	r3, [r2, #0]

            break;
 80023dc:	e034      	b.n	8002448 <handleStimulation+0x378>

        case delay2:

            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 80023de:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <handleStimulation+0x3b4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a28      	ldr	r2, [pc, #160]	@ (8002484 <handleStimulation+0x3b4>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CNDTR = 2;
 80023ea:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <handleStimulation+0x3b4>)
 80023ec:	2202      	movs	r2, #2
 80023ee:	605a      	str	r2, [r3, #4]
            DMA1_Channel2->CMAR = (uint32_t) &Dummy_Cycle;
 80023f0:	4b24      	ldr	r3, [pc, #144]	@ (8002484 <handleStimulation+0x3b4>)
 80023f2:	4a28      	ldr	r2, [pc, #160]	@ (8002494 <handleStimulation+0x3c4>)
 80023f4:	60da      	str	r2, [r3, #12]
            TIM2->ARR = 10;
 80023f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023fa:	220a      	movs	r2, #10
 80023fc:	62da      	str	r2, [r3, #44]	@ 0x2c
            SET_BIT(DMA1_Channel2->CCR, 1);
 80023fe:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <handleStimulation+0x3b4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a20      	ldr	r2, [pc, #128]	@ (8002484 <handleStimulation+0x3b4>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6013      	str	r3, [r2, #0]

            break;
 800240a:	e01d      	b.n	8002448 <handleStimulation+0x378>

        case longFlat:

            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <handleStimulation+0x3b4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1c      	ldr	r2, [pc, #112]	@ (8002484 <handleStimulation+0x3b4>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CMAR = (uint32_t) &Line_LUT;
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <handleStimulation+0x3b4>)
 800241a:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <handleStimulation+0x3c8>)
 800241c:	60da      	str	r2, [r3, #12]
            TIM2->ARR = timerSetting.D_ARR[stimulationController.channelIndex];
 800241e:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <handleStimulation+0x3bc>)
 8002420:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8002424:	4a1a      	ldr	r2, [pc, #104]	@ (8002490 <handleStimulation+0x3c0>)
 8002426:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800242a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800242e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002432:	62da      	str	r2, [r3, #44]	@ 0x2c
            DMA1_Channel2->CNDTR = NS;
 8002434:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <handleStimulation+0x3b4>)
 8002436:	2284      	movs	r2, #132	@ 0x84
 8002438:	605a      	str	r2, [r3, #4]
            SET_BIT(DMA1_Channel2->CCR, 1);
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <handleStimulation+0x3b4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a11      	ldr	r2, [pc, #68]	@ (8002484 <handleStimulation+0x3b4>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6013      	str	r3, [r2, #0]
//                stimulationController.panelSwitchRequest = false;
//                //enablePanel(stimulationController.panelSwitchAddress);
//            }


            break;
 8002446:	bf00      	nop
    }

    stimulationController.currentWaveState++;
 8002448:	4b10      	ldr	r3, [pc, #64]	@ (800248c <handleStimulation+0x3bc>)
 800244a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800244e:	3301      	adds	r3, #1
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <handleStimulation+0x3bc>)
 8002454:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
    if (stimulationController.currentWaveState > longFlat)
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <handleStimulation+0x3bc>)
 800245a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800245e:	2b04      	cmp	r3, #4
 8002460:	d90b      	bls.n	800247a <handleStimulation+0x3aa>
    {
        stimulationController.burstCounter--;
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <handleStimulation+0x3bc>)
 8002464:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	4b07      	ldr	r3, [pc, #28]	@ (800248c <handleStimulation+0x3bc>)
 800246e:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
        stimulationController.currentWaveState = upBump;
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <handleStimulation+0x3bc>)
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
    }

}
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	4002001c 	.word	0x4002001c
 8002488:	20000468 	.word	0x20000468
 800248c:	20000bb0 	.word	0x20000bb0
 8002490:	20000890 	.word	0x20000890
 8002494:	20000888 	.word	0x20000888
 8002498:	20000678 	.word	0x20000678

0800249c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <HAL_MspInit+0x44>)
 80024a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a6:	4a0e      	ldr	r2, [pc, #56]	@ (80024e0 <HAL_MspInit+0x44>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_MspInit+0x44>)
 80024b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_MspInit+0x44>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	4a08      	ldr	r2, [pc, #32]	@ (80024e0 <HAL_MspInit+0x44>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_MspInit+0x44>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	@ 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a15      	ldr	r2, [pc, #84]	@ (8002558 <HAL_DAC_MspInit+0x74>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d124      	bne.n	8002550 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <HAL_DAC_MspInit+0x78>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	4a14      	ldr	r2, [pc, #80]	@ (800255c <HAL_DAC_MspInit+0x78>)
 800250c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002510:	6593      	str	r3, [r2, #88]	@ 0x58
 8002512:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_DAC_MspInit+0x78>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251e:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <HAL_DAC_MspInit+0x78>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002522:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <HAL_DAC_MspInit+0x78>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800252a:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_DAC_MspInit+0x78>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002536:	2310      	movs	r3, #16
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800253a:	2303      	movs	r3, #3
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800254c:	f000 ffde 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002550:	bf00      	nop
 8002552:	3728      	adds	r7, #40	@ 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40007400 	.word	0x40007400
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	@ 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a17      	ldr	r2, [pc, #92]	@ (80025dc <HAL_SPI_MspInit+0x7c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d128      	bne.n	80025d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002582:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <HAL_SPI_MspInit+0x80>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002586:	4a16      	ldr	r2, [pc, #88]	@ (80025e0 <HAL_SPI_MspInit+0x80>)
 8002588:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800258c:	6613      	str	r3, [r2, #96]	@ 0x60
 800258e:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <HAL_SPI_MspInit+0x80>)
 8002590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <HAL_SPI_MspInit+0x80>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	4a10      	ldr	r2, [pc, #64]	@ (80025e0 <HAL_SPI_MspInit+0x80>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a6:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_SPI_MspInit+0x80>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025b2:	23e0      	movs	r3, #224	@ 0xe0
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025c2:	2305      	movs	r3, #5
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025d0:	f000 ff9c 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	@ 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40013000 	.word	0x40013000
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f4:	d137      	bne.n	8002666 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002670 <HAL_TIM_Base_MspInit+0x8c>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002670 <HAL_TIM_Base_MspInit+0x8c>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6593      	str	r3, [r2, #88]	@ 0x58
 8002602:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <HAL_TIM_Base_MspInit+0x8c>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 800260e:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002610:	4a19      	ldr	r2, [pc, #100]	@ (8002678 <HAL_TIM_Base_MspInit+0x94>)
 8002612:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_4;
 8002614:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002616:	2204      	movs	r2, #4
 8002618:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800261a:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 800261c:	2210      	movs	r2, #16
 800261e:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002620:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8002626:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800262c:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 800262e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002632:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002636:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800263a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 800263c:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 800263e:	2220      	movs	r2, #32
 8002640:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002642:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002644:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002648:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 800264a:	480a      	ldr	r0, [pc, #40]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 800264c:	f000 fce8 	bl	8003020 <HAL_DMA_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8002656:	f7ff f9c9 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a05      	ldr	r2, [pc, #20]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 800265e:	621a      	str	r2, [r3, #32]
 8002660:	4a04      	ldr	r2, [pc, #16]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	20000100 	.word	0x20000100
 8002678:	4002001c 	.word	0x4002001c

0800267c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0ae      	sub	sp, #184	@ 0xb8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	2288      	movs	r2, #136	@ 0x88
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f005 f851 	bl	8007744 <memset>
  if(huart->Instance==USART1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a4b      	ldr	r2, [pc, #300]	@ (80027d4 <HAL_UART_MspInit+0x158>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d145      	bne.n	8002738 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026ac:	2301      	movs	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026b0:	2300      	movs	r3, #0
 80026b2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 ff4d 	bl	8004558 <HAL_RCCEx_PeriphCLKConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026c4:	f7ff f992 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c8:	4b43      	ldr	r3, [pc, #268]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 80026ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026cc:	4a42      	ldr	r2, [pc, #264]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 80026ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80026d4:	4b40      	ldr	r3, [pc, #256]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 80026d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	4b3d      	ldr	r3, [pc, #244]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e4:	4a3c      	ldr	r2, [pc, #240]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ec:	4b3a      	ldr	r3, [pc, #232]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002712:	2307      	movs	r3, #7
 8002714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800271c:	4619      	mov	r1, r3
 800271e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002722:	f000 fef3 	bl	800350c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	2025      	movs	r0, #37	@ 0x25
 800272c:	f000 faab 	bl	8002c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002730:	2025      	movs	r0, #37	@ 0x25
 8002732:	f000 fac4 	bl	8002cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002736:	e048      	b.n	80027ca <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a27      	ldr	r2, [pc, #156]	@ (80027dc <HAL_UART_MspInit+0x160>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d143      	bne.n	80027ca <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002742:	2302      	movs	r3, #2
 8002744:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002746:	2300      	movs	r3, #0
 8002748:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800274a:	f107 031c 	add.w	r3, r7, #28
 800274e:	4618      	mov	r0, r3
 8002750:	f001 ff02 	bl	8004558 <HAL_RCCEx_PeriphCLKConfig>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800275a:	f7ff f947 	bl	80019ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800275e:	4b1e      	ldr	r3, [pc, #120]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002762:	4a1d      	ldr	r2, [pc, #116]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 8002764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002768:	6593      	str	r3, [r2, #88]	@ 0x58
 800276a:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	4b18      	ldr	r3, [pc, #96]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_UART_MspInit+0x15c>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800278e:	230c      	movs	r3, #12
 8002790:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027a6:	2307      	movs	r3, #7
 80027a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027b0:	4619      	mov	r1, r3
 80027b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b6:	f000 fea9 	bl	800350c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2026      	movs	r0, #38	@ 0x26
 80027c0:	f000 fa61 	bl	8002c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027c4:	2026      	movs	r0, #38	@ 0x26
 80027c6:	f000 fa7a 	bl	8002cbe <HAL_NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	37b8      	adds	r7, #184	@ 0xb8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40013800 	.word	0x40013800
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40004400 	.word	0x40004400

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <NMI_Handler+0x4>

080027e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <HardFault_Handler+0x4>

080027f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <MemManage_Handler+0x4>

080027f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <UsageFault_Handler+0x4>

08002808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002836:	f000 f907 	bl	8002a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	//disable timer
	CLEAR_BIT(TIM2->CR1, 1);
 8002844:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	6013      	str	r3, [r2, #0]

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8002854:	4807      	ldr	r0, [pc, #28]	@ (8002874 <DMA1_Channel2_IRQHandler+0x34>)
 8002856:	f000 fd7a 	bl	800334e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

	handleStimulation();
 800285a:	f7ff fc39 	bl	80020d0 <handleStimulation>

	//enable timer
	SET_BIT(TIM2->CR1, 1);
 800285e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6013      	str	r3, [r2, #0]

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000100 	.word	0x20000100

08002878 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//check if timeout flag is set
		if ((huart1.Instance->ISR & 0x800) != 0)
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <USART1_IRQHandler+0x50>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <USART1_IRQHandler+0x18>
		{
		  UART_timeOutOccured = true;
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <USART1_IRQHandler+0x54>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002890:	480d      	ldr	r0, [pc, #52]	@ (80028c8 <USART1_IRQHandler+0x50>)
 8002892:	f003 fc33 	bl	80060fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (huart1.RxXferCount == RX1_SIZE - 1)
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <USART1_IRQHandler+0x50>)
 8002898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b07      	cmp	r3, #7
 80028a0:	d10f      	bne.n	80028c2 <USART1_IRQHandler+0x4a>
    {
  	  SET_BIT(huart1.Instance->CR1, USART_CR1_RTOIE);
 80028a2:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <USART1_IRQHandler+0x50>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <USART1_IRQHandler+0x50>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80028b0:	601a      	str	r2, [r3, #0]
  	  SET_BIT(huart1.Instance->CR2, USART_CR2_RTOEN);
 80028b2:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <USART1_IRQHandler+0x50>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <USART1_IRQHandler+0x50>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80028c0:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000148 	.word	0x20000148
 80028cc:	2000002b 	.word	0x2000002b

080028d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


	//check if timeout flag is set
	if ((huart2.Instance->ISR & 0x800) != 0)
 80028d4:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <USART2_IRQHandler+0x50>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <USART2_IRQHandler+0x18>
	{
	  UART_timeOutOccured = true;
 80028e2:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <USART2_IRQHandler+0x54>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
	}



  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028e8:	480d      	ldr	r0, [pc, #52]	@ (8002920 <USART2_IRQHandler+0x50>)
 80028ea:	f003 fc07 	bl	80060fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  // on the first data byte start the timeout counter
  if (huart2.RxXferCount == RX2_SIZE - 1)
 80028ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <USART2_IRQHandler+0x50>)
 80028f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d10f      	bne.n	800291a <USART2_IRQHandler+0x4a>
  {
	  SET_BIT(huart2.Instance->CR1, USART_CR1_RTOIE);
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <USART2_IRQHandler+0x50>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <USART2_IRQHandler+0x50>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002908:	601a      	str	r2, [r3, #0]
	  SET_BIT(huart2.Instance->CR2, USART_CR2_RTOEN);
 800290a:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <USART2_IRQHandler+0x50>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <USART2_IRQHandler+0x50>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002918:	605a      	str	r2, [r3, #4]
  }


  /* USER CODE END USART2_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200001d0 	.word	0x200001d0
 8002924:	2000002b 	.word	0x2000002b

08002928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <SystemInit+0x20>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <SystemInit+0x20>)
 8002934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800294c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002950:	f7ff ffea 	bl	8002928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002954:	480c      	ldr	r0, [pc, #48]	@ (8002988 <LoopForever+0x6>)
  ldr r1, =_edata
 8002956:	490d      	ldr	r1, [pc, #52]	@ (800298c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002958:	4a0d      	ldr	r2, [pc, #52]	@ (8002990 <LoopForever+0xe>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800295c:	e002      	b.n	8002964 <LoopCopyDataInit>

0800295e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002962:	3304      	adds	r3, #4

08002964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002968:	d3f9      	bcc.n	800295e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800296c:	4c0a      	ldr	r4, [pc, #40]	@ (8002998 <LoopForever+0x16>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002970:	e001      	b.n	8002976 <LoopFillZerobss>

08002972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002974:	3204      	adds	r2, #4

08002976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002978:	d3fb      	bcc.n	8002972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800297a:	f004 feeb 	bl	8007754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800297e:	f7fe fccd 	bl	800131c <main>

08002982 <LoopForever>:

LoopForever:
    b LoopForever
 8002982:	e7fe      	b.n	8002982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002984:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800298c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002990:	0800781c 	.word	0x0800781c
  ldr r2, =_sbss
 8002994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002998:	20000dc4 	.word	0x20000dc4

0800299c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC1_2_IRQHandler>

0800299e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f000 f961 	bl	8002c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ae:	200f      	movs	r0, #15
 80029b0:	f000 f80e 	bl	80029d0 <HAL_InitTick>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	71fb      	strb	r3, [r7, #7]
 80029be:	e001      	b.n	80029c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029c0:	f7ff fd6c 	bl	800249c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029c4:	79fb      	ldrb	r3, [r7, #7]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029dc:	4b17      	ldr	r3, [pc, #92]	@ (8002a3c <HAL_InitTick+0x6c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d023      	beq.n	8002a2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029e4:	4b16      	ldr	r3, [pc, #88]	@ (8002a40 <HAL_InitTick+0x70>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <HAL_InitTick+0x6c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f96d 	bl	8002cda <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b0f      	cmp	r3, #15
 8002a0a:	d809      	bhi.n	8002a20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f000 f937 	bl	8002c86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a18:	4a0a      	ldr	r2, [pc, #40]	@ (8002a44 <HAL_InitTick+0x74>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e007      	b.n	8002a30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e004      	b.n	8002a30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
 8002a2a:	e001      	b.n	8002a30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_IncTick+0x20>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_IncTick+0x24>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	4a04      	ldr	r2, [pc, #16]	@ (8002a6c <HAL_IncTick+0x24>)
 8002a5a:	6013      	str	r3, [r2, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000008 	.word	0x20000008
 8002a6c:	20000dc0 	.word	0x20000dc0

08002a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return uwTick;
 8002a74:	4b03      	ldr	r3, [pc, #12]	@ (8002a84 <HAL_GetTick+0x14>)
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000dc0 	.word	0x20000dc0

08002a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a90:	f7ff ffee 	bl	8002a70 <HAL_GetTick>
 8002a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d005      	beq.n	8002aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <HAL_Delay+0x44>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aae:	bf00      	nop
 8002ab0:	f7ff ffde 	bl	8002a70 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d8f7      	bhi.n	8002ab0 <HAL_Delay+0x28>
  {
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000008 	.word	0x20000008

08002ad0 <__NVIC_SetPriorityGrouping>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aec:	4013      	ands	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b02:	4a04      	ldr	r2, [pc, #16]	@ (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	60d3      	str	r3, [r2, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_GetPriorityGrouping>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b1c:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <__NVIC_GetPriorityGrouping+0x18>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	f003 0307 	and.w	r3, r3, #7
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_EnableIRQ>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	db0b      	blt.n	8002b5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	4907      	ldr	r1, [pc, #28]	@ (8002b6c <__NVIC_EnableIRQ+0x38>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2001      	movs	r0, #1
 8002b56:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100

08002b70 <__NVIC_SetPriority>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	db0a      	blt.n	8002b9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	490c      	ldr	r1, [pc, #48]	@ (8002bbc <__NVIC_SetPriority+0x4c>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	440b      	add	r3, r1
 8002b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b98:	e00a      	b.n	8002bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4908      	ldr	r1, [pc, #32]	@ (8002bc0 <__NVIC_SetPriority+0x50>)
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	3b04      	subs	r3, #4
 8002ba8:	0112      	lsls	r2, r2, #4
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	440b      	add	r3, r1
 8002bae:	761a      	strb	r2, [r3, #24]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <NVIC_EncodePriority>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	@ 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f1c3 0307 	rsb	r3, r3, #7
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	bf28      	it	cs
 8002be2:	2304      	movcs	r3, #4
 8002be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d902      	bls.n	8002bf4 <NVIC_EncodePriority+0x30>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3b03      	subs	r3, #3
 8002bf2:	e000      	b.n	8002bf6 <NVIC_EncodePriority+0x32>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	401a      	ands	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	43d9      	mvns	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	4313      	orrs	r3, r2
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	@ 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c3c:	d301      	bcc.n	8002c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00f      	b.n	8002c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c42:	4a0a      	ldr	r2, [pc, #40]	@ (8002c6c <SysTick_Config+0x40>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4a:	210f      	movs	r1, #15
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c50:	f7ff ff8e 	bl	8002b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <SysTick_Config+0x40>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5a:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <SysTick_Config+0x40>)
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	e000e010 	.word	0xe000e010

08002c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ff29 	bl	8002ad0 <__NVIC_SetPriorityGrouping>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c98:	f7ff ff3e 	bl	8002b18 <__NVIC_GetPriorityGrouping>
 8002c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	6978      	ldr	r0, [r7, #20]
 8002ca4:	f7ff ff8e 	bl	8002bc4 <NVIC_EncodePriority>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff5d 	bl	8002b70 <__NVIC_SetPriority>
}
 8002cb6:	bf00      	nop
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff31 	bl	8002b34 <__NVIC_EnableIRQ>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ffa2 	bl	8002c2c <SysTick_Config>
 8002ce8:	4603      	mov	r3, r0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e014      	b.n	8002d2e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	791b      	ldrb	r3, [r3, #4]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d105      	bne.n	8002d1a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff fbe5 	bl	80024e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	795b      	ldrb	r3, [r3, #5]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_DAC_Start+0x16>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e03b      	b.n	8002dc4 <HAL_DAC_Start+0x8e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6819      	ldr	r1, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2201      	movs	r2, #1
 8002d66:	409a      	lsls	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d118      	bne.n	8002db6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	e00f      	b.n	8002db6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002da0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002da4:	d107      	bne.n	8002db6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0202 	orr.w	r2, r2, #2
 8002db4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	795b      	ldrb	r3, [r3, #5]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_DAC_ConfigChannel+0x1c>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e114      	b.n	8003016 <HAL_DAC_ConfigChannel+0x246>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2202      	movs	r2, #2
 8002df6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	f040 8081 	bne.w	8002f04 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e02:	f7ff fe35 	bl	8002a70 <HAL_GetTick>
 8002e06:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d140      	bne.n	8002e90 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e0e:	e018      	b.n	8002e42 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e10:	f7ff fe2e 	bl	8002a70 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d911      	bls.n	8002e42 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f043 0208 	orr.w	r2, r3, #8
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0e9      	b.n	8003016 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1df      	bne.n	8002e10 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f7ff fe19 	bl	8002a88 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	6992      	ldr	r2, [r2, #24]
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e60:	e023      	b.n	8002eaa <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e62:	f7ff fe05 	bl	8002a70 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d90f      	bls.n	8002e90 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	da0a      	bge.n	8002e90 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f043 0208 	orr.w	r2, r3, #8
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0c2      	b.n	8003016 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	dbe3      	blt.n	8002e62 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f7ff fdf4 	bl	8002a88 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	6992      	ldr	r2, [r2, #24]
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	ea02 0103 	and.w	r1, r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	21ff      	movs	r1, #255	@ 0xff
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	ea02 0103 	and.w	r1, r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d11d      	bne.n	8002f48 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f12:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	221f      	movs	r2, #31
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2207      	movs	r2, #7
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	400a      	ands	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	22c0      	movs	r2, #192	@ 0xc0
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	400a      	ands	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e098      	b.n	8003164 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4b4d      	ldr	r3, [pc, #308]	@ (8003170 <HAL_DMA_Init+0x150>)
 800303a:	429a      	cmp	r2, r3
 800303c:	d80f      	bhi.n	800305e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	4b4b      	ldr	r3, [pc, #300]	@ (8003174 <HAL_DMA_Init+0x154>)
 8003046:	4413      	add	r3, r2
 8003048:	4a4b      	ldr	r2, [pc, #300]	@ (8003178 <HAL_DMA_Init+0x158>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	009a      	lsls	r2, r3, #2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a48      	ldr	r2, [pc, #288]	@ (800317c <HAL_DMA_Init+0x15c>)
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40
 800305c:	e00e      	b.n	800307c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4b46      	ldr	r3, [pc, #280]	@ (8003180 <HAL_DMA_Init+0x160>)
 8003066:	4413      	add	r3, r2
 8003068:	4a43      	ldr	r2, [pc, #268]	@ (8003178 <HAL_DMA_Init+0x158>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	009a      	lsls	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a42      	ldr	r2, [pc, #264]	@ (8003184 <HAL_DMA_Init+0x164>)
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003096:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030d6:	d039      	beq.n	800314c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	4a27      	ldr	r2, [pc, #156]	@ (800317c <HAL_DMA_Init+0x15c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d11a      	bne.n	8003118 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030e2:	4b29      	ldr	r3, [pc, #164]	@ (8003188 <HAL_DMA_Init+0x168>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f003 031c 	and.w	r3, r3, #28
 80030ee:	210f      	movs	r1, #15
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	4924      	ldr	r1, [pc, #144]	@ (8003188 <HAL_DMA_Init+0x168>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030fc:	4b22      	ldr	r3, [pc, #136]	@ (8003188 <HAL_DMA_Init+0x168>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003108:	f003 031c 	and.w	r3, r3, #28
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	491d      	ldr	r1, [pc, #116]	@ (8003188 <HAL_DMA_Init+0x168>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
 8003116:	e019      	b.n	800314c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003118:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <HAL_DMA_Init+0x16c>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	f003 031c 	and.w	r3, r3, #28
 8003124:	210f      	movs	r1, #15
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	4917      	ldr	r1, [pc, #92]	@ (800318c <HAL_DMA_Init+0x16c>)
 800312e:	4013      	ands	r3, r2
 8003130:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003132:	4b16      	ldr	r3, [pc, #88]	@ (800318c <HAL_DMA_Init+0x16c>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f003 031c 	and.w	r3, r3, #28
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	4911      	ldr	r1, [pc, #68]	@ (800318c <HAL_DMA_Init+0x16c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40020407 	.word	0x40020407
 8003174:	bffdfff8 	.word	0xbffdfff8
 8003178:	cccccccd 	.word	0xcccccccd
 800317c:	40020000 	.word	0x40020000
 8003180:	bffdfbf8 	.word	0xbffdfbf8
 8003184:	40020400 	.word	0x40020400
 8003188:	400200a8 	.word	0x400200a8
 800318c:	400204a8 	.word	0x400204a8

08003190 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Start_IT+0x20>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e04b      	b.n	8003248 <HAL_DMA_Start_IT+0xb8>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d13a      	bne.n	800323a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f95f 	bl	80034ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 020e 	orr.w	r2, r2, #14
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e00f      	b.n	8003228 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0204 	bic.w	r2, r2, #4
 8003216:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 020a 	orr.w	r2, r2, #10
 8003226:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e005      	b.n	8003246 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d008      	beq.n	800327a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2204      	movs	r2, #4
 800326c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e022      	b.n	80032c0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 020e 	bic.w	r2, r2, #14
 8003288:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f003 021c 	and.w	r2, r3, #28
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d005      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2204      	movs	r2, #4
 80032e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
 80032ee:	e029      	b.n	8003344 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 020e 	bic.w	r2, r2, #14
 80032fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	f003 021c 	and.w	r2, r3, #28
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f202 	lsl.w	r2, r1, r2
 8003322:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
    }
  }
  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	f003 031c 	and.w	r3, r3, #28
 800336e:	2204      	movs	r2, #4
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d026      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x7a>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d021      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d107      	bne.n	80033a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0204 	bic.w	r2, r2, #4
 80033a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	f003 021c 	and.w	r2, r3, #28
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	2104      	movs	r1, #4
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d071      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033c6:	e06c      	b.n	80034a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033cc:	f003 031c 	and.w	r3, r3, #28
 80033d0:	2202      	movs	r2, #2
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d02e      	beq.n	800343a <HAL_DMA_IRQHandler+0xec>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d029      	beq.n	800343a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 020a 	bic.w	r2, r2, #10
 8003402:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	f003 021c 	and.w	r2, r3, #28
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	2102      	movs	r1, #2
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d038      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003438:	e033      	b.n	80034a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	f003 031c 	and.w	r3, r3, #28
 8003442:	2208      	movs	r2, #8
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02a      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x156>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d025      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 020e 	bic.w	r2, r2, #14
 8003466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346c:	f003 021c 	and.w	r2, r3, #28
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f202 	lsl.w	r2, r1, r2
 800347a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
}
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f003 021c 	and.w	r2, r3, #28
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	2101      	movs	r1, #1
 80034c8:	fa01 f202 	lsl.w	r2, r1, r2
 80034cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d108      	bne.n	80034f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034ee:	e007      	b.n	8003500 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	60da      	str	r2, [r3, #12]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351a:	e17f      	b.n	800381c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8171 	beq.w	8003816 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d005      	beq.n	800354c <HAL_GPIO_Init+0x40>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d130      	bne.n	80035ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003582:	2201      	movs	r2, #1
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0201 	and.w	r2, r3, #1
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d118      	bne.n	80035ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035c0:	2201      	movs	r2, #1
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	08db      	lsrs	r3, r3, #3
 80035d6:	f003 0201 	and.w	r2, r3, #1
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d017      	beq.n	8003628 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d123      	bne.n	800367c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	08da      	lsrs	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	220f      	movs	r2, #15
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	08da      	lsrs	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	6939      	ldr	r1, [r7, #16]
 8003678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0203 	and.w	r2, r3, #3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80ac 	beq.w	8003816 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036be:	4b5f      	ldr	r3, [pc, #380]	@ (800383c <HAL_GPIO_Init+0x330>)
 80036c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c2:	4a5e      	ldr	r2, [pc, #376]	@ (800383c <HAL_GPIO_Init+0x330>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80036ca:	4b5c      	ldr	r3, [pc, #368]	@ (800383c <HAL_GPIO_Init+0x330>)
 80036cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036d6:	4a5a      	ldr	r2, [pc, #360]	@ (8003840 <HAL_GPIO_Init+0x334>)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	3302      	adds	r3, #2
 80036de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	220f      	movs	r2, #15
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003700:	d025      	beq.n	800374e <HAL_GPIO_Init+0x242>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4f      	ldr	r2, [pc, #316]	@ (8003844 <HAL_GPIO_Init+0x338>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01f      	beq.n	800374a <HAL_GPIO_Init+0x23e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4e      	ldr	r2, [pc, #312]	@ (8003848 <HAL_GPIO_Init+0x33c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d019      	beq.n	8003746 <HAL_GPIO_Init+0x23a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4d      	ldr	r2, [pc, #308]	@ (800384c <HAL_GPIO_Init+0x340>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x236>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4c      	ldr	r2, [pc, #304]	@ (8003850 <HAL_GPIO_Init+0x344>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x232>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4b      	ldr	r2, [pc, #300]	@ (8003854 <HAL_GPIO_Init+0x348>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x22e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4a      	ldr	r2, [pc, #296]	@ (8003858 <HAL_GPIO_Init+0x34c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x22a>
 8003732:	2306      	movs	r3, #6
 8003734:	e00c      	b.n	8003750 <HAL_GPIO_Init+0x244>
 8003736:	2307      	movs	r3, #7
 8003738:	e00a      	b.n	8003750 <HAL_GPIO_Init+0x244>
 800373a:	2305      	movs	r3, #5
 800373c:	e008      	b.n	8003750 <HAL_GPIO_Init+0x244>
 800373e:	2304      	movs	r3, #4
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x244>
 8003742:	2303      	movs	r3, #3
 8003744:	e004      	b.n	8003750 <HAL_GPIO_Init+0x244>
 8003746:	2302      	movs	r3, #2
 8003748:	e002      	b.n	8003750 <HAL_GPIO_Init+0x244>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_GPIO_Init+0x244>
 800374e:	2300      	movs	r3, #0
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	f002 0203 	and.w	r2, r2, #3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	4093      	lsls	r3, r2
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003760:	4937      	ldr	r1, [pc, #220]	@ (8003840 <HAL_GPIO_Init+0x334>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800376e:	4b3b      	ldr	r3, [pc, #236]	@ (800385c <HAL_GPIO_Init+0x350>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003792:	4a32      	ldr	r2, [pc, #200]	@ (800385c <HAL_GPIO_Init+0x350>)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003798:	4b30      	ldr	r3, [pc, #192]	@ (800385c <HAL_GPIO_Init+0x350>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037bc:	4a27      	ldr	r2, [pc, #156]	@ (800385c <HAL_GPIO_Init+0x350>)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037c2:	4b26      	ldr	r3, [pc, #152]	@ (800385c <HAL_GPIO_Init+0x350>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037e6:	4a1d      	ldr	r2, [pc, #116]	@ (800385c <HAL_GPIO_Init+0x350>)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <HAL_GPIO_Init+0x350>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003810:	4a12      	ldr	r2, [pc, #72]	@ (800385c <HAL_GPIO_Init+0x350>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	3301      	adds	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	f47f ae78 	bne.w	800351c <HAL_GPIO_Init+0x10>
  }
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	40010000 	.word	0x40010000
 8003844:	48000400 	.word	0x48000400
 8003848:	48000800 	.word	0x48000800
 800384c:	48000c00 	.word	0x48000c00
 8003850:	48001000 	.word	0x48001000
 8003854:	48001400 	.word	0x48001400
 8003858:	48001800 	.word	0x48001800
 800385c:	40010400 	.word	0x40010400

08003860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]
 800386c:	4613      	mov	r3, r2
 800386e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003870:	787b      	ldrb	r3, [r7, #1]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800387c:	e002      	b.n	8003884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003894:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40007000 	.word	0x40007000

080038ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ba:	d130      	bne.n	800391e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038bc:	4b23      	ldr	r3, [pc, #140]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c8:	d038      	beq.n	800393c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038d2:	4a1e      	ldr	r2, [pc, #120]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038da:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2232      	movs	r2, #50	@ 0x32
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
 80038e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0c9b      	lsrs	r3, r3, #18
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f0:	e002      	b.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f8:	4b14      	ldr	r3, [pc, #80]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003904:	d102      	bne.n	800390c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f2      	bne.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800390c:	4b0f      	ldr	r3, [pc, #60]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003918:	d110      	bne.n	800393c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e00f      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800391e:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800392a:	d007      	beq.n	800393c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800392c:	4b07      	ldr	r3, [pc, #28]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003934:	4a05      	ldr	r2, [pc, #20]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003936:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800393a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40007000 	.word	0x40007000
 8003950:	20000000 	.word	0x20000000
 8003954:	431bde83 	.word	0x431bde83

08003958 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e3ca      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396a:	4b97      	ldr	r3, [pc, #604]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003974:	4b94      	ldr	r3, [pc, #592]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0310 	and.w	r3, r3, #16
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80e4 	beq.w	8003b54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <HAL_RCC_OscConfig+0x4a>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b0c      	cmp	r3, #12
 8003996:	f040 808b 	bne.w	8003ab0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b01      	cmp	r3, #1
 800399e:	f040 8087 	bne.w	8003ab0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039a2:	4b89      	ldr	r3, [pc, #548]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x62>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e3a2      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1a      	ldr	r2, [r3, #32]
 80039be:	4b82      	ldr	r3, [pc, #520]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <HAL_RCC_OscConfig+0x7c>
 80039ca:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039d2:	e005      	b.n	80039e0 <HAL_RCC_OscConfig+0x88>
 80039d4:	4b7c      	ldr	r3, [pc, #496]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d223      	bcs.n	8003a2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fd55 	bl	8004498 <RCC_SetFlashLatencyFromMSIRange>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e383      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f8:	4b73      	ldr	r3, [pc, #460]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a72      	ldr	r2, [pc, #456]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039fe:	f043 0308 	orr.w	r3, r3, #8
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b70      	ldr	r3, [pc, #448]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	496d      	ldr	r1, [pc, #436]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a16:	4b6c      	ldr	r3, [pc, #432]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	4968      	ldr	r1, [pc, #416]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
 8003a2a:	e025      	b.n	8003a78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a2c:	4b66      	ldr	r3, [pc, #408]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a65      	ldr	r2, [pc, #404]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a32:	f043 0308 	orr.w	r3, r3, #8
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b63      	ldr	r3, [pc, #396]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4960      	ldr	r1, [pc, #384]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	495b      	ldr	r1, [pc, #364]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fd15 	bl	8004498 <RCC_SetFlashLatencyFromMSIRange>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e343      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a78:	f000 fc4a 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b52      	ldr	r3, [pc, #328]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	4950      	ldr	r1, [pc, #320]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	4a4e      	ldr	r2, [pc, #312]	@ (8003bd0 <HAL_RCC_OscConfig+0x278>)
 8003a96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a98:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd4 <HAL_RCC_OscConfig+0x27c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe ff97 	bl	80029d0 <HAL_InitTick>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d052      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	e327      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d032      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ab8:	4b43      	ldr	r3, [pc, #268]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a42      	ldr	r2, [pc, #264]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac4:	f7fe ffd4 	bl	8002a70 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003acc:	f7fe ffd0 	bl	8002a70 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e310      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ade:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aea:	4b37      	ldr	r3, [pc, #220]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a36      	ldr	r2, [pc, #216]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003af0:	f043 0308 	orr.w	r3, r3, #8
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b34      	ldr	r3, [pc, #208]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	4931      	ldr	r1, [pc, #196]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b08:	4b2f      	ldr	r3, [pc, #188]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	492c      	ldr	r1, [pc, #176]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
 8003b1c:	e01a      	b.n	8003b54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a29      	ldr	r2, [pc, #164]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b2a:	f7fe ffa1 	bl	8002a70 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b32:	f7fe ff9d 	bl	8002a70 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e2dd      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b44:	4b20      	ldr	r3, [pc, #128]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f0      	bne.n	8003b32 <HAL_RCC_OscConfig+0x1da>
 8003b50:	e000      	b.n	8003b54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d074      	beq.n	8003c4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d005      	beq.n	8003b72 <HAL_RCC_OscConfig+0x21a>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	d10e      	bne.n	8003b8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d10b      	bne.n	8003b8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b72:	4b15      	ldr	r3, [pc, #84]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d064      	beq.n	8003c48 <HAL_RCC_OscConfig+0x2f0>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d160      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e2ba      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x24a>
 8003b94:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0b      	ldr	r2, [pc, #44]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	e026      	b.n	8003bf0 <HAL_RCC_OscConfig+0x298>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003baa:	d115      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x280>
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a05      	ldr	r2, [pc, #20]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	4b03      	ldr	r3, [pc, #12]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a02      	ldr	r2, [pc, #8]	@ (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	e014      	b.n	8003bf0 <HAL_RCC_OscConfig+0x298>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	080077c4 	.word	0x080077c4
 8003bd0:	20000000 	.word	0x20000000
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	4ba0      	ldr	r3, [pc, #640]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a9f      	ldr	r2, [pc, #636]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b9d      	ldr	r3, [pc, #628]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a9c      	ldr	r2, [pc, #624]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe ff3a 	bl	8002a70 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe ff36 	bl	8002a70 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	@ 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e276      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c12:	4b92      	ldr	r3, [pc, #584]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2a8>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fe ff26 	bl	8002a70 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fe ff22 	bl	8002a70 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	@ 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e262      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c3a:	4b88      	ldr	r3, [pc, #544]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2d0>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d060      	beq.n	8003d18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_OscConfig+0x310>
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d119      	bne.n	8003c96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d116      	bne.n	8003c96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c68:	4b7c      	ldr	r3, [pc, #496]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_OscConfig+0x328>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e23f      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	4b76      	ldr	r3, [pc, #472]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	4973      	ldr	r1, [pc, #460]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c94:	e040      	b.n	8003d18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d023      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c9e:	4b6f      	ldr	r3, [pc, #444]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a6e      	ldr	r2, [pc, #440]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fe fee1 	bl	8002a70 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fe fedd 	bl	8002a70 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e21d      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc4:	4b65      	ldr	r3, [pc, #404]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b62      	ldr	r3, [pc, #392]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	495f      	ldr	r1, [pc, #380]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
 8003ce4:	e018      	b.n	8003d18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5c      	ldr	r2, [pc, #368]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fe febd 	bl	8002a70 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fe feb9 	bl	8002a70 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e1f9      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d0c:	4b53      	ldr	r3, [pc, #332]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d03c      	beq.n	8003d9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01c      	beq.n	8003d66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d32:	4a4a      	ldr	r2, [pc, #296]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fe fe98 	bl	8002a70 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d44:	f7fe fe94 	bl	8002a70 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1d4      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d56:	4b41      	ldr	r3, [pc, #260]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ef      	beq.n	8003d44 <HAL_RCC_OscConfig+0x3ec>
 8003d64:	e01b      	b.n	8003d9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d66:	4b3d      	ldr	r3, [pc, #244]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7fe fe7b 	bl	8002a70 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d7e:	f7fe fe77 	bl	8002a70 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e1b7      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d90:	4b32      	ldr	r3, [pc, #200]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ef      	bne.n	8003d7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80a6 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dac:	2300      	movs	r3, #0
 8003dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003db0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10d      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	4b27      	ldr	r3, [pc, #156]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc0:	4a26      	ldr	r2, [pc, #152]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc8:	4b24      	ldr	r3, [pc, #144]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd8:	4b21      	ldr	r3, [pc, #132]	@ (8003e60 <HAL_RCC_OscConfig+0x508>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d118      	bne.n	8003e16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e60 <HAL_RCC_OscConfig+0x508>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e60 <HAL_RCC_OscConfig+0x508>)
 8003dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df0:	f7fe fe3e 	bl	8002a70 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df8:	f7fe fe3a 	bl	8002a70 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e17a      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0a:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <HAL_RCC_OscConfig+0x508>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d108      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4d8>
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e24:	4a0d      	ldr	r2, [pc, #52]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e2e:	e029      	b.n	8003e84 <HAL_RCC_OscConfig+0x52c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d115      	bne.n	8003e64 <HAL_RCC_OscConfig+0x50c>
 8003e38:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	4a07      	ldr	r2, [pc, #28]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003e40:	f043 0304 	orr.w	r3, r3, #4
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e48:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4e:	4a03      	ldr	r2, [pc, #12]	@ (8003e5c <HAL_RCC_OscConfig+0x504>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e58:	e014      	b.n	8003e84 <HAL_RCC_OscConfig+0x52c>
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40007000 	.word	0x40007000
 8003e64:	4b9c      	ldr	r3, [pc, #624]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	4a9b      	ldr	r2, [pc, #620]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e74:	4b98      	ldr	r3, [pc, #608]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	4a97      	ldr	r2, [pc, #604]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d016      	beq.n	8003eba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fe fdf0 	bl	8002a70 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fe fdec 	bl	8002a70 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e12a      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eaa:	4b8b      	ldr	r3, [pc, #556]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ed      	beq.n	8003e94 <HAL_RCC_OscConfig+0x53c>
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fe fdd9 	bl	8002a70 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fe fdd5 	bl	8002a70 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e113      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed8:	4b7f      	ldr	r3, [pc, #508]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1ed      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee6:	7ffb      	ldrb	r3, [r7, #31]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eec:	4b7a      	ldr	r3, [pc, #488]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef0:	4a79      	ldr	r2, [pc, #484]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80fe 	beq.w	80040fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	f040 80d0 	bne.w	80040ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f0c:	4b72      	ldr	r3, [pc, #456]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 0203 	and.w	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d130      	bne.n	8003f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d127      	bne.n	8003f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d11f      	bne.n	8003f82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f4c:	2a07      	cmp	r2, #7
 8003f4e:	bf14      	ite	ne
 8003f50:	2201      	movne	r2, #1
 8003f52:	2200      	moveq	r2, #0
 8003f54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d113      	bne.n	8003f82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d06e      	beq.n	8004060 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d069      	beq.n	800405c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f88:	4b53      	ldr	r3, [pc, #332]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f94:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0ad      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fb0:	f7fe fd5e 	bl	8002a70 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fe fd5a 	bl	8002a70 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e09a      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fca:	4b43      	ldr	r3, [pc, #268]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd6:	4b40      	ldr	r3, [pc, #256]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	4b40      	ldr	r3, [pc, #256]	@ (80040dc <HAL_RCC_OscConfig+0x784>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fe6:	3a01      	subs	r2, #1
 8003fe8:	0112      	lsls	r2, r2, #4
 8003fea:	4311      	orrs	r1, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ff0:	0212      	lsls	r2, r2, #8
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ff8:	0852      	lsrs	r2, r2, #1
 8003ffa:	3a01      	subs	r2, #1
 8003ffc:	0552      	lsls	r2, r2, #21
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004004:	0852      	lsrs	r2, r2, #1
 8004006:	3a01      	subs	r2, #1
 8004008:	0652      	lsls	r2, r2, #25
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004010:	0912      	lsrs	r2, r2, #4
 8004012:	0452      	lsls	r2, r2, #17
 8004014:	430a      	orrs	r2, r1
 8004016:	4930      	ldr	r1, [pc, #192]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8004018:	4313      	orrs	r3, r2
 800401a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800401c:	4b2e      	ldr	r3, [pc, #184]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2d      	ldr	r2, [pc, #180]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8004022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004028:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4a2a      	ldr	r2, [pc, #168]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 800402e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004032:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004034:	f7fe fd1c 	bl	8002a70 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fe fd18 	bl	8002a70 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e058      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404e:	4b22      	ldr	r3, [pc, #136]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800405a:	e050      	b.n	80040fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e04f      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004060:	4b1d      	ldr	r3, [pc, #116]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d148      	bne.n	80040fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800406c:	4b1a      	ldr	r3, [pc, #104]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 8004072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004076:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004078:	4b17      	ldr	r3, [pc, #92]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a16      	ldr	r2, [pc, #88]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004082:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004084:	f7fe fcf4 	bl	8002a70 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe fcf0 	bl	8002a70 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e030      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409e:	4b0e      	ldr	r3, [pc, #56]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x734>
 80040aa:	e028      	b.n	80040fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b0c      	cmp	r3, #12
 80040b0:	d023      	beq.n	80040fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a08      	ldr	r2, [pc, #32]	@ (80040d8 <HAL_RCC_OscConfig+0x780>)
 80040b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fe fcd7 	bl	8002a70 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c4:	e00c      	b.n	80040e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c6:	f7fe fcd3 	bl	8002a70 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d905      	bls.n	80040e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e013      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
 80040d8:	40021000 	.word	0x40021000
 80040dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e0:	4b09      	ldr	r3, [pc, #36]	@ (8004108 <HAL_RCC_OscConfig+0x7b0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1ec      	bne.n	80040c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_RCC_OscConfig+0x7b0>)
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	4905      	ldr	r1, [pc, #20]	@ (8004108 <HAL_RCC_OscConfig+0x7b0>)
 80040f2:	4b06      	ldr	r3, [pc, #24]	@ (800410c <HAL_RCC_OscConfig+0x7b4>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	60cb      	str	r3, [r1, #12]
 80040f8:	e001      	b.n	80040fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	feeefffc 	.word	0xfeeefffc

08004110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0e7      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004124:	4b75      	ldr	r3, [pc, #468]	@ (80042fc <HAL_RCC_ClockConfig+0x1ec>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d910      	bls.n	8004154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b72      	ldr	r3, [pc, #456]	@ (80042fc <HAL_RCC_ClockConfig+0x1ec>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 0207 	bic.w	r2, r3, #7
 800413a:	4970      	ldr	r1, [pc, #448]	@ (80042fc <HAL_RCC_ClockConfig+0x1ec>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b6e      	ldr	r3, [pc, #440]	@ (80042fc <HAL_RCC_ClockConfig+0x1ec>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0cf      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d010      	beq.n	8004182 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	4b66      	ldr	r3, [pc, #408]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800416c:	429a      	cmp	r2, r3
 800416e:	d908      	bls.n	8004182 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004170:	4b63      	ldr	r3, [pc, #396]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4960      	ldr	r1, [pc, #384]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d04c      	beq.n	8004228 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004196:	4b5a      	ldr	r3, [pc, #360]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d121      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0a6      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d107      	bne.n	80041be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ae:	4b54      	ldr	r3, [pc, #336]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d115      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e09a      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e08e      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e086      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e6:	4b46      	ldr	r3, [pc, #280]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 0203 	bic.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4943      	ldr	r1, [pc, #268]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fe fc3a 	bl	8002a70 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004200:	f7fe fc36 	bl	8002a70 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e06e      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	4b3a      	ldr	r3, [pc, #232]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 020c 	and.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	429a      	cmp	r2, r3
 8004226:	d1eb      	bne.n	8004200 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d010      	beq.n	8004256 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	4b31      	ldr	r3, [pc, #196]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004240:	429a      	cmp	r2, r3
 8004242:	d208      	bcs.n	8004256 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004244:	4b2e      	ldr	r3, [pc, #184]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	492b      	ldr	r1, [pc, #172]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004256:	4b29      	ldr	r3, [pc, #164]	@ (80042fc <HAL_RCC_ClockConfig+0x1ec>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d210      	bcs.n	8004286 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004264:	4b25      	ldr	r3, [pc, #148]	@ (80042fc <HAL_RCC_ClockConfig+0x1ec>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 0207 	bic.w	r2, r3, #7
 800426c:	4923      	ldr	r1, [pc, #140]	@ (80042fc <HAL_RCC_ClockConfig+0x1ec>)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004274:	4b21      	ldr	r3, [pc, #132]	@ (80042fc <HAL_RCC_ClockConfig+0x1ec>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d001      	beq.n	8004286 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e036      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004292:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	4918      	ldr	r1, [pc, #96]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d009      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b0:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4910      	ldr	r1, [pc, #64]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042c4:	f000 f824 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <HAL_RCC_ClockConfig+0x1f0>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	490b      	ldr	r1, [pc, #44]	@ (8004304 <HAL_RCC_ClockConfig+0x1f4>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
 80042e0:	4a09      	ldr	r2, [pc, #36]	@ (8004308 <HAL_RCC_ClockConfig+0x1f8>)
 80042e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042e4:	4b09      	ldr	r3, [pc, #36]	@ (800430c <HAL_RCC_ClockConfig+0x1fc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe fb71 	bl	80029d0 <HAL_InitTick>
 80042ee:	4603      	mov	r3, r0
 80042f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80042f2:	7afb      	ldrb	r3, [r7, #11]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40022000 	.word	0x40022000
 8004300:	40021000 	.word	0x40021000
 8004304:	080077c4 	.word	0x080077c4
 8004308:	20000000 	.word	0x20000000
 800430c:	20000004 	.word	0x20000004

08004310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	@ 0x24
 8004314:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800431e:	4b3e      	ldr	r3, [pc, #248]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x108>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004328:	4b3b      	ldr	r3, [pc, #236]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x108>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x34>
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d121      	bne.n	8004382 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d11e      	bne.n	8004382 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004344:	4b34      	ldr	r3, [pc, #208]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x108>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004350:	4b31      	ldr	r3, [pc, #196]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x108>)
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	e005      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004360:	4b2d      	ldr	r3, [pc, #180]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x108>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800436c:	4a2b      	ldr	r2, [pc, #172]	@ (800441c <HAL_RCC_GetSysClockFreq+0x10c>)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004374:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10d      	bne.n	8004398 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d102      	bne.n	800438e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004388:	4b25      	ldr	r3, [pc, #148]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x110>)
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	e004      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d101      	bne.n	8004398 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004394:	4b23      	ldr	r3, [pc, #140]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x114>)
 8004396:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b0c      	cmp	r3, #12
 800439c:	d134      	bne.n	8004408 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800439e:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d003      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0xac>
 80043b4:	e005      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x110>)
 80043b8:	617b      	str	r3, [r7, #20]
      break;
 80043ba:	e005      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043bc:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x114>)
 80043be:	617b      	str	r3, [r7, #20]
      break;
 80043c0:	e002      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	617b      	str	r3, [r7, #20]
      break;
 80043c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c8:	4b13      	ldr	r3, [pc, #76]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	3301      	adds	r3, #1
 80043d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043d6:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	fb03 f202 	mul.w	r2, r3, r2
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	0e5b      	lsrs	r3, r3, #25
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	3301      	adds	r3, #1
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004408:	69bb      	ldr	r3, [r7, #24]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3724      	adds	r7, #36	@ 0x24
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	080077dc 	.word	0x080077dc
 8004420:	00f42400 	.word	0x00f42400
 8004424:	007a1200 	.word	0x007a1200

08004428 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800442c:	4b03      	ldr	r3, [pc, #12]	@ (800443c <HAL_RCC_GetHCLKFreq+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000000 	.word	0x20000000

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004444:	f7ff fff0 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4904      	ldr	r1, [pc, #16]	@ (8004468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000
 8004468:	080077d4 	.word	0x080077d4

0800446c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004470:	f7ff ffda 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	0adb      	lsrs	r3, r3, #11
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4904      	ldr	r1, [pc, #16]	@ (8004494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	080077d4 	.word	0x080077d4

08004498 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044b0:	f7ff f9ee 	bl	8003890 <HAL_PWREx_GetVoltageRange>
 80044b4:	6178      	str	r0, [r7, #20]
 80044b6:	e014      	b.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044b8:	4b25      	ldr	r3, [pc, #148]	@ (8004550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044bc:	4a24      	ldr	r2, [pc, #144]	@ (8004550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044c4:	4b22      	ldr	r3, [pc, #136]	@ (8004550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044d0:	f7ff f9de 	bl	8003890 <HAL_PWREx_GetVoltageRange>
 80044d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044da:	4a1d      	ldr	r2, [pc, #116]	@ (8004550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e8:	d10b      	bne.n	8004502 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b80      	cmp	r3, #128	@ 0x80
 80044ee:	d919      	bls.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80044f4:	d902      	bls.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044f6:	2302      	movs	r3, #2
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e013      	b.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044fc:	2301      	movs	r3, #1
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	e010      	b.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b80      	cmp	r3, #128	@ 0x80
 8004506:	d902      	bls.n	800450e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004508:	2303      	movs	r3, #3
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e00a      	b.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b80      	cmp	r3, #128	@ 0x80
 8004512:	d102      	bne.n	800451a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004514:	2302      	movs	r3, #2
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	e004      	b.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b70      	cmp	r3, #112	@ 0x70
 800451e:	d101      	bne.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004524:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 0207 	bic.w	r2, r3, #7
 800452c:	4909      	ldr	r1, [pc, #36]	@ (8004554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004534:	4b07      	ldr	r3, [pc, #28]	@ (8004554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	429a      	cmp	r2, r3
 8004540:	d001      	beq.n	8004546 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	40022000 	.word	0x40022000

08004558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004560:	2300      	movs	r3, #0
 8004562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004564:	2300      	movs	r3, #0
 8004566:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004570:	2b00      	cmp	r3, #0
 8004572:	d041      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004578:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800457c:	d02a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800457e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004582:	d824      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004584:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004588:	d008      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800458a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800458e:	d81e      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004594:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004598:	d010      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800459a:	e018      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800459c:	4b86      	ldr	r3, [pc, #536]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a85      	ldr	r2, [pc, #532]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a8:	e015      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2100      	movs	r1, #0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fabb 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ba:	e00c      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3320      	adds	r3, #32
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fba6 	bl	8004d14 <RCCEx_PLLSAI2_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045cc:	e003      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	74fb      	strb	r3, [r7, #19]
      break;
 80045d2:	e000      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045dc:	4b76      	ldr	r3, [pc, #472]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ea:	4973      	ldr	r1, [pc, #460]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045f2:	e001      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d041      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004608:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800460c:	d02a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800460e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004612:	d824      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004614:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004618:	d008      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800461a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800461e:	d81e      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004628:	d010      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800462a:	e018      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800462c:	4b62      	ldr	r3, [pc, #392]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a61      	ldr	r2, [pc, #388]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004636:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004638:	e015      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fa73 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800464a:	e00c      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3320      	adds	r3, #32
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fb5e 	bl	8004d14 <RCCEx_PLLSAI2_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	74fb      	strb	r3, [r7, #19]
      break;
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800466c:	4b52      	ldr	r3, [pc, #328]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800467a:	494f      	ldr	r1, [pc, #316]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004682:	e001      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80a0 	beq.w	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004696:	2300      	movs	r3, #0
 8004698:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800469a:	4b47      	ldr	r3, [pc, #284]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b0:	4b41      	ldr	r3, [pc, #260]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b4:	4a40      	ldr	r2, [pc, #256]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80046bc:	4b3e      	ldr	r3, [pc, #248]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c8:	2301      	movs	r3, #1
 80046ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046cc:	4b3b      	ldr	r3, [pc, #236]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a3a      	ldr	r2, [pc, #232]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046d8:	f7fe f9ca 	bl	8002a70 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046de:	e009      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e0:	f7fe f9c6 	bl	8002a70 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d902      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	74fb      	strb	r3, [r7, #19]
        break;
 80046f2:	e005      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046f4:	4b31      	ldr	r3, [pc, #196]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ef      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d15c      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004706:	4b2c      	ldr	r3, [pc, #176]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004710:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01f      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	429a      	cmp	r2, r3
 8004722:	d019      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004724:	4b24      	ldr	r3, [pc, #144]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004730:	4b21      	ldr	r3, [pc, #132]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004736:	4a20      	ldr	r2, [pc, #128]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004740:	4b1d      	ldr	r3, [pc, #116]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004750:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fe f985 	bl	8002a70 <HAL_GetTick>
 8004766:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004768:	e00b      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fe f981 	bl	8002a70 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d902      	bls.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	74fb      	strb	r3, [r7, #19]
            break;
 8004780:	e006      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ec      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10c      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004796:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a6:	4904      	ldr	r1, [pc, #16]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047ae:	e009      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	74bb      	strb	r3, [r7, #18]
 80047b4:	e006      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047b6:	bf00      	nop
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c4:	7c7b      	ldrb	r3, [r7, #17]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d105      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ca:	4b9e      	ldr	r3, [pc, #632]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ce:	4a9d      	ldr	r2, [pc, #628]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e2:	4b98      	ldr	r3, [pc, #608]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	f023 0203 	bic.w	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f0:	4994      	ldr	r1, [pc, #592]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004804:	4b8f      	ldr	r3, [pc, #572]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	f023 020c 	bic.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	498c      	ldr	r1, [pc, #560]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004826:	4b87      	ldr	r3, [pc, #540]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	4983      	ldr	r1, [pc, #524]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004848:	4b7e      	ldr	r3, [pc, #504]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004856:	497b      	ldr	r1, [pc, #492]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800486a:	4b76      	ldr	r3, [pc, #472]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004878:	4972      	ldr	r1, [pc, #456]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800488c:	4b6d      	ldr	r3, [pc, #436]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489a:	496a      	ldr	r1, [pc, #424]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ae:	4b65      	ldr	r3, [pc, #404]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048bc:	4961      	ldr	r1, [pc, #388]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048d0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048de:	4959      	ldr	r1, [pc, #356]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f2:	4b54      	ldr	r3, [pc, #336]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004900:	4950      	ldr	r1, [pc, #320]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004914:	4b4b      	ldr	r3, [pc, #300]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004922:	4948      	ldr	r1, [pc, #288]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004936:	4b43      	ldr	r3, [pc, #268]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004944:	493f      	ldr	r1, [pc, #252]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d028      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004958:	4b3a      	ldr	r3, [pc, #232]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004966:	4937      	ldr	r1, [pc, #220]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004976:	d106      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004978:	4b32      	ldr	r3, [pc, #200]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a31      	ldr	r2, [pc, #196]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004982:	60d3      	str	r3, [r2, #12]
 8004984:	e011      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800498a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800498e:	d10c      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	2101      	movs	r1, #1
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f8c8 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d028      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049b6:	4b23      	ldr	r3, [pc, #140]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c4:	491f      	ldr	r1, [pc, #124]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d4:	d106      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4a1a      	ldr	r2, [pc, #104]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e0:	60d3      	str	r3, [r2, #12]
 80049e2:	e011      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f899 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02b      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a14:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a22:	4908      	ldr	r1, [pc, #32]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a32:	d109      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a34:	4b03      	ldr	r3, [pc, #12]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4a02      	ldr	r2, [pc, #8]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a3e:	60d3      	str	r3, [r2, #12]
 8004a40:	e014      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a42:	bf00      	nop
 8004a44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2101      	movs	r1, #1
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 f867 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a68:	7cfb      	ldrb	r3, [r7, #19]
 8004a6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02f      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a78:	4b2b      	ldr	r3, [pc, #172]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a86:	4928      	ldr	r1, [pc, #160]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a96:	d10d      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f844 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d014      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	74bb      	strb	r3, [r7, #18]
 8004ab2:	e011      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3320      	adds	r3, #32
 8004ac2:	2102      	movs	r1, #2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 f925 	bl	8004d14 <RCCEx_PLLSAI2_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ace:	7cfb      	ldrb	r3, [r7, #19]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ae4:	4b10      	ldr	r3, [pc, #64]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004af2:	490d      	ldr	r1, [pc, #52]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b06:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b16:	4904      	ldr	r1, [pc, #16]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000

08004b2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b3a:	4b75      	ldr	r3, [pc, #468]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b46:	4b72      	ldr	r3, [pc, #456]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0203 	and.w	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d10d      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
       ||
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d047      	beq.n	8004c02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
 8004b76:	e044      	b.n	8004c02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d018      	beq.n	8004bb2 <RCCEx_PLLSAI1_Config+0x86>
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d825      	bhi.n	8004bd0 <RCCEx_PLLSAI1_Config+0xa4>
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d002      	beq.n	8004b8e <RCCEx_PLLSAI1_Config+0x62>
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d009      	beq.n	8004ba0 <RCCEx_PLLSAI1_Config+0x74>
 8004b8c:	e020      	b.n	8004bd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b8e:	4b60      	ldr	r3, [pc, #384]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11d      	bne.n	8004bd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b9e:	e01a      	b.n	8004bd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d116      	bne.n	8004bda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb0:	e013      	b.n	8004bda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bb2:	4b57      	ldr	r3, [pc, #348]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bbe:	4b54      	ldr	r3, [pc, #336]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bce:	e006      	b.n	8004bde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd4:	e004      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e002      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bde:	bf00      	nop
    }

    if(status == HAL_OK)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004be6:	4b4a      	ldr	r3, [pc, #296]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	4944      	ldr	r1, [pc, #272]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d17d      	bne.n	8004d04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c08:	4b41      	ldr	r3, [pc, #260]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a40      	ldr	r2, [pc, #256]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c14:	f7fd ff2c 	bl	8002a70 <HAL_GetTick>
 8004c18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c1a:	e009      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c1c:	f7fd ff28 	bl	8002a70 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d902      	bls.n	8004c30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c2e:	e005      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c30:	4b37      	ldr	r3, [pc, #220]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1ef      	bne.n	8004c1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d160      	bne.n	8004d04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d111      	bne.n	8004c6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c48:	4b31      	ldr	r3, [pc, #196]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6892      	ldr	r2, [r2, #8]
 8004c58:	0211      	lsls	r1, r2, #8
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68d2      	ldr	r2, [r2, #12]
 8004c5e:	0912      	lsrs	r2, r2, #4
 8004c60:	0452      	lsls	r2, r2, #17
 8004c62:	430a      	orrs	r2, r1
 8004c64:	492a      	ldr	r1, [pc, #168]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	610b      	str	r3, [r1, #16]
 8004c6a:	e027      	b.n	8004cbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d112      	bne.n	8004c98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c72:	4b27      	ldr	r3, [pc, #156]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c7a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6892      	ldr	r2, [r2, #8]
 8004c82:	0211      	lsls	r1, r2, #8
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6912      	ldr	r2, [r2, #16]
 8004c88:	0852      	lsrs	r2, r2, #1
 8004c8a:	3a01      	subs	r2, #1
 8004c8c:	0552      	lsls	r2, r2, #21
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	491f      	ldr	r1, [pc, #124]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	610b      	str	r3, [r1, #16]
 8004c96:	e011      	b.n	8004cbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c98:	4b1d      	ldr	r3, [pc, #116]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ca0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6892      	ldr	r2, [r2, #8]
 8004ca8:	0211      	lsls	r1, r2, #8
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6952      	ldr	r2, [r2, #20]
 8004cae:	0852      	lsrs	r2, r2, #1
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	0652      	lsls	r2, r2, #25
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	4916      	ldr	r1, [pc, #88]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cbc:	4b14      	ldr	r3, [pc, #80]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a13      	ldr	r2, [pc, #76]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd fed2 	bl	8002a70 <HAL_GetTick>
 8004ccc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cce:	e009      	b.n	8004ce4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cd0:	f7fd fece 	bl	8002a70 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d902      	bls.n	8004ce4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ce2:	e005      	b.n	8004cf0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0ef      	beq.n	8004cd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	4904      	ldr	r1, [pc, #16]	@ (8004d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000

08004d14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d22:	4b6a      	ldr	r3, [pc, #424]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d018      	beq.n	8004d60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d2e:	4b67      	ldr	r3, [pc, #412]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0203 	and.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d10d      	bne.n	8004d5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
       ||
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d46:	4b61      	ldr	r3, [pc, #388]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
       ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d047      	beq.n	8004dea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
 8004d5e:	e044      	b.n	8004dea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d018      	beq.n	8004d9a <RCCEx_PLLSAI2_Config+0x86>
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d825      	bhi.n	8004db8 <RCCEx_PLLSAI2_Config+0xa4>
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d002      	beq.n	8004d76 <RCCEx_PLLSAI2_Config+0x62>
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d009      	beq.n	8004d88 <RCCEx_PLLSAI2_Config+0x74>
 8004d74:	e020      	b.n	8004db8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d76:	4b55      	ldr	r3, [pc, #340]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11d      	bne.n	8004dbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d86:	e01a      	b.n	8004dbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d88:	4b50      	ldr	r3, [pc, #320]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d116      	bne.n	8004dc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d98:	e013      	b.n	8004dc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004da6:	4b49      	ldr	r3, [pc, #292]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004db6:	e006      	b.n	8004dc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e004      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e002      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10d      	bne.n	8004dea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dce:	4b3f      	ldr	r3, [pc, #252]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	430b      	orrs	r3, r1
 8004de4:	4939      	ldr	r1, [pc, #228]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d167      	bne.n	8004ec0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004df0:	4b36      	ldr	r3, [pc, #216]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a35      	ldr	r2, [pc, #212]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfc:	f7fd fe38 	bl	8002a70 <HAL_GetTick>
 8004e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e02:	e009      	b.n	8004e18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e04:	f7fd fe34 	bl	8002a70 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d902      	bls.n	8004e18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	73fb      	strb	r3, [r7, #15]
        break;
 8004e16:	e005      	b.n	8004e24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e18:	4b2c      	ldr	r3, [pc, #176]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1ef      	bne.n	8004e04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d14a      	bne.n	8004ec0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d111      	bne.n	8004e54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e30:	4b26      	ldr	r3, [pc, #152]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6892      	ldr	r2, [r2, #8]
 8004e40:	0211      	lsls	r1, r2, #8
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68d2      	ldr	r2, [r2, #12]
 8004e46:	0912      	lsrs	r2, r2, #4
 8004e48:	0452      	lsls	r2, r2, #17
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	491f      	ldr	r1, [pc, #124]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	614b      	str	r3, [r1, #20]
 8004e52:	e011      	b.n	8004e78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e54:	4b1d      	ldr	r3, [pc, #116]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6892      	ldr	r2, [r2, #8]
 8004e64:	0211      	lsls	r1, r2, #8
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6912      	ldr	r2, [r2, #16]
 8004e6a:	0852      	lsrs	r2, r2, #1
 8004e6c:	3a01      	subs	r2, #1
 8004e6e:	0652      	lsls	r2, r2, #25
 8004e70:	430a      	orrs	r2, r1
 8004e72:	4916      	ldr	r1, [pc, #88]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e78:	4b14      	ldr	r3, [pc, #80]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fd fdf4 	bl	8002a70 <HAL_GetTick>
 8004e88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e8a:	e009      	b.n	8004ea0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e8c:	f7fd fdf0 	bl	8002a70 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d902      	bls.n	8004ea0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e9e:	e005      	b.n	8004eac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ef      	beq.n	8004e8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004eb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4904      	ldr	r1, [pc, #16]	@ (8004ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000

08004ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e095      	b.n	800500e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d108      	bne.n	8004efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef2:	d009      	beq.n	8004f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	61da      	str	r2, [r3, #28]
 8004efa:	e005      	b.n	8004f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd fb1c 	bl	8002560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f48:	d902      	bls.n	8004f50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e002      	b.n	8004f56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f5e:	d007      	beq.n	8004f70 <HAL_SPI_Init+0xa0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f68:	d002      	beq.n	8004f70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb2:	ea42 0103 	orr.w	r1, r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	f003 0204 	and.w	r2, r3, #4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004fec:	ea42 0103 	orr.w	r1, r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b088      	sub	sp, #32
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_SPI_Transmit+0x22>
 8005034:	2302      	movs	r3, #2
 8005036:	e15f      	b.n	80052f8 <HAL_SPI_Transmit+0x2e2>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005040:	f7fd fd16 	bl	8002a70 <HAL_GetTick>
 8005044:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b01      	cmp	r3, #1
 8005054:	d002      	beq.n	800505c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005056:	2302      	movs	r3, #2
 8005058:	77fb      	strb	r3, [r7, #31]
    goto error;
 800505a:	e148      	b.n	80052ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_SPI_Transmit+0x52>
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800506c:	e13f      	b.n	80052ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2203      	movs	r2, #3
 8005072:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b8:	d10f      	bne.n	80050da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e4:	2b40      	cmp	r3, #64	@ 0x40
 80050e6:	d007      	beq.n	80050f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005100:	d94f      	bls.n	80051a2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_SPI_Transmit+0xfa>
 800510a:	8afb      	ldrh	r3, [r7, #22]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d142      	bne.n	8005196 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	881a      	ldrh	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	1c9a      	adds	r2, r3, #2
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005134:	e02f      	b.n	8005196 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b02      	cmp	r3, #2
 8005142:	d112      	bne.n	800516a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005148:	881a      	ldrh	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005154:	1c9a      	adds	r2, r3, #2
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005168:	e015      	b.n	8005196 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800516a:	f7fd fc81 	bl	8002a70 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d803      	bhi.n	8005182 <HAL_SPI_Transmit+0x16c>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d102      	bne.n	8005188 <HAL_SPI_Transmit+0x172>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005194:	e0ab      	b.n	80052ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1ca      	bne.n	8005136 <HAL_SPI_Transmit+0x120>
 80051a0:	e080      	b.n	80052a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_SPI_Transmit+0x19a>
 80051aa:	8afb      	ldrh	r3, [r7, #22]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d174      	bne.n	800529a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d912      	bls.n	80051e0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	881a      	ldrh	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ca:	1c9a      	adds	r2, r3, #2
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b02      	subs	r3, #2
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051de:	e05c      	b.n	800529a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	7812      	ldrb	r2, [r2, #0]
 80051ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005206:	e048      	b.n	800529a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d12b      	bne.n	800526e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d912      	bls.n	8005246 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	881a      	ldrh	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	1c9a      	adds	r2, r3, #2
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b02      	subs	r3, #2
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005244:	e029      	b.n	800529a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	7812      	ldrb	r2, [r2, #0]
 8005252:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800526c:	e015      	b.n	800529a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800526e:	f7fd fbff 	bl	8002a70 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d803      	bhi.n	8005286 <HAL_SPI_Transmit+0x270>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d102      	bne.n	800528c <HAL_SPI_Transmit+0x276>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005298:	e029      	b.n	80052ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1b1      	bne.n	8005208 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	6839      	ldr	r1, [r7, #0]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f947 	bl	800553c <SPI_EndRxTxTransaction>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e003      	b.n	80052ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	4613      	mov	r3, r2
 800530e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005310:	f7fd fbae 	bl	8002a70 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	4413      	add	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005320:	f7fd fba6 	bl	8002a70 <HAL_GetTick>
 8005324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005326:	4b39      	ldr	r3, [pc, #228]	@ (800540c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	015b      	lsls	r3, r3, #5
 800532c:	0d1b      	lsrs	r3, r3, #20
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005336:	e054      	b.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d050      	beq.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005340:	f7fd fb96 	bl	8002a70 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	429a      	cmp	r2, r3
 800534e:	d902      	bls.n	8005356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d13d      	bne.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800536e:	d111      	bne.n	8005394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005378:	d004      	beq.n	8005384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005382:	d107      	bne.n	8005394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800539c:	d10f      	bne.n	80053be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e017      	b.n	8005402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3b01      	subs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4013      	ands	r3, r2
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	bf0c      	ite	eq
 80053f2:	2301      	moveq	r3, #1
 80053f4:	2300      	movne	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d19b      	bne.n	8005338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000000 	.word	0x20000000

08005410 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005422:	f7fd fb25 	bl	8002a70 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	4413      	add	r3, r2
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005432:	f7fd fb1d 	bl	8002a70 <HAL_GetTick>
 8005436:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	330c      	adds	r3, #12
 800543e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005440:	4b3d      	ldr	r3, [pc, #244]	@ (8005538 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	00da      	lsls	r2, r3, #3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	0d1b      	lsrs	r3, r3, #20
 8005450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005458:	e060      	b.n	800551c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005460:	d107      	bne.n	8005472 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005470:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d050      	beq.n	800551c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800547a:	f7fd faf9 	bl	8002a70 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005486:	429a      	cmp	r2, r3
 8005488:	d902      	bls.n	8005490 <SPI_WaitFifoStateUntilTimeout+0x80>
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d13d      	bne.n	800550c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800549e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054a8:	d111      	bne.n	80054ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054b2:	d004      	beq.n	80054be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054bc:	d107      	bne.n	80054ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d6:	d10f      	bne.n	80054f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e010      	b.n	800552e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	3b01      	subs	r3, #1
 800551a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	d196      	bne.n	800545a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3728      	adds	r7, #40	@ 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000000 	.word	0x20000000

0800553c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2200      	movs	r2, #0
 8005550:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff ff5b 	bl	8005410 <SPI_WaitFifoStateUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e027      	b.n	80055c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	2180      	movs	r1, #128	@ 0x80
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff fec0 	bl	8005300 <SPI_WaitFlagStateUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800558a:	f043 0220 	orr.w	r2, r3, #32
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e014      	b.n	80055c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f7ff ff34 	bl	8005410 <SPI_WaitFifoStateUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b2:	f043 0220 	orr.w	r2, r3, #32
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e000      	b.n	80055c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e049      	b.n	800566e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc fff8 	bl	80025e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f000 f970 	bl	80058ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d001      	beq.n	8005690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e04f      	b.n	8005730 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a23      	ldr	r2, [pc, #140]	@ (800573c <HAL_TIM_Base_Start_IT+0xc4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01d      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ba:	d018      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005740 <HAL_TIM_Base_Start_IT+0xc8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005744 <HAL_TIM_Base_Start_IT+0xcc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005748 <HAL_TIM_Base_Start_IT+0xd0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	@ (800574c <HAL_TIM_Base_Start_IT+0xd4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a19      	ldr	r2, [pc, #100]	@ (8005750 <HAL_TIM_Base_Start_IT+0xd8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d115      	bne.n	800571a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	4b17      	ldr	r3, [pc, #92]	@ (8005754 <HAL_TIM_Base_Start_IT+0xdc>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d015      	beq.n	800572c <HAL_TIM_Base_Start_IT+0xb4>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005706:	d011      	beq.n	800572c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	e008      	b.n	800572c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e000      	b.n	800572e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	40013400 	.word	0x40013400
 8005750:	40014000 	.word	0x40014000
 8005754:	00010007 	.word	0x00010007

08005758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_TIM_ConfigClockSource+0x1c>
 8005770:	2302      	movs	r3, #2
 8005772:	e0b6      	b.n	80058e2 <HAL_TIM_ConfigClockSource+0x18a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005792:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800579e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b0:	d03e      	beq.n	8005830 <HAL_TIM_ConfigClockSource+0xd8>
 80057b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b6:	f200 8087 	bhi.w	80058c8 <HAL_TIM_ConfigClockSource+0x170>
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057be:	f000 8086 	beq.w	80058ce <HAL_TIM_ConfigClockSource+0x176>
 80057c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c6:	d87f      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x170>
 80057c8:	2b70      	cmp	r3, #112	@ 0x70
 80057ca:	d01a      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0xaa>
 80057cc:	2b70      	cmp	r3, #112	@ 0x70
 80057ce:	d87b      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x170>
 80057d0:	2b60      	cmp	r3, #96	@ 0x60
 80057d2:	d050      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x11e>
 80057d4:	2b60      	cmp	r3, #96	@ 0x60
 80057d6:	d877      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x170>
 80057d8:	2b50      	cmp	r3, #80	@ 0x50
 80057da:	d03c      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0xfe>
 80057dc:	2b50      	cmp	r3, #80	@ 0x50
 80057de:	d873      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x170>
 80057e0:	2b40      	cmp	r3, #64	@ 0x40
 80057e2:	d058      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x13e>
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d86f      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x170>
 80057e8:	2b30      	cmp	r3, #48	@ 0x30
 80057ea:	d064      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x15e>
 80057ec:	2b30      	cmp	r3, #48	@ 0x30
 80057ee:	d86b      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x170>
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d060      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x15e>
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d867      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x170>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d05c      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x15e>
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d05a      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x15e>
 8005800:	e062      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005812:	f000 f97f 	bl	8005b14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005824:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	609a      	str	r2, [r3, #8]
      break;
 800582e:	e04f      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005840:	f000 f968 	bl	8005b14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005852:	609a      	str	r2, [r3, #8]
      break;
 8005854:	e03c      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005862:	461a      	mov	r2, r3
 8005864:	f000 f8dc 	bl	8005a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2150      	movs	r1, #80	@ 0x50
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f935 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 8005874:	e02c      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005882:	461a      	mov	r2, r3
 8005884:	f000 f8fb 	bl	8005a7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2160      	movs	r1, #96	@ 0x60
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f925 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 8005894:	e01c      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 f8bc 	bl	8005a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2140      	movs	r1, #64	@ 0x40
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 f915 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 80058b4:	e00c      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f000 f90c 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 80058c6:	e003      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
      break;
 80058cc:	e000      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80058ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a40      	ldr	r2, [pc, #256]	@ (8005a00 <TIM_Base_SetConfig+0x114>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <TIM_Base_SetConfig+0x40>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590a:	d00f      	beq.n	800592c <TIM_Base_SetConfig+0x40>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a04 <TIM_Base_SetConfig+0x118>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a3c      	ldr	r2, [pc, #240]	@ (8005a08 <TIM_Base_SetConfig+0x11c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a3b      	ldr	r2, [pc, #236]	@ (8005a0c <TIM_Base_SetConfig+0x120>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a3a      	ldr	r2, [pc, #232]	@ (8005a10 <TIM_Base_SetConfig+0x124>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d108      	bne.n	800593e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2f      	ldr	r2, [pc, #188]	@ (8005a00 <TIM_Base_SetConfig+0x114>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01f      	beq.n	8005986 <TIM_Base_SetConfig+0x9a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594c:	d01b      	beq.n	8005986 <TIM_Base_SetConfig+0x9a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2c      	ldr	r2, [pc, #176]	@ (8005a04 <TIM_Base_SetConfig+0x118>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d017      	beq.n	8005986 <TIM_Base_SetConfig+0x9a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a2b      	ldr	r2, [pc, #172]	@ (8005a08 <TIM_Base_SetConfig+0x11c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <TIM_Base_SetConfig+0x9a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a2a      	ldr	r2, [pc, #168]	@ (8005a0c <TIM_Base_SetConfig+0x120>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00f      	beq.n	8005986 <TIM_Base_SetConfig+0x9a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a29      	ldr	r2, [pc, #164]	@ (8005a10 <TIM_Base_SetConfig+0x124>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00b      	beq.n	8005986 <TIM_Base_SetConfig+0x9a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a28      	ldr	r2, [pc, #160]	@ (8005a14 <TIM_Base_SetConfig+0x128>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <TIM_Base_SetConfig+0x9a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a27      	ldr	r2, [pc, #156]	@ (8005a18 <TIM_Base_SetConfig+0x12c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_Base_SetConfig+0x9a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a26      	ldr	r2, [pc, #152]	@ (8005a1c <TIM_Base_SetConfig+0x130>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d108      	bne.n	8005998 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800598c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a10      	ldr	r2, [pc, #64]	@ (8005a00 <TIM_Base_SetConfig+0x114>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00f      	beq.n	80059e4 <TIM_Base_SetConfig+0xf8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a12      	ldr	r2, [pc, #72]	@ (8005a10 <TIM_Base_SetConfig+0x124>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <TIM_Base_SetConfig+0xf8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a11      	ldr	r2, [pc, #68]	@ (8005a14 <TIM_Base_SetConfig+0x128>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d007      	beq.n	80059e4 <TIM_Base_SetConfig+0xf8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a10      	ldr	r2, [pc, #64]	@ (8005a18 <TIM_Base_SetConfig+0x12c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_Base_SetConfig+0xf8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a0f      	ldr	r2, [pc, #60]	@ (8005a1c <TIM_Base_SetConfig+0x130>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d103      	bne.n	80059ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	615a      	str	r2, [r3, #20]
}
 80059f2:	bf00      	nop
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40000800 	.word	0x40000800
 8005a0c:	40000c00 	.word	0x40000c00
 8005a10:	40013400 	.word	0x40013400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800

08005a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f023 0201 	bic.w	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 030a 	bic.w	r3, r3, #10
 8005a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b087      	sub	sp, #28
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f023 0210 	bic.w	r2, r3, #16
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005aa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	031b      	lsls	r3, r3, #12
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005aba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f043 0307 	orr.w	r3, r3, #7
 8005b00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	609a      	str	r2, [r3, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	021a      	lsls	r2, r3, #8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	609a      	str	r2, [r3, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e068      	b.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2e      	ldr	r2, [pc, #184]	@ (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d004      	beq.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d108      	bne.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01d      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bde:	d018      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00e      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a13      	ldr	r2, [pc, #76]	@ (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a14      	ldr	r2, [pc, #80]	@ (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10c      	bne.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00
 8005c60:	40014000 	.word	0x40014000

08005c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e040      	b.n	8005cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fc fcf8 	bl	800267c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	@ 0x24
 8005c90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fff2 	bl	8006c94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fd37 	bl	8006724 <UART_SetConfig>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e01b      	b.n	8005cf8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 f871 	bl	8006dd8 <UART_CheckIdleState>
 8005cf6:	4603      	mov	r3, r0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	@ 0x28
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d177      	bne.n	8005e08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_UART_Transmit+0x24>
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e070      	b.n	8005e0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2221      	movs	r2, #33	@ 0x21
 8005d34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d36:	f7fc fe9b 	bl	8002a70 <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d54:	d108      	bne.n	8005d68 <HAL_UART_Transmit+0x68>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e003      	b.n	8005d70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d70:	e02f      	b.n	8005dd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2180      	movs	r1, #128	@ 0x80
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f001 f8d3 	bl	8006f28 <UART_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e03b      	b.n	8005e0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	881a      	ldrh	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da4:	b292      	uxth	r2, r2
 8005da6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	3302      	adds	r3, #2
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e007      	b.n	8005dc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1c9      	bne.n	8005d72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2140      	movs	r1, #64	@ 0x40
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f001 f89d 	bl	8006f28 <UART_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e005      	b.n	8005e0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
  }
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	@ 0x28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d137      	bne.n	8005e9c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_UART_Receive_IT+0x24>
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e030      	b.n	8005e9e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a18      	ldr	r2, [pc, #96]	@ (8005ea8 <HAL_UART_Receive_IT+0x94>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d01f      	beq.n	8005e8c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d018      	beq.n	8005e8c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	613b      	str	r3, [r7, #16]
   return(result);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	623b      	str	r3, [r7, #32]
 8005e7a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	69f9      	ldr	r1, [r7, #28]
 8005e7e:	6a3a      	ldr	r2, [r7, #32]
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e6      	bne.n	8005e5a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f001 f8b0 	bl	8006ff8 <UART_Start_Receive_IT>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	e000      	b.n	8005e9e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e9c:	2302      	movs	r3, #2
  }
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3728      	adds	r7, #40	@ 0x28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40008000 	.word	0x40008000

08005eac <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b0a2      	sub	sp, #136	@ 0x88
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eca:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8005ece:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005edc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ede:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ee2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005eea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e4      	bne.n	8005eba <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e5      	bne.n	8005ef0 <HAL_UART_Abort_IT+0x44>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d118      	bne.n	8005f5e <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e6      	bne.n	8005f2c <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00f      	beq.n	8005f86 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f70:	2b80      	cmp	r3, #128	@ 0x80
 8005f72:	d104      	bne.n	8005f7e <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f78:	4a5e      	ldr	r2, [pc, #376]	@ (80060f4 <HAL_UART_Abort_IT+0x248>)
 8005f7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f7c:	e003      	b.n	8005f86 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f82:	2200      	movs	r2, #0
 8005f84:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00f      	beq.n	8005fae <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	d104      	bne.n	8005fa6 <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fa0:	4a55      	ldr	r2, [pc, #340]	@ (80060f8 <HAL_UART_Abort_IT+0x24c>)
 8005fa2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fa4:	e003      	b.n	8005fae <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005faa:	2200      	movs	r2, #0
 8005fac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb8:	2b80      	cmp	r3, #128	@ 0x80
 8005fba:	d12d      	bne.n	8006018 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	623b      	str	r3, [r7, #32]
   return(result);
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005fdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e5      	bne.n	8005fbc <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00f      	beq.n	8006018 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fd f965 	bl	80032cc <HAL_DMA_Abort_IT>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600c:	2200      	movs	r2, #0
 800600e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006010:	e002      	b.n	8006018 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006022:	2b40      	cmp	r3, #64	@ 0x40
 8006024:	d130      	bne.n	8006088 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	60fb      	str	r3, [r7, #12]
   return(result);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800603c:	673b      	str	r3, [r7, #112]	@ 0x70
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3308      	adds	r3, #8
 8006044:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006046:	61fa      	str	r2, [r7, #28]
 8006048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	69b9      	ldr	r1, [r7, #24]
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	617b      	str	r3, [r7, #20]
   return(result);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e5      	bne.n	8006026 <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605e:	2b00      	cmp	r3, #0
 8006060:	d012      	beq.n	8006088 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd f930 	bl	80032cc <HAL_DMA_Abort_IT>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006076:	2200      	movs	r2, #0
 8006078:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 800607a:	2301      	movs	r3, #1
 800607c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006080:	e002      	b.n	8006088 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8006088:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800608c:	2b01      	cmp	r3, #1
 800608e:	d12c      	bne.n	80060ea <HAL_UART_Abort_IT+0x23e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->RxXferCount = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	669a      	str	r2, [r3, #104]	@ 0x68
    huart->TxISR = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	220f      	movs	r2, #15
 80060ba:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	8b1b      	ldrh	r3, [r3, #24]
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0208 	orr.w	r2, r2, #8
 80060cc:	b292      	uxth	r2, r2
 80060ce:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fb07 	bl	80066f8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3788      	adds	r7, #136	@ 0x88
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	08007279 	.word	0x08007279
 80060f8:	080072e5 	.word	0x080072e5

080060fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b0ba      	sub	sp, #232	@ 0xe8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006122:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006126:	f640 030f 	movw	r3, #2063	@ 0x80f
 800612a:	4013      	ands	r3, r2
 800612c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d115      	bne.n	8006164 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00f      	beq.n	8006164 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d009      	beq.n	8006164 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 82ae 	beq.w	80066b6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
      }
      return;
 8006162:	e2a8      	b.n	80066b6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8117 	beq.w	800639c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800616e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800617a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800617e:	4b85      	ldr	r3, [pc, #532]	@ (8006394 <HAL_UART_IRQHandler+0x298>)
 8006180:	4013      	ands	r3, r2
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 810a 	beq.w	800639c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d011      	beq.n	80061b8 <HAL_UART_IRQHandler+0xbc>
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00b      	beq.n	80061b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2201      	movs	r2, #1
 80061a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061ae:	f043 0201 	orr.w	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d011      	beq.n	80061e8 <HAL_UART_IRQHandler+0xec>
 80061c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2202      	movs	r2, #2
 80061d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061de:	f043 0204 	orr.w	r2, r3, #4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d011      	beq.n	8006218 <HAL_UART_IRQHandler+0x11c>
 80061f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2204      	movs	r2, #4
 8006206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800620e:	f043 0202 	orr.w	r2, r3, #2
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d017      	beq.n	8006254 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d105      	bne.n	800623c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006234:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2208      	movs	r2, #8
 8006242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800624a:	f043 0208 	orr.w	r2, r3, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800625c:	2b00      	cmp	r3, #0
 800625e:	d012      	beq.n	8006286 <HAL_UART_IRQHandler+0x18a>
 8006260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006264:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00c      	beq.n	8006286 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800627c:	f043 0220 	orr.w	r2, r3, #32
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 8214 	beq.w	80066ba <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00d      	beq.n	80062ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800629e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ce:	2b40      	cmp	r3, #64	@ 0x40
 80062d0:	d005      	beq.n	80062de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d04f      	beq.n	800637e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 ff50 	bl	8007184 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ee:	2b40      	cmp	r3, #64	@ 0x40
 80062f0:	d141      	bne.n	8006376 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800630c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800631e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800632a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1d9      	bne.n	80062f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006342:	2b00      	cmp	r3, #0
 8006344:	d013      	beq.n	800636e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800634a:	4a13      	ldr	r2, [pc, #76]	@ (8006398 <HAL_UART_IRQHandler+0x29c>)
 800634c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006352:	4618      	mov	r0, r3
 8006354:	f7fc ffba 	bl	80032cc <HAL_DMA_Abort_IT>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d017      	beq.n	800638e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006368:	4610      	mov	r0, r2
 800636a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636c:	e00f      	b.n	800638e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9b8 	bl	80066e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	e00b      	b.n	800638e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9b4 	bl	80066e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	e007      	b.n	800638e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f9b0 	bl	80066e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800638c:	e195      	b.n	80066ba <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638e:	bf00      	nop
    return;
 8006390:	e193      	b.n	80066ba <HAL_UART_IRQHandler+0x5be>
 8006392:	bf00      	nop
 8006394:	04000120 	.word	0x04000120
 8006398:	0800724d 	.word	0x0800724d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	f040 814e 	bne.w	8006642 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8147 	beq.w	8006642 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8140 	beq.w	8006642 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2210      	movs	r2, #16
 80063c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d4:	2b40      	cmp	r3, #64	@ 0x40
 80063d6:	f040 80b8 	bne.w	800654a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 8167 	beq.w	80066be <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063fa:	429a      	cmp	r2, r3
 80063fc:	f080 815f 	bcs.w	80066be <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006406:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 8086 	bne.w	8006528 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006446:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800644a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006452:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800645e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1da      	bne.n	800641c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3308      	adds	r3, #8
 800646c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3308      	adds	r3, #8
 8006486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800648a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800648e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006492:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800649c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e1      	bne.n	8006466 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3308      	adds	r3, #8
 80064a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e3      	bne.n	80064a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064f8:	f023 0310 	bic.w	r3, r3, #16
 80064fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800650a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800650c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006510:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e4      	bne.n	80064e8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006522:	4618      	mov	r0, r3
 8006524:	f7fc fe94 	bl	8003250 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800653a:	b29b      	uxth	r3, r3
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	b29b      	uxth	r3, r3
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f8e2 	bl	800670c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006548:	e0b9      	b.n	80066be <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006556:	b29b      	uxth	r3, r3
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80ab 	beq.w	80066c2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800656c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80a6 	beq.w	80066c2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006586:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800658a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006598:	647b      	str	r3, [r7, #68]	@ 0x44
 800659a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800659e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e4      	bne.n	8006576 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3308      	adds	r3, #8
 80065b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	623b      	str	r3, [r7, #32]
   return(result);
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3308      	adds	r3, #8
 80065cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80065d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e3      	bne.n	80065ac <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	60fb      	str	r3, [r7, #12]
   return(result);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f023 0310 	bic.w	r3, r3, #16
 800660c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	69b9      	ldr	r1, [r7, #24]
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	617b      	str	r3, [r7, #20]
   return(result);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e4      	bne.n	80065f8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2202      	movs	r2, #2
 8006632:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f866 	bl	800670c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006640:	e03f      	b.n	80066c2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00e      	beq.n	800666c <HAL_UART_IRQHandler+0x570>
 800664e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006662:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 f863 	bl	8007730 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800666a:	e02d      	b.n	80066c8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00e      	beq.n	8006696 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800667c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01c      	beq.n	80066c6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
    }
    return;
 8006694:	e017      	b.n	80066c6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d012      	beq.n	80066c8 <HAL_UART_IRQHandler+0x5cc>
 80066a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fe58 	bl	8007364 <UART_EndTransmit_IT>
    return;
 80066b4:	e008      	b.n	80066c8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80066b6:	bf00      	nop
 80066b8:	e006      	b.n	80066c8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80066ba:	bf00      	nop
 80066bc:	e004      	b.n	80066c8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80066be:	bf00      	nop
 80066c0:	e002      	b.n	80066c8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80066c2:	bf00      	nop
 80066c4:	e000      	b.n	80066c8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80066c6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80066c8:	37e8      	adds	r7, #232	@ 0xe8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop

080066d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006728:	b08a      	sub	sp, #40	@ 0x28
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	431a      	orrs	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	431a      	orrs	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	4313      	orrs	r3, r2
 800674a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4ba4      	ldr	r3, [pc, #656]	@ (80069e4 <UART_SetConfig+0x2c0>)
 8006754:	4013      	ands	r3, r2
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800675c:	430b      	orrs	r3, r1
 800675e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a99      	ldr	r2, [pc, #612]	@ (80069e8 <UART_SetConfig+0x2c4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d004      	beq.n	8006790 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678c:	4313      	orrs	r3, r2
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a0:	430a      	orrs	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a90      	ldr	r2, [pc, #576]	@ (80069ec <UART_SetConfig+0x2c8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d126      	bne.n	80067fc <UART_SetConfig+0xd8>
 80067ae:	4b90      	ldr	r3, [pc, #576]	@ (80069f0 <UART_SetConfig+0x2cc>)
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d81b      	bhi.n	80067f4 <UART_SetConfig+0xd0>
 80067bc:	a201      	add	r2, pc, #4	@ (adr r2, 80067c4 <UART_SetConfig+0xa0>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080067d5 	.word	0x080067d5
 80067c8:	080067e5 	.word	0x080067e5
 80067cc:	080067dd 	.word	0x080067dd
 80067d0:	080067ed 	.word	0x080067ed
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067da:	e116      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80067dc:	2302      	movs	r3, #2
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e2:	e112      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ea:	e10e      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067f2:	e10a      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067fa:	e106      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a7c      	ldr	r2, [pc, #496]	@ (80069f4 <UART_SetConfig+0x2d0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d138      	bne.n	8006878 <UART_SetConfig+0x154>
 8006806:	4b7a      	ldr	r3, [pc, #488]	@ (80069f0 <UART_SetConfig+0x2cc>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800680c:	f003 030c 	and.w	r3, r3, #12
 8006810:	2b0c      	cmp	r3, #12
 8006812:	d82d      	bhi.n	8006870 <UART_SetConfig+0x14c>
 8006814:	a201      	add	r2, pc, #4	@ (adr r2, 800681c <UART_SetConfig+0xf8>)
 8006816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681a:	bf00      	nop
 800681c:	08006851 	.word	0x08006851
 8006820:	08006871 	.word	0x08006871
 8006824:	08006871 	.word	0x08006871
 8006828:	08006871 	.word	0x08006871
 800682c:	08006861 	.word	0x08006861
 8006830:	08006871 	.word	0x08006871
 8006834:	08006871 	.word	0x08006871
 8006838:	08006871 	.word	0x08006871
 800683c:	08006859 	.word	0x08006859
 8006840:	08006871 	.word	0x08006871
 8006844:	08006871 	.word	0x08006871
 8006848:	08006871 	.word	0x08006871
 800684c:	08006869 	.word	0x08006869
 8006850:	2300      	movs	r3, #0
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006856:	e0d8      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006858:	2302      	movs	r3, #2
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685e:	e0d4      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006860:	2304      	movs	r3, #4
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006866:	e0d0      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006868:	2308      	movs	r3, #8
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800686e:	e0cc      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006870:	2310      	movs	r3, #16
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006876:	e0c8      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a5e      	ldr	r2, [pc, #376]	@ (80069f8 <UART_SetConfig+0x2d4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d125      	bne.n	80068ce <UART_SetConfig+0x1aa>
 8006882:	4b5b      	ldr	r3, [pc, #364]	@ (80069f0 <UART_SetConfig+0x2cc>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006888:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800688c:	2b30      	cmp	r3, #48	@ 0x30
 800688e:	d016      	beq.n	80068be <UART_SetConfig+0x19a>
 8006890:	2b30      	cmp	r3, #48	@ 0x30
 8006892:	d818      	bhi.n	80068c6 <UART_SetConfig+0x1a2>
 8006894:	2b20      	cmp	r3, #32
 8006896:	d00a      	beq.n	80068ae <UART_SetConfig+0x18a>
 8006898:	2b20      	cmp	r3, #32
 800689a:	d814      	bhi.n	80068c6 <UART_SetConfig+0x1a2>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <UART_SetConfig+0x182>
 80068a0:	2b10      	cmp	r3, #16
 80068a2:	d008      	beq.n	80068b6 <UART_SetConfig+0x192>
 80068a4:	e00f      	b.n	80068c6 <UART_SetConfig+0x1a2>
 80068a6:	2300      	movs	r3, #0
 80068a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ac:	e0ad      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80068ae:	2302      	movs	r3, #2
 80068b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068b4:	e0a9      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80068b6:	2304      	movs	r3, #4
 80068b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068bc:	e0a5      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80068be:	2308      	movs	r3, #8
 80068c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068c4:	e0a1      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80068c6:	2310      	movs	r3, #16
 80068c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068cc:	e09d      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a4a      	ldr	r2, [pc, #296]	@ (80069fc <UART_SetConfig+0x2d8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d125      	bne.n	8006924 <UART_SetConfig+0x200>
 80068d8:	4b45      	ldr	r3, [pc, #276]	@ (80069f0 <UART_SetConfig+0x2cc>)
 80068da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80068e4:	d016      	beq.n	8006914 <UART_SetConfig+0x1f0>
 80068e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068e8:	d818      	bhi.n	800691c <UART_SetConfig+0x1f8>
 80068ea:	2b80      	cmp	r3, #128	@ 0x80
 80068ec:	d00a      	beq.n	8006904 <UART_SetConfig+0x1e0>
 80068ee:	2b80      	cmp	r3, #128	@ 0x80
 80068f0:	d814      	bhi.n	800691c <UART_SetConfig+0x1f8>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <UART_SetConfig+0x1d8>
 80068f6:	2b40      	cmp	r3, #64	@ 0x40
 80068f8:	d008      	beq.n	800690c <UART_SetConfig+0x1e8>
 80068fa:	e00f      	b.n	800691c <UART_SetConfig+0x1f8>
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006902:	e082      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006904:	2302      	movs	r3, #2
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800690a:	e07e      	b.n	8006a0a <UART_SetConfig+0x2e6>
 800690c:	2304      	movs	r3, #4
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006912:	e07a      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006914:	2308      	movs	r3, #8
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800691a:	e076      	b.n	8006a0a <UART_SetConfig+0x2e6>
 800691c:	2310      	movs	r3, #16
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006922:	e072      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a35      	ldr	r2, [pc, #212]	@ (8006a00 <UART_SetConfig+0x2dc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d12a      	bne.n	8006984 <UART_SetConfig+0x260>
 800692e:	4b30      	ldr	r3, [pc, #192]	@ (80069f0 <UART_SetConfig+0x2cc>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006934:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006938:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800693c:	d01a      	beq.n	8006974 <UART_SetConfig+0x250>
 800693e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006942:	d81b      	bhi.n	800697c <UART_SetConfig+0x258>
 8006944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006948:	d00c      	beq.n	8006964 <UART_SetConfig+0x240>
 800694a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800694e:	d815      	bhi.n	800697c <UART_SetConfig+0x258>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <UART_SetConfig+0x238>
 8006954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006958:	d008      	beq.n	800696c <UART_SetConfig+0x248>
 800695a:	e00f      	b.n	800697c <UART_SetConfig+0x258>
 800695c:	2300      	movs	r3, #0
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006962:	e052      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006964:	2302      	movs	r3, #2
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800696a:	e04e      	b.n	8006a0a <UART_SetConfig+0x2e6>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006972:	e04a      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800697a:	e046      	b.n	8006a0a <UART_SetConfig+0x2e6>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006982:	e042      	b.n	8006a0a <UART_SetConfig+0x2e6>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a17      	ldr	r2, [pc, #92]	@ (80069e8 <UART_SetConfig+0x2c4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d13a      	bne.n	8006a04 <UART_SetConfig+0x2e0>
 800698e:	4b18      	ldr	r3, [pc, #96]	@ (80069f0 <UART_SetConfig+0x2cc>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006994:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006998:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800699c:	d01a      	beq.n	80069d4 <UART_SetConfig+0x2b0>
 800699e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069a2:	d81b      	bhi.n	80069dc <UART_SetConfig+0x2b8>
 80069a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069a8:	d00c      	beq.n	80069c4 <UART_SetConfig+0x2a0>
 80069aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069ae:	d815      	bhi.n	80069dc <UART_SetConfig+0x2b8>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <UART_SetConfig+0x298>
 80069b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b8:	d008      	beq.n	80069cc <UART_SetConfig+0x2a8>
 80069ba:	e00f      	b.n	80069dc <UART_SetConfig+0x2b8>
 80069bc:	2300      	movs	r3, #0
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069c2:	e022      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80069c4:	2302      	movs	r3, #2
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ca:	e01e      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80069cc:	2304      	movs	r3, #4
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069d2:	e01a      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80069d4:	2308      	movs	r3, #8
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069da:	e016      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80069dc:	2310      	movs	r3, #16
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069e2:	e012      	b.n	8006a0a <UART_SetConfig+0x2e6>
 80069e4:	efff69f3 	.word	0xefff69f3
 80069e8:	40008000 	.word	0x40008000
 80069ec:	40013800 	.word	0x40013800
 80069f0:	40021000 	.word	0x40021000
 80069f4:	40004400 	.word	0x40004400
 80069f8:	40004800 	.word	0x40004800
 80069fc:	40004c00 	.word	0x40004c00
 8006a00:	40005000 	.word	0x40005000
 8006a04:	2310      	movs	r3, #16
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a9f      	ldr	r2, [pc, #636]	@ (8006c8c <UART_SetConfig+0x568>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d17a      	bne.n	8006b0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d824      	bhi.n	8006a66 <UART_SetConfig+0x342>
 8006a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a24 <UART_SetConfig+0x300>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006a49 	.word	0x08006a49
 8006a28:	08006a67 	.word	0x08006a67
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a67 	.word	0x08006a67
 8006a34:	08006a57 	.word	0x08006a57
 8006a38:	08006a67 	.word	0x08006a67
 8006a3c:	08006a67 	.word	0x08006a67
 8006a40:	08006a67 	.word	0x08006a67
 8006a44:	08006a5f 	.word	0x08006a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a48:	f7fd fcfa 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8006a4c:	61f8      	str	r0, [r7, #28]
        break;
 8006a4e:	e010      	b.n	8006a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a50:	4b8f      	ldr	r3, [pc, #572]	@ (8006c90 <UART_SetConfig+0x56c>)
 8006a52:	61fb      	str	r3, [r7, #28]
        break;
 8006a54:	e00d      	b.n	8006a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a56:	f7fd fc5b 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 8006a5a:	61f8      	str	r0, [r7, #28]
        break;
 8006a5c:	e009      	b.n	8006a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a62:	61fb      	str	r3, [r7, #28]
        break;
 8006a64:	e005      	b.n	8006a72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80fb 	beq.w	8006c70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	4413      	add	r3, r2
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d305      	bcc.n	8006a96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d903      	bls.n	8006a9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a9c:	e0e8      	b.n	8006c70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	4615      	mov	r5, r2
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	022b      	lsls	r3, r5, #8
 8006ab0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ab4:	0222      	lsls	r2, r4, #8
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	6849      	ldr	r1, [r1, #4]
 8006aba:	0849      	lsrs	r1, r1, #1
 8006abc:	2000      	movs	r0, #0
 8006abe:	4688      	mov	r8, r1
 8006ac0:	4681      	mov	r9, r0
 8006ac2:	eb12 0a08 	adds.w	sl, r2, r8
 8006ac6:	eb43 0b09 	adc.w	fp, r3, r9
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad8:	4650      	mov	r0, sl
 8006ada:	4659      	mov	r1, fp
 8006adc:	f7f9 ff62 	bl	80009a4 <__aeabi_uldivmod>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aee:	d308      	bcc.n	8006b02 <UART_SetConfig+0x3de>
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006af6:	d204      	bcs.n	8006b02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	60da      	str	r2, [r3, #12]
 8006b00:	e0b6      	b.n	8006c70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b08:	e0b2      	b.n	8006c70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b12:	d15e      	bne.n	8006bd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d828      	bhi.n	8006b6e <UART_SetConfig+0x44a>
 8006b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b24 <UART_SetConfig+0x400>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	08006b6f 	.word	0x08006b6f
 8006b34:	08006b5f 	.word	0x08006b5f
 8006b38:	08006b6f 	.word	0x08006b6f
 8006b3c:	08006b6f 	.word	0x08006b6f
 8006b40:	08006b6f 	.word	0x08006b6f
 8006b44:	08006b67 	.word	0x08006b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b48:	f7fd fc7a 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8006b4c:	61f8      	str	r0, [r7, #28]
        break;
 8006b4e:	e014      	b.n	8006b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b50:	f7fd fc8c 	bl	800446c <HAL_RCC_GetPCLK2Freq>
 8006b54:	61f8      	str	r0, [r7, #28]
        break;
 8006b56:	e010      	b.n	8006b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b58:	4b4d      	ldr	r3, [pc, #308]	@ (8006c90 <UART_SetConfig+0x56c>)
 8006b5a:	61fb      	str	r3, [r7, #28]
        break;
 8006b5c:	e00d      	b.n	8006b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5e:	f7fd fbd7 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 8006b62:	61f8      	str	r0, [r7, #28]
        break;
 8006b64:	e009      	b.n	8006b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b6a:	61fb      	str	r3, [r7, #28]
        break;
 8006b6c:	e005      	b.n	8006b7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d077      	beq.n	8006c70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	005a      	lsls	r2, r3, #1
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	441a      	add	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b0f      	cmp	r3, #15
 8006b9a:	d916      	bls.n	8006bca <UART_SetConfig+0x4a6>
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba2:	d212      	bcs.n	8006bca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f023 030f 	bic.w	r3, r3, #15
 8006bac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	8afb      	ldrh	r3, [r7, #22]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	8afa      	ldrh	r2, [r7, #22]
 8006bc6:	60da      	str	r2, [r3, #12]
 8006bc8:	e052      	b.n	8006c70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006bd0:	e04e      	b.n	8006c70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d827      	bhi.n	8006c2a <UART_SetConfig+0x506>
 8006bda:	a201      	add	r2, pc, #4	@ (adr r2, 8006be0 <UART_SetConfig+0x4bc>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006c05 	.word	0x08006c05
 8006be4:	08006c0d 	.word	0x08006c0d
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	08006c2b 	.word	0x08006c2b
 8006bf0:	08006c1b 	.word	0x08006c1b
 8006bf4:	08006c2b 	.word	0x08006c2b
 8006bf8:	08006c2b 	.word	0x08006c2b
 8006bfc:	08006c2b 	.word	0x08006c2b
 8006c00:	08006c23 	.word	0x08006c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c04:	f7fd fc1c 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8006c08:	61f8      	str	r0, [r7, #28]
        break;
 8006c0a:	e014      	b.n	8006c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c0c:	f7fd fc2e 	bl	800446c <HAL_RCC_GetPCLK2Freq>
 8006c10:	61f8      	str	r0, [r7, #28]
        break;
 8006c12:	e010      	b.n	8006c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c14:	4b1e      	ldr	r3, [pc, #120]	@ (8006c90 <UART_SetConfig+0x56c>)
 8006c16:	61fb      	str	r3, [r7, #28]
        break;
 8006c18:	e00d      	b.n	8006c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1a:	f7fd fb79 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 8006c1e:	61f8      	str	r0, [r7, #28]
        break;
 8006c20:	e009      	b.n	8006c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c26:	61fb      	str	r3, [r7, #28]
        break;
 8006c28:	e005      	b.n	8006c36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c34:	bf00      	nop
    }

    if (pclk != 0U)
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d019      	beq.n	8006c70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	085a      	lsrs	r2, r3, #1
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	441a      	add	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b0f      	cmp	r3, #15
 8006c54:	d909      	bls.n	8006c6a <UART_SetConfig+0x546>
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c5c:	d205      	bcs.n	8006c6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60da      	str	r2, [r3, #12]
 8006c68:	e002      	b.n	8006c70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3728      	adds	r7, #40	@ 0x28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40008000 	.word	0x40008000
 8006c90:	00f42400 	.word	0x00f42400

08006c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca0:	f003 0308 	and.w	r3, r3, #8
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01a      	beq.n	8006daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d92:	d10a      	bne.n	8006daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b098      	sub	sp, #96	@ 0x60
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006de8:	f7fb fe42 	bl	8002a70 <HAL_GetTick>
 8006dec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d12e      	bne.n	8006e5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e04:	2200      	movs	r2, #0
 8006e06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f88c 	bl	8006f28 <UART_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d021      	beq.n	8006e5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e062      	b.n	8006f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d149      	bne.n	8006efc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e70:	2200      	movs	r2, #0
 8006e72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f856 	bl	8006f28 <UART_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d03c      	beq.n	8006efc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e6      	bne.n	8006e82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0301 	bic.w	r3, r3, #1
 8006eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ed4:	61fa      	str	r2, [r7, #28]
 8006ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	69b9      	ldr	r1, [r7, #24]
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e5      	bne.n	8006eb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e011      	b.n	8006f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3758      	adds	r7, #88	@ 0x58
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	4613      	mov	r3, r2
 8006f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f38:	e049      	b.n	8006fce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d045      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f42:	f7fb fd95 	bl	8002a70 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d302      	bcc.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e048      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d031      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d110      	bne.n	8006f9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f8ff 	bl	8007184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e029      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa8:	d111      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f8e5 	bl	8007184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e00f      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69da      	ldr	r2, [r3, #28]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	bf0c      	ite	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	2300      	movne	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d0a6      	beq.n	8006f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b097      	sub	sp, #92	@ 0x5c
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	88fa      	ldrh	r2, [r7, #6]
 8007010:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800702a:	d10e      	bne.n	800704a <UART_Start_Receive_IT+0x52>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <UART_Start_Receive_IT+0x48>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800703a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800703e:	e02d      	b.n	800709c <UART_Start_Receive_IT+0xa4>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	22ff      	movs	r2, #255	@ 0xff
 8007044:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007048:	e028      	b.n	800709c <UART_Start_Receive_IT+0xa4>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10d      	bne.n	800706e <UART_Start_Receive_IT+0x76>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <UART_Start_Receive_IT+0x6c>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	22ff      	movs	r2, #255	@ 0xff
 800705e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007062:	e01b      	b.n	800709c <UART_Start_Receive_IT+0xa4>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	227f      	movs	r2, #127	@ 0x7f
 8007068:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800706c:	e016      	b.n	800709c <UART_Start_Receive_IT+0xa4>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007076:	d10d      	bne.n	8007094 <UART_Start_Receive_IT+0x9c>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <UART_Start_Receive_IT+0x92>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	227f      	movs	r2, #127	@ 0x7f
 8007084:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007088:	e008      	b.n	800709c <UART_Start_Receive_IT+0xa4>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	223f      	movs	r2, #63	@ 0x3f
 800708e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007092:	e003      	b.n	800709c <UART_Start_Receive_IT+0xa4>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2222      	movs	r2, #34	@ 0x22
 80070a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3308      	adds	r3, #8
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3308      	adds	r3, #8
 80070ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80070ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80070da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e5      	bne.n	80070ac <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e8:	d107      	bne.n	80070fa <UART_Start_Receive_IT+0x102>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d103      	bne.n	80070fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4a21      	ldr	r2, [pc, #132]	@ (800717c <UART_Start_Receive_IT+0x184>)
 80070f6:	669a      	str	r2, [r3, #104]	@ 0x68
 80070f8:	e002      	b.n	8007100 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4a20      	ldr	r2, [pc, #128]	@ (8007180 <UART_Start_Receive_IT+0x188>)
 80070fe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d019      	beq.n	800713c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800711c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007126:	637b      	str	r3, [r7, #52]	@ 0x34
 8007128:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800712c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e6      	bne.n	8007108 <UART_Start_Receive_IT+0x110>
 800713a:	e018      	b.n	800716e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	613b      	str	r3, [r7, #16]
   return(result);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f043 0320 	orr.w	r3, r3, #32
 8007150:	653b      	str	r3, [r7, #80]	@ 0x50
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800715a:	623b      	str	r3, [r7, #32]
 800715c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	69f9      	ldr	r1, [r7, #28]
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	61bb      	str	r3, [r7, #24]
   return(result);
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e6      	bne.n	800713c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	375c      	adds	r7, #92	@ 0x5c
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	08007575 	.word	0x08007575
 8007180:	080073b9 	.word	0x080073b9

08007184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007184:	b480      	push	{r7}
 8007186:	b095      	sub	sp, #84	@ 0x54
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e6      	bne.n	800718c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f023 0301 	bic.w	r3, r3, #1
 80071d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e5      	bne.n	80071be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d118      	bne.n	800722c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	60bb      	str	r3, [r7, #8]
   return(result);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f023 0310 	bic.w	r3, r3, #16
 800720e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6979      	ldr	r1, [r7, #20]
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	613b      	str	r3, [r7, #16]
   return(result);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e6      	bne.n	80071fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007240:	bf00      	nop
 8007242:	3754      	adds	r7, #84	@ 0x54
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007258:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff fa3a 	bl	80066e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728a:	2200      	movs	r2, #0
 800728c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729c:	2b00      	cmp	r3, #0
 800729e:	d11d      	bne.n	80072dc <UART_DMATxAbortCallback+0x64>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	220f      	movs	r2, #15
 80072be:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff fa0f 	bl	80066f8 <HAL_UART_AbortCpltCallback>
 80072da:	e000      	b.n	80072de <UART_DMATxAbortCallback+0x66>
      return;
 80072dc:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f0:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f6:	2200      	movs	r2, #0
 80072f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007308:	2b00      	cmp	r3, #0
 800730a:	d127      	bne.n	800735c <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	220f      	movs	r2, #15
 800732a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	8b1b      	ldrh	r3, [r3, #24]
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0208 	orr.w	r2, r2, #8
 800733c:	b292      	uxth	r2, r2
 800733e:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff f9cf 	bl	80066f8 <HAL_UART_AbortCpltCallback>
 800735a:	e000      	b.n	800735e <UART_DMARxAbortCallback+0x7a>
      return;
 800735c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	60bb      	str	r3, [r7, #8]
   return(result);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	61bb      	str	r3, [r7, #24]
 800738c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6979      	ldr	r1, [r7, #20]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	613b      	str	r3, [r7, #16]
   return(result);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e6      	bne.n	800736c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff f990 	bl	80066d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073b0:	bf00      	nop
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b09c      	sub	sp, #112	@ 0x70
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073d0:	2b22      	cmp	r3, #34	@ 0x22
 80073d2:	f040 80be 	bne.w	8007552 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80073dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80073e4:	b2d9      	uxtb	r1, r3
 80073e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f0:	400a      	ands	r2, r1
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 80a3 	bne.w	8007566 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800742e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800743e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007440:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007444:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800744c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e6      	bne.n	8007420 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007464:	f023 0301 	bic.w	r3, r3, #1
 8007468:	667b      	str	r3, [r7, #100]	@ 0x64
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3308      	adds	r3, #8
 8007470:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007472:	647a      	str	r2, [r7, #68]	@ 0x44
 8007474:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007478:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e5      	bne.n	8007452 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a34      	ldr	r2, [pc, #208]	@ (8007570 <UART_RxISR_8BIT+0x1b8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d01f      	beq.n	80074e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d018      	beq.n	80074e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	623b      	str	r3, [r7, #32]
   return(result);
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e6      	bne.n	80074b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d12e      	bne.n	800754a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0310 	bic.w	r3, r3, #16
 8007506:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	69b9      	ldr	r1, [r7, #24]
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	617b      	str	r3, [r7, #20]
   return(result);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e6      	bne.n	80074f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f003 0310 	and.w	r3, r3, #16
 800752e:	2b10      	cmp	r3, #16
 8007530:	d103      	bne.n	800753a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2210      	movs	r2, #16
 8007538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff f8e2 	bl	800670c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007548:	e00d      	b.n	8007566 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7fa f9ee 	bl	800192c <HAL_UART_RxCpltCallback>
}
 8007550:	e009      	b.n	8007566 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	8b1b      	ldrh	r3, [r3, #24]
 8007558:	b29a      	uxth	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0208 	orr.w	r2, r2, #8
 8007562:	b292      	uxth	r2, r2
 8007564:	831a      	strh	r2, [r3, #24]
}
 8007566:	bf00      	nop
 8007568:	3770      	adds	r7, #112	@ 0x70
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	40008000 	.word	0x40008000

08007574 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b09c      	sub	sp, #112	@ 0x70
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007582:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758c:	2b22      	cmp	r3, #34	@ 0x22
 800758e:	f040 80be 	bne.w	800770e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007598:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80075a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80075a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80075aa:	4013      	ands	r3, r2
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b6:	1c9a      	adds	r2, r3, #2
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f040 80a3 	bne.w	8007722 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80075ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80075fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007600:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e6      	bne.n	80075dc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	663b      	str	r3, [r7, #96]	@ 0x60
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800762e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a34      	ldr	r2, [pc, #208]	@ (800772c <UART_RxISR_16BIT+0x1b8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01f      	beq.n	80076a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d018      	beq.n	80076a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	61fb      	str	r3, [r7, #28]
   return(result);
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007682:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800768c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800768e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d12e      	bne.n	8007706 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f023 0310 	bic.w	r3, r3, #16
 80076c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6979      	ldr	r1, [r7, #20]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	613b      	str	r3, [r7, #16]
   return(result);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e6      	bne.n	80076ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	f003 0310 	and.w	r3, r3, #16
 80076ea:	2b10      	cmp	r3, #16
 80076ec:	d103      	bne.n	80076f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2210      	movs	r2, #16
 80076f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff f804 	bl	800670c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007704:	e00d      	b.n	8007722 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fa f910 	bl	800192c <HAL_UART_RxCpltCallback>
}
 800770c:	e009      	b.n	8007722 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	8b1b      	ldrh	r3, [r3, #24]
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0208 	orr.w	r2, r2, #8
 800771e:	b292      	uxth	r2, r2
 8007720:	831a      	strh	r2, [r3, #24]
}
 8007722:	bf00      	nop
 8007724:	3770      	adds	r7, #112	@ 0x70
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	40008000 	.word	0x40008000

08007730 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <memset>:
 8007744:	4402      	add	r2, r0
 8007746:	4603      	mov	r3, r0
 8007748:	4293      	cmp	r3, r2
 800774a:	d100      	bne.n	800774e <memset+0xa>
 800774c:	4770      	bx	lr
 800774e:	f803 1b01 	strb.w	r1, [r3], #1
 8007752:	e7f9      	b.n	8007748 <memset+0x4>

08007754 <__libc_init_array>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4d0d      	ldr	r5, [pc, #52]	@ (800778c <__libc_init_array+0x38>)
 8007758:	4c0d      	ldr	r4, [pc, #52]	@ (8007790 <__libc_init_array+0x3c>)
 800775a:	1b64      	subs	r4, r4, r5
 800775c:	10a4      	asrs	r4, r4, #2
 800775e:	2600      	movs	r6, #0
 8007760:	42a6      	cmp	r6, r4
 8007762:	d109      	bne.n	8007778 <__libc_init_array+0x24>
 8007764:	4d0b      	ldr	r5, [pc, #44]	@ (8007794 <__libc_init_array+0x40>)
 8007766:	4c0c      	ldr	r4, [pc, #48]	@ (8007798 <__libc_init_array+0x44>)
 8007768:	f000 f818 	bl	800779c <_init>
 800776c:	1b64      	subs	r4, r4, r5
 800776e:	10a4      	asrs	r4, r4, #2
 8007770:	2600      	movs	r6, #0
 8007772:	42a6      	cmp	r6, r4
 8007774:	d105      	bne.n	8007782 <__libc_init_array+0x2e>
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	f855 3b04 	ldr.w	r3, [r5], #4
 800777c:	4798      	blx	r3
 800777e:	3601      	adds	r6, #1
 8007780:	e7ee      	b.n	8007760 <__libc_init_array+0xc>
 8007782:	f855 3b04 	ldr.w	r3, [r5], #4
 8007786:	4798      	blx	r3
 8007788:	3601      	adds	r6, #1
 800778a:	e7f2      	b.n	8007772 <__libc_init_array+0x1e>
 800778c:	08007814 	.word	0x08007814
 8007790:	08007814 	.word	0x08007814
 8007794:	08007814 	.word	0x08007814
 8007798:	08007818 	.word	0x08007818

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr
