
stmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007e7c  08007e7c  00008e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f90  08007f90  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007f90  08007f90  00008f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f98  08007f98  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f98  08007f98  00008f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f9c  08007f9c  00008f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007fa0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e7c  20000068  08008008  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ee4  08008008  00009ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001633b  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4b  00000000  00000000  0001f3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00022320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f15  00000000  00000000  00023680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292e1  00000000  00000000  00024595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cf6  00000000  00000000  0004d876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9f2a  00000000  00000000  0006556c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c8  00000000  00000000  0015f4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00164da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e64 	.word	0x08007e64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08007e64 	.word	0x08007e64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96a 	b.w	8000c90 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	460c      	mov	r4, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14e      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e0:	4694      	mov	ip, r2
 80009e2:	458c      	cmp	ip, r1
 80009e4:	4686      	mov	lr, r0
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	d962      	bls.n	8000ab2 <__udivmoddi4+0xde>
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0320 	rsb	r3, r2, #32
 80009f2:	4091      	lsls	r1, r2
 80009f4:	fa20 f303 	lsr.w	r3, r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fa1f f68c 	uxth.w	r6, ip
 8000a0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a12:	fb07 1114 	mls	r1, r7, r4, r1
 8000a16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1a:	fb04 f106 	mul.w	r1, r4, r6
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a2a:	f080 8112 	bcs.w	8000c52 <__udivmoddi4+0x27e>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 810f 	bls.w	8000c52 <__udivmoddi4+0x27e>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1110 	mls	r1, r7, r0, r1
 8000a46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4a:	fb00 f606 	mul.w	r6, r0, r6
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x94>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5a:	f080 80fc 	bcs.w	8000c56 <__udivmoddi4+0x282>
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	f240 80f9 	bls.w	8000c56 <__udivmoddi4+0x282>
 8000a64:	4463      	add	r3, ip
 8000a66:	3802      	subs	r0, #2
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6e:	2100      	movs	r1, #0
 8000a70:	b11d      	cbz	r5, 8000a7a <__udivmoddi4+0xa6>
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d905      	bls.n	8000a8e <__udivmoddi4+0xba>
 8000a82:	b10d      	cbz	r5, 8000a88 <__udivmoddi4+0xb4>
 8000a84:	e9c5 0100 	strd	r0, r1, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e7f5      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000a8e:	fab3 f183 	clz	r1, r3
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d146      	bne.n	8000b24 <__udivmoddi4+0x150>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xcc>
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	f0c0 80f0 	bcc.w	8000c80 <__udivmoddi4+0x2ac>
 8000aa0:	1a86      	subs	r6, r0, r2
 8000aa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d0e6      	beq.n	8000a7a <__udivmoddi4+0xa6>
 8000aac:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab0:	e7e3      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8090 	bne.w	8000bd8 <__udivmoddi4+0x204>
 8000ab8:	eba1 040c 	sub.w	r4, r1, ip
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa1f f78c 	uxth.w	r7, ip
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ace:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad6:	fb07 f006 	mul.w	r0, r7, r6
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x11c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x11a>
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	f200 80cd 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000aee:	4626      	mov	r6, r4
 8000af0:	1a1c      	subs	r4, r3, r0
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afa:	fb08 4410 	mls	r4, r8, r0, r4
 8000afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b02:	fb00 f707 	mul.w	r7, r0, r7
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x148>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x146>
 8000b14:	429f      	cmp	r7, r3
 8000b16:	f200 80b0 	bhi.w	8000c7a <__udivmoddi4+0x2a6>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	1bdb      	subs	r3, r3, r7
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	e7a5      	b.n	8000a70 <__udivmoddi4+0x9c>
 8000b24:	f1c1 0620 	rsb	r6, r1, #32
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b34:	fa04 f301 	lsl.w	r3, r4, r1
 8000b38:	ea43 030c 	orr.w	r3, r3, ip
 8000b3c:	40f4      	lsrs	r4, r6
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	0c38      	lsrs	r0, r7, #16
 8000b44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b48:	fbb4 fef0 	udiv	lr, r4, r0
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	fb00 441e 	mls	r4, r0, lr, r4
 8000b54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b58:	fb0e f90c 	mul.w	r9, lr, ip
 8000b5c:	45a1      	cmp	r9, r4
 8000b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x1a6>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b6a:	f080 8084 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	f240 8081 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000b74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	eba4 0409 	sub.w	r4, r4, r9
 8000b7e:	fa1f f983 	uxth.w	r9, r3
 8000b82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b86:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x1d2>
 8000b96:	193c      	adds	r4, r7, r4
 8000b98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b9c:	d267      	bcs.n	8000c6e <__udivmoddi4+0x29a>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0x29a>
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	443c      	add	r4, r7
 8000ba6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000baa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	46ce      	mov	lr, r9
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	d351      	bcc.n	8000c5e <__udivmoddi4+0x28a>
 8000bba:	d04e      	beq.n	8000c5a <__udivmoddi4+0x286>
 8000bbc:	b155      	cbz	r5, 8000bd4 <__udivmoddi4+0x200>
 8000bbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bca:	40cb      	lsrs	r3, r1
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	40cc      	lsrs	r4, r1
 8000bd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e750      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	fa24 f303 	lsr.w	r3, r4, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	430c      	orrs	r4, r1
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf4:	fa1f f78c 	uxth.w	r7, ip
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb00 f107 	mul.w	r1, r0, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x24c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c16:	d22c      	bcs.n	8000c72 <__udivmoddi4+0x29e>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d92a      	bls.n	8000c72 <__udivmoddi4+0x29e>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c28:	fb08 3311 	mls	r3, r8, r1, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb01 f307 	mul.w	r3, r1, r7
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x276>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c40:	d213      	bcs.n	8000c6a <__udivmoddi4+0x296>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d911      	bls.n	8000c6a <__udivmoddi4+0x296>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	1ae4      	subs	r4, r4, r3
 8000c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c50:	e739      	b.n	8000ac6 <__udivmoddi4+0xf2>
 8000c52:	4604      	mov	r4, r0
 8000c54:	e6f0      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c56:	4608      	mov	r0, r1
 8000c58:	e706      	b.n	8000a68 <__udivmoddi4+0x94>
 8000c5a:	45c8      	cmp	r8, r9
 8000c5c:	d2ae      	bcs.n	8000bbc <__udivmoddi4+0x1e8>
 8000c5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7a8      	b.n	8000bbc <__udivmoddi4+0x1e8>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	e7ed      	b.n	8000c4a <__udivmoddi4+0x276>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e799      	b.n	8000ba6 <__udivmoddi4+0x1d2>
 8000c72:	4630      	mov	r0, r6
 8000c74:	e7d4      	b.n	8000c20 <__udivmoddi4+0x24c>
 8000c76:	46d6      	mov	lr, sl
 8000c78:	e77f      	b.n	8000b7a <__udivmoddi4+0x1a6>
 8000c7a:	4463      	add	r3, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e74d      	b.n	8000b1c <__udivmoddi4+0x148>
 8000c80:	4606      	mov	r6, r0
 8000c82:	4623      	mov	r3, r4
 8000c84:	4608      	mov	r0, r1
 8000c86:	e70f      	b.n	8000aa8 <__udivmoddi4+0xd4>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	e730      	b.n	8000af0 <__udivmoddi4+0x11c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <__NVIC_SystemReset+0x24>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ca6:	4904      	ldr	r1, [pc, #16]	@ (8000cb8 <__NVIC_SystemReset+0x24>)
 8000ca8:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <__NVIC_SystemReset+0x28>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cae:	f3bf 8f4f 	dsb	sy
}
 8000cb2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <__NVIC_SystemReset+0x20>
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	05fa0004 	.word	0x05fa0004

08000cc0 <checkCRC>:
 */
#include "communication.h"


bool checkCRC()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
    uint8_t sum = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < RX_SIZE - 1; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	e009      	b.n	8000ce4 <checkCRC+0x24>
    {
        sum += Rx_data[i];
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <checkCRC+0x48>)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4413      	add	r3, r2
 8000cdc:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < RX_SIZE - 1; i++)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	ddf2      	ble.n	8000cd0 <checkCRC+0x10>
    }
    return sum == Rx_data[RX_SIZE - 1];
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <checkCRC+0x48>)
 8000cec:	79db      	ldrb	r3, [r3, #7]
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	bf0c      	ite	eq
 8000cf4:	2301      	moveq	r3, #1
 8000cf6:	2300      	movne	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000088 	.word	0x20000088

08000d0c <parseUserInput>:

void parseUserInput()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0

	switch (Rx_data[0])
 8000d12:	4ba6      	ldr	r3, [pc, #664]	@ (8000fac <parseUserInput+0x2a0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b14      	cmp	r3, #20
 8000d18:	f200 81bb 	bhi.w	8001092 <parseUserInput+0x386>
 8000d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d24 <parseUserInput+0x18>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d79 	.word	0x08000d79
 8000d28:	08000d83 	.word	0x08000d83
 8000d2c:	08000dd5 	.word	0x08000dd5
 8000d30:	08001093 	.word	0x08001093
 8000d34:	08001093 	.word	0x08001093
 8000d38:	08000e63 	.word	0x08000e63
 8000d3c:	08000e85 	.word	0x08000e85
 8000d40:	08000f0f 	.word	0x08000f0f
 8000d44:	08000f31 	.word	0x08000f31
 8000d48:	08000f55 	.word	0x08000f55
 8000d4c:	08000f6f 	.word	0x08000f6f
 8000d50:	08000f93 	.word	0x08000f93
 8000d54:	080010e5 	.word	0x080010e5
 8000d58:	080010e5 	.word	0x080010e5
 8000d5c:	08000fe5 	.word	0x08000fe5
 8000d60:	0800103f 	.word	0x0800103f
 8000d64:	080010e5 	.word	0x080010e5
 8000d68:	080010e5 	.word	0x080010e5
 8000d6c:	0800104b 	.word	0x0800104b
 8000d70:	08001073 	.word	0x08001073
 8000d74:	080010e5 	.word	0x080010e5
	{

        case 0x00: //system reset signal
            printf("system reset...\r\n");
 8000d78:	488d      	ldr	r0, [pc, #564]	@ (8000fb0 <parseUserInput+0x2a4>)
 8000d7a:	f006 fcdf 	bl	800773c <puts>
            NVIC_SystemReset();
 8000d7e:	f7ff ff89 	bl	8000c94 <__NVIC_SystemReset>
            break;

        case 0x01: //disable stimulation
            stimulationController.enableStimulation = false;
 8000d82:	4b8c      	ldr	r3, [pc, #560]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
            printf("stimulation disabled\r\n");
 8000d88:	488b      	ldr	r0, [pc, #556]	@ (8000fb8 <parseUserInput+0x2ac>)
 8000d8a:	f006 fcd7 	bl	800773c <puts>
            //set default timer setting
            htim2.Instance->ARR = DEFAULT_TIMING;
 8000d8e:	4b8b      	ldr	r3, [pc, #556]	@ (8000fbc <parseUserInput+0x2b0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f640 4235 	movw	r2, #3125	@ 0xc35
 8000d96:	62da      	str	r2, [r3, #44]	@ 0x2c
            hdma_tim2_up.Instance->CMAR = (uint32_t) &Line_LUT;
 8000d98:	4b89      	ldr	r3, [pc, #548]	@ (8000fc0 <parseUserInput+0x2b4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a89      	ldr	r2, [pc, #548]	@ (8000fc4 <parseUserInput+0x2b8>)
 8000d9e:	60da      	str	r2, [r3, #12]

            CLEAR_BIT(hdma_tim2_up.Instance->CCR, 0);
 8000da0:	4b87      	ldr	r3, [pc, #540]	@ (8000fc0 <parseUserInput+0x2b4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b86      	ldr	r3, [pc, #536]	@ (8000fc0 <parseUserInput+0x2b4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	601a      	str	r2, [r3, #0]
            hdma_tim2_up.Instance->CNDTR = NS;
 8000dac:	4b84      	ldr	r3, [pc, #528]	@ (8000fc0 <parseUserInput+0x2b4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2284      	movs	r2, #132	@ 0x84
 8000db2:	605a      	str	r2, [r3, #4]
            SET_BIT(hdma_tim2_up.Instance->CCR, 0);
 8000db4:	4b82      	ldr	r3, [pc, #520]	@ (8000fc0 <parseUserInput+0x2b4>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b81      	ldr	r3, [pc, #516]	@ (8000fc0 <parseUserInput+0x2b4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	601a      	str	r2, [r3, #0]

            stimulationController.burstCounter = stimulationController.maxWaveNumber;
 8000dc0:	4b7c      	ldr	r3, [pc, #496]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000dc2:	885a      	ldrh	r2, [r3, #2]
 8000dc4:	4b7b      	ldr	r3, [pc, #492]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000dc6:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
            stimulationController.burstPauseIndex = 0;
 8000dca:	4b7a      	ldr	r3, [pc, #488]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

            break;
 8000dd2:	e18a      	b.n	80010ea <parseUserInput+0x3de>

        case 0x02: //enable stimulation

            if (stimulationController.validIndeces > 0)
 8000dd4:	4b77      	ldr	r3, [pc, #476]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000dd6:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8184 	beq.w	80010e8 <parseUserInput+0x3dc>
            {
                stimulationController.channelIndex = 0;
 8000de0:	4b74      	ldr	r3, [pc, #464]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
                enablePanel(stimulationController.channelOrder[0]);
 8000de8:	4b72      	ldr	r3, [pc, #456]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000dea:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 f829 	bl	8001e48 <enablePanel>
                hdac1.Instance->DHR12R1 = (uint16_t)  (stimulationController.intensityMultiplier *
 8000df6:	4b6f      	ldr	r3, [pc, #444]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000df8:	ed93 7a83 	vldr	s14, [r3, #524]	@ 0x20c
                                                       (float) (stimulationController.channelOrderIntensity[stimulationController.channelIndex] & 0x0fff));
 8000dfc:	4b6d      	ldr	r3, [pc, #436]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000dfe:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8000e02:	4a6c      	ldr	r2, [pc, #432]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000e04:	339c      	adds	r3, #156	@ 0x9c
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	885b      	ldrh	r3, [r3, #2]
 8000e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                hdac1.Instance->DHR12R1 = (uint16_t)  (stimulationController.intensityMultiplier *
 8000e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e20:	ee17 3a90 	vmov	r3, s15
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	4b68      	ldr	r3, [pc, #416]	@ (8000fc8 <parseUserInput+0x2bc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	609a      	str	r2, [r3, #8]

                stimulationController.currentWaveState = upBump;
 8000e2c:	4b61      	ldr	r3, [pc, #388]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

                stimulationController.enableStimulation = true;
 8000e34:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]

                stimulationController.continuousStimulation = Rx_data[1] > 0x7f;
 8000e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8000fac <parseUserInput+0x2a0>)
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	09db      	lsrs	r3, r3, #7
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b5b      	ldr	r3, [pc, #364]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000e48:	705a      	strb	r2, [r3, #1]

                if (stimulationController.continuousStimulation)
 8000e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <parseUserInput+0x14e>
                {
                    printf("continuous stimulation enabled\r\n");
 8000e52:	485e      	ldr	r0, [pc, #376]	@ (8000fcc <parseUserInput+0x2c0>)
 8000e54:	f006 fc72 	bl	800773c <puts>
                {
                    printf("stimulating once\r\n");
                }
            }

            break;
 8000e58:	e146      	b.n	80010e8 <parseUserInput+0x3dc>
                    printf("stimulating once\r\n");
 8000e5a:	485d      	ldr	r0, [pc, #372]	@ (8000fd0 <parseUserInput+0x2c4>)
 8000e5c:	f006 fc6e 	bl	800773c <puts>
            break;
 8000e60:	e142      	b.n	80010e8 <parseUserInput+0x3dc>

        case 0x05: //'A' A wave clock frequency

            timerSetting.A_ARR[Rx_data[3]] = (Rx_data[1] << 8) | Rx_data[2];
 8000e62:	4b52      	ldr	r3, [pc, #328]	@ (8000fac <parseUserInput+0x2a0>)
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	4b50      	ldr	r3, [pc, #320]	@ (8000fac <parseUserInput+0x2a0>)
 8000e6c:	789b      	ldrb	r3, [r3, #2]
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b219      	sxth	r1, r3
 8000e74:	4b4d      	ldr	r3, [pc, #308]	@ (8000fac <parseUserInput+0x2a0>)
 8000e76:	78db      	ldrb	r3, [r3, #3]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	4b55      	ldr	r3, [pc, #340]	@ (8000fd4 <parseUserInput+0x2c8>)
 8000e7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            //printf("A_ARR: %d\r\n", timerSetting.A_ARR);
            break;
 8000e82:	e132      	b.n	80010ea <parseUserInput+0x3de>
        case 0x06: //'B' B line clock frequency

            // changed to: delay in microseconds

            ; //NS * (ARR) / 80MHz = t [us] (here, t is called 'delay')
            uint16_t delay = (Rx_data[1] << 8) | Rx_data[2];
 8000e84:	4b49      	ldr	r3, [pc, #292]	@ (8000fac <parseUserInput+0x2a0>)
 8000e86:	785b      	ldrb	r3, [r3, #1]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	4b47      	ldr	r3, [pc, #284]	@ (8000fac <parseUserInput+0x2a0>)
 8000e8e:	789b      	ldrb	r3, [r3, #2]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	803b      	strh	r3, [r7, #0]

            uint16_t ARR_value = (uint16_t) (80.0 * (double) delay / (double) NS);
 8000e98:	883b      	ldrh	r3, [r7, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fad6 	bl	800044c <__aeabi_ui2d>
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8000fd8 <parseUserInput+0x2cc>)
 8000ea6:	f7ff fb4b 	bl	8000540 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b49      	ldr	r3, [pc, #292]	@ (8000fdc <parseUserInput+0x2d0>)
 8000eb8:	f7ff fc6c 	bl	8000794 <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fd4e 	bl	8000964 <__aeabi_d2uiz>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	81fb      	strh	r3, [r7, #14]


            if (ARR_value <= 20)
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	2b14      	cmp	r3, #20
 8000ed0:	d80d      	bhi.n	8000eee <parseUserInput+0x1e2>
            {
                ARR_value = 20;
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	81fb      	strh	r3, [r7, #14]
                stimulationController.shortFlatNS = (uint16_t) (2 * delay); //NS = 80 MHz * t / ARR
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000ee0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
                //if (stimulationController.shortFlatNS)
                stimulationController.skipDelay = true;
 8000ee4:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 8000eec:	e007      	b.n	8000efe <parseUserInput+0x1f2>
            } else
            {
                stimulationController.shortFlatNS = NS;
 8000eee:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000ef0:	2284      	movs	r2, #132	@ 0x84
 8000ef2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207

                stimulationController.skipDelay = false;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
            }

            timerSetting.B_ARR[Rx_data[3]] = ARR_value;
 8000efe:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <parseUserInput+0x2a0>)
 8000f00:	78db      	ldrb	r3, [r3, #3]
 8000f02:	4934      	ldr	r1, [pc, #208]	@ (8000fd4 <parseUserInput+0x2c8>)
 8000f04:	3364      	adds	r3, #100	@ 0x64
 8000f06:	89fa      	ldrh	r2, [r7, #14]
 8000f08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

            break;
 8000f0c:	e0ed      	b.n	80010ea <parseUserInput+0x3de>

        case 0x07: //'C' C wave clock frequency
            timerSetting.C_ARR[Rx_data[3]] = (Rx_data[1] << 8) | Rx_data[2];
 8000f0e:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <parseUserInput+0x2a0>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <parseUserInput+0x2a0>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <parseUserInput+0x2a0>)
 8000f22:	78db      	ldrb	r3, [r3, #3]
 8000f24:	b291      	uxth	r1, r2
 8000f26:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd4 <parseUserInput+0x2c8>)
 8000f28:	33c8      	adds	r3, #200	@ 0xc8
 8000f2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
 8000f2e:	e0dc      	b.n	80010ea <parseUserInput+0x3de>

        case 0x08: //'D' D wave clock frequency
            timerSetting.D_ARR[Rx_data[3]] = (Rx_data[1] << 8) | Rx_data[2];
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <parseUserInput+0x2a0>)
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <parseUserInput+0x2a0>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <parseUserInput+0x2a0>)
 8000f44:	78db      	ldrb	r3, [r3, #3]
 8000f46:	b291      	uxth	r1, r2
 8000f48:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <parseUserInput+0x2c8>)
 8000f4a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8000f4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
 8000f52:	e0ca      	b.n	80010ea <parseUserInput+0x3de>

        case 0x09: //'N' number of waves in a burst
            stimulationController.maxWaveNumber = (Rx_data[1] << 8) | Rx_data[2];
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <parseUserInput+0x2a0>)
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <parseUserInput+0x2a0>)
 8000f5e:	789b      	ldrb	r3, [r3, #2]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000f6a:	805a      	strh	r2, [r3, #2]
            break;
 8000f6c:	e0bd      	b.n	80010ea <parseUserInput+0x3de>

        case 0x0a: //this was used for relay opening/closing, now it acts as GPIO control
            ;
            uint16_t tmp = Rx_data[1] << 8 | Rx_data[2];
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <parseUserInput+0x2a0>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <parseUserInput+0x2a0>)
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	807b      	strh	r3, [r7, #2]

            GPIOC->BSRR = (uint32_t) ((uint32_t) (~tmp) << 16 | tmp);
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	041a      	lsls	r2, r3, #16
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	4915      	ldr	r1, [pc, #84]	@ (8000fe0 <parseUserInput+0x2d4>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	618b      	str	r3, [r1, #24]
            break;
 8000f90:	e0ab      	b.n	80010ea <parseUserInput+0x3de>

        case 0x0b: //before: 'm', default value: 50, sets the pause time between bursts
            stimulationController.timeBetweenBursts = (Rx_data[1] << 8) | Rx_data[2];
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <parseUserInput+0x2a0>)
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <parseUserInput+0x2a0>)
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <parseUserInput+0x2a8>)
 8000fa8:	809a      	strh	r2, [r3, #4]
            break;
 8000faa:	e09e      	b.n	80010ea <parseUserInput+0x3de>
 8000fac:	20000088 	.word	0x20000088
 8000fb0:	08007e7c 	.word	0x08007e7c
 8000fb4:	20000b80 	.word	0x20000b80
 8000fb8:	08007e90 	.word	0x08007e90
 8000fbc:	2000010c 	.word	0x2000010c
 8000fc0:	20000158 	.word	0x20000158
 8000fc4:	20000648 	.word	0x20000648
 8000fc8:	20000094 	.word	0x20000094
 8000fcc:	08007ea8 	.word	0x08007ea8
 8000fd0:	08007ec8 	.word	0x08007ec8
 8000fd4:	20000860 	.word	0x20000860
 8000fd8:	40540000 	.word	0x40540000
 8000fdc:	40608000 	.word	0x40608000
 8000fe0:	48000800 	.word	0x48000800
//            enableSPITransmit = 1;

            break;
        case 0x0e: //before: 's', sets the order of the channels, have to redo
            ;
            uint8_t channelOrderIndex = Rx_data[1]; //which index in the programorder
 8000fe4:	4b44      	ldr	r3, [pc, #272]	@ (80010f8 <parseUserInput+0x3ec>)
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	72fb      	strb	r3, [r7, #11]

            uint16_t channelOrderIntensity = Rx_data[2] << 8 | Rx_data[3]; //what intensity
 8000fea:	4b43      	ldr	r3, [pc, #268]	@ (80010f8 <parseUserInput+0x3ec>)
 8000fec:	789b      	ldrb	r3, [r3, #2]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b41      	ldr	r3, [pc, #260]	@ (80010f8 <parseUserInput+0x3ec>)
 8000ff4:	78db      	ldrb	r3, [r3, #3]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	813b      	strh	r3, [r7, #8]

            uint16_t stimChannelToSet = Rx_data[4] << 8 | Rx_data[5]; //which channel
 8000ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80010f8 <parseUserInput+0x3ec>)
 8001000:	791b      	ldrb	r3, [r3, #4]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b3c      	ldr	r3, [pc, #240]	@ (80010f8 <parseUserInput+0x3ec>)
 8001008:	795b      	ldrb	r3, [r3, #5]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	80fb      	strh	r3, [r7, #6]

            uint8_t stimChannelNumberOfBurstsToSet = Rx_data[6]; //number of bursts
 8001012:	4b39      	ldr	r3, [pc, #228]	@ (80010f8 <parseUserInput+0x3ec>)
 8001014:	799b      	ldrb	r3, [r3, #6]
 8001016:	717b      	strb	r3, [r7, #5]

            stimulationController.channelOrder[channelOrderIndex] = stimChannelToSet;
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	4938      	ldr	r1, [pc, #224]	@ (80010fc <parseUserInput+0x3f0>)
 800101c:	3338      	adds	r3, #56	@ 0x38
 800101e:	88fa      	ldrh	r2, [r7, #6]
 8001020:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

            stimulationController.channelOrderIntensity[channelOrderIndex] = channelOrderIntensity;
 8001024:	7afb      	ldrb	r3, [r7, #11]
 8001026:	4a35      	ldr	r2, [pc, #212]	@ (80010fc <parseUserInput+0x3f0>)
 8001028:	339c      	adds	r3, #156	@ 0x9c
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	893a      	ldrh	r2, [r7, #8]
 8001030:	805a      	strh	r2, [r3, #2]

            stimulationController.channelRepeatNumber[channelOrderIndex] = stimChannelNumberOfBurstsToSet;
 8001032:	7afb      	ldrb	r3, [r7, #11]
 8001034:	4a31      	ldr	r2, [pc, #196]	@ (80010fc <parseUserInput+0x3f0>)
 8001036:	4413      	add	r3, r2
 8001038:	797a      	ldrb	r2, [r7, #5]
 800103a:	719a      	strb	r2, [r3, #6]

            break;
 800103c:	e055      	b.n	80010ea <parseUserInput+0x3de>
        case 0x0f: //before: 'v', number of valid indices in the channel ordering

            stimulationController.validIndeces = Rx_data[1];
 800103e:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <parseUserInput+0x3ec>)
 8001040:	785a      	ldrb	r2, [r3, #1]
 8001042:	4b2e      	ldr	r3, [pc, #184]	@ (80010fc <parseUserInput+0x3f0>)
 8001044:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138

            break;
 8001048:	e04f      	b.n	80010ea <parseUserInput+0x3de>
//            TIM3->ARR = tmp_ARR;
//            TIM3->CCR1 = (uint32_t) (prevDuty * (float) tmp_ARR);
            break;
        case 0x12:

            if (stimulationController.enableStimulation)
 800104a:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <parseUserInput+0x3f0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d009      	beq.n	8001066 <parseUserInput+0x35a>
            {
                stimulationController.panelSwitchAddress = Rx_data[1];
 8001052:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <parseUserInput+0x3ec>)
 8001054:	785a      	ldrb	r2, [r3, #1]
 8001056:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <parseUserInput+0x3f0>)
 8001058:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
                stimulationController.panelSwitchRequest = true;
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <parseUserInput+0x3f0>)
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
            } else
            {
                enablePanel(Rx_data[1]);
            }

            break;
 8001064:	e041      	b.n	80010ea <parseUserInput+0x3de>
                enablePanel(Rx_data[1]);
 8001066:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <parseUserInput+0x3ec>)
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 feec 	bl	8001e48 <enablePanel>
            break;
 8001070:	e03b      	b.n	80010ea <parseUserInput+0x3de>
        case 0x13:
            ;
            uint16_t data = Rx_data[1];
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <parseUserInput+0x3ec>)
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	81bb      	strh	r3, [r7, #12]

            //hdac1.Instance->DHR12R1 = dacData & 0x0fff;

            stimulationController.intensityMultiplier = (float) data / 127.0f;
 8001078:	89bb      	ldrh	r3, [r7, #12]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001082:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001100 <parseUserInput+0x3f4>
 8001086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <parseUserInput+0x3f0>)
 800108c:	edc3 7a83 	vstr	s15, [r3, #524]	@ 0x20c
            break;
 8001090:	e02b      	b.n	80010ea <parseUserInput+0x3de>
//        	HAL_SPI_Transmit(&hspi1, &Rx_data[1], 2, 1000);
//
//        	printf("opened Channel\r\n");
        	break;
        default:
            printf("unknown command, disabling stimulation\r\n");
 8001092:	481c      	ldr	r0, [pc, #112]	@ (8001104 <parseUserInput+0x3f8>)
 8001094:	f006 fb52 	bl	800773c <puts>
            stimulationController.enableStimulation = false;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <parseUserInput+0x3f0>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
            htim2.Instance->ARR = DEFAULT_TIMING;
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <parseUserInput+0x3fc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f640 4235 	movw	r2, #3125	@ 0xc35
 80010a6:	62da      	str	r2, [r3, #44]	@ 0x2c
            hdma_tim2_up.Instance->CMAR = (uint32_t) &Line_LUT;
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <parseUserInput+0x400>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a18      	ldr	r2, [pc, #96]	@ (8001110 <parseUserInput+0x404>)
 80010ae:	60da      	str	r2, [r3, #12]

            CLEAR_BIT(hdma_tim2_up.Instance->CCR, 0);
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <parseUserInput+0x400>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <parseUserInput+0x400>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	601a      	str	r2, [r3, #0]
            hdma_tim2_up.Instance->CNDTR = NS;
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <parseUserInput+0x400>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2284      	movs	r2, #132	@ 0x84
 80010c2:	605a      	str	r2, [r3, #4]
            SET_BIT(hdma_tim2_up.Instance->CCR, 0);
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <parseUserInput+0x400>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b10      	ldr	r3, [pc, #64]	@ (800110c <parseUserInput+0x400>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	601a      	str	r2, [r3, #0]

            stimulationController.burstCounter = stimulationController.maxWaveNumber;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <parseUserInput+0x3f0>)
 80010d2:	885a      	ldrh	r2, [r3, #2]
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <parseUserInput+0x3f0>)
 80010d6:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
            stimulationController.burstPauseIndex = 0;
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <parseUserInput+0x3f0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
            break;
 80010e2:	e002      	b.n	80010ea <parseUserInput+0x3de>
            break;
 80010e4:	bf00      	nop
 80010e6:	e000      	b.n	80010ea <parseUserInput+0x3de>
            break;
 80010e8:	bf00      	nop
	}

	startParseInput = false;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <parseUserInput+0x408>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000088 	.word	0x20000088
 80010fc:	20000b80 	.word	0x20000b80
 8001100:	42fe0000 	.word	0x42fe0000
 8001104:	08007edc 	.word	0x08007edc
 8001108:	2000010c 	.word	0x2000010c
 800110c:	20000158 	.word	0x20000158
 8001110:	20000648 	.word	0x20000648
 8001114:	20000084 	.word	0x20000084

08001118 <UART_handleTimeOut>:


void UART_handleTimeOut()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    //restart UART reception
    HAL_UART_Abort_IT(&huart2);
 800111c:	4812      	ldr	r0, [pc, #72]	@ (8001168 <UART_handleTimeOut+0x50>)
 800111e:	f004 fda9 	bl	8005c74 <HAL_UART_Abort_IT>
    HAL_UART_Receive_IT(&huart2, Rx_data, RX_SIZE);
 8001122:	2208      	movs	r2, #8
 8001124:	4911      	ldr	r1, [pc, #68]	@ (800116c <UART_handleTimeOut+0x54>)
 8001126:	4810      	ldr	r0, [pc, #64]	@ (8001168 <UART_handleTimeOut+0x50>)
 8001128:	f004 fd58 	bl	8005bdc <HAL_UART_Receive_IT>
    UART_timeOutOccured = false;
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <UART_handleTimeOut+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
    printf("UART timed out, resetting...\r\n");
 8001132:	4810      	ldr	r0, [pc, #64]	@ (8001174 <UART_handleTimeOut+0x5c>)
 8001134:	f006 fb02 	bl	800773c <puts>

    //clear interrupt bits, disable interrupt
    WRITE_REG(huart2.Instance->ICR, USART_ICR_RTOCF);
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <UART_handleTimeOut+0x50>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001140:	621a      	str	r2, [r3, #32]
    CLEAR_BIT(huart2.Instance->CR2, USART_CR2_RTOEN);
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <UART_handleTimeOut+0x50>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <UART_handleTimeOut+0x50>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001150:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RTOIE);
 8001152:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <UART_handleTimeOut+0x50>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <UART_handleTimeOut+0x50>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001a0 	.word	0x200001a0
 800116c:	20000088 	.word	0x20000088
 8001170:	20000085 	.word	0x20000085
 8001174:	08007f04 	.word	0x08007f04

08001178 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001180:	1d39      	adds	r1, r7, #4
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	2201      	movs	r2, #1
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <__io_putchar+0x20>)
 800118a:	f004 fc9d 	bl	8005ac8 <HAL_UART_Transmit>
  return ch;
 800118e:	687b      	ldr	r3, [r7, #4]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200001a0 	.word	0x200001a0

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 	generateStimulationPattern();
 80011a2:	f000 fd59 	bl	8001c58 <generateStimulationPattern>
	    initializeTimerSettings();
 80011a6:	f000 fae3 	bl	8001770 <initializeTimerSettings>
	    initializeStimparams();
 80011aa:	f000 fafd 	bl	80017a8 <initializeStimparams>

	    spiHandler.enableTransit = false;
 80011ae:	4b51      	ldr	r3, [pc, #324]	@ (80012f4 <main+0x158>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
	    spiHandler.data[0] = 0;
 80011b4:	4b4f      	ldr	r3, [pc, #316]	@ (80012f4 <main+0x158>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	805a      	strh	r2, [r3, #2]
	    spiHandler.data[1] = 0;
 80011ba:	4b4e      	ldr	r3, [pc, #312]	@ (80012f4 <main+0x158>)
 80011bc:	2200      	movs	r2, #0
 80011be:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c0:	f001 fad1 	bl	8002766 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c4:	f000 f8ae 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c8:	f000 fa08 	bl	80015dc <MX_GPIO_Init>
  MX_DMA_Init();
 80011cc:	f000 f9e8 	bl	80015a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011d0:	f000 f9b6 	bl	8001540 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80011d4:	f000 f8f6 	bl	80013c4 <MX_DAC1_Init>
  MX_TIM2_Init();
 80011d8:	f000 f964 	bl	80014a4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80011dc:	f000 f924 	bl	8001428 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  	//DAC CLR
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_5,  GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2120      	movs	r1, #32
 80011e4:	4844      	ldr	r0, [pc, #272]	@ (80012f8 <main+0x15c>)
 80011e6:	f002 fa1f 	bl	8003628 <HAL_GPIO_WritePin>
  	//-HV ENABLE
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_7,  GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2180      	movs	r1, #128	@ 0x80
 80011ee:	4842      	ldr	r0, [pc, #264]	@ (80012f8 <main+0x15c>)
 80011f0:	f002 fa1a 	bl	8003628 <HAL_GPIO_WritePin>
  	//+HV ENABLE
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_9,  GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fa:	483f      	ldr	r0, [pc, #252]	@ (80012f8 <main+0x15c>)
 80011fc:	f002 fa14 	bl	8003628 <HAL_GPIO_WritePin>
  	//SWITCH CLR
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_8,  GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001206:	483c      	ldr	r0, [pc, #240]	@ (80012f8 <main+0x15c>)
 8001208:	f002 fa0e 	bl	8003628 <HAL_GPIO_WritePin>
  	//SWITCH LATCH ENABLE
  	HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_15,  GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001216:	f002 fa07 	bl	8003628 <HAL_GPIO_WritePin>
  	//PC4 sync signal
  	HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_4,  GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2110      	movs	r1, #16
 800121e:	4836      	ldr	r0, [pc, #216]	@ (80012f8 <main+0x15c>)
 8001220:	f002 fa02 	bl	8003628 <HAL_GPIO_WritePin>



	HAL_TIM_Base_Start_IT(&htim2);
 8001224:	4835      	ldr	r0, [pc, #212]	@ (80012fc <main+0x160>)
 8001226:	f004 f90b 	bl	8005440 <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800122a:	2100      	movs	r1, #0
 800122c:	4834      	ldr	r0, [pc, #208]	@ (8001300 <main+0x164>)
 800122e:	f001 fc66 	bl	8002afe <HAL_DAC_Start>

	start_DMA();
 8001232:	f000 fdf3 	bl	8001e1c <start_DMA>

	hdac1.Instance->DHR12R1 = 0;
 8001236:	4b32      	ldr	r3, [pc, #200]	@ (8001300 <main+0x164>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]

	if (HAL_UART_Receive_IT(&huart2, Rx_data, RX_SIZE) != HAL_OK)
 800123e:	2208      	movs	r2, #8
 8001240:	4930      	ldr	r1, [pc, #192]	@ (8001304 <main+0x168>)
 8001242:	4831      	ldr	r0, [pc, #196]	@ (8001308 <main+0x16c>)
 8001244:	f004 fcca 	bl	8005bdc <HAL_UART_Receive_IT>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <main+0xb6>
	{
	   Error_Handler();
 800124e:	f000 fa89 	bl	8001764 <Error_Handler>
	}

	//enable DMA request
	TIM2->DIER |= (1 << 8);
 8001252:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800125c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001260:	60d3      	str	r3, [r2, #12]

	//disable the half transfer complete interrupt for the DMA
	__HAL_DMA_DISABLE_IT(&hdma_tim2_up, DMA_IT_HT);
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <main+0x170>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b28      	ldr	r3, [pc, #160]	@ (800130c <main+0x170>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0204 	bic.w	r2, r2, #4
 8001270:	601a      	str	r2, [r3, #0]


	//set UART timeout to two seconds (2 secs * (1 / 115200 baud))
	MODIFY_REG(huart2.Instance->RTOR, USART_RTOR_RTO, 230400);
 8001272:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <main+0x16c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800127c:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <main+0x16c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f442 3261 	orr.w	r2, r2, #230400	@ 0x38400
 8001284:	615a      	str	r2, [r3, #20]

	printf("Ready \r\n");
 8001286:	4822      	ldr	r0, [pc, #136]	@ (8001310 <main+0x174>)
 8001288:	f006 fa58 	bl	800773c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (startParseInput)
 800128c:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <main+0x178>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <main+0xfc>
	{
		parseUserInput();
 8001294:	f7ff fd3a 	bl	8000d0c <parseUserInput>
	}

	if (UART_timeOutOccured)
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <main+0x17c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <main+0x10a>
	{
	   UART_handleTimeOut();
 80012a2:	f7ff ff39 	bl	8001118 <UART_handleTimeOut>
	}

	if (spiHandler.enableTransit)
 80012a6:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <main+0x158>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0ee      	beq.n	800128c <main+0xf0>
	{
		HAL_SPI_Transmit(&hspi1, (uint8_t*) spiHandler.data, 1, 100);
 80012ae:	2364      	movs	r3, #100	@ 0x64
 80012b0:	2201      	movs	r2, #1
 80012b2:	491a      	ldr	r1, [pc, #104]	@ (800131c <main+0x180>)
 80012b4:	481a      	ldr	r0, [pc, #104]	@ (8001320 <main+0x184>)
 80012b6:	f003 fd92 	bl	8004dde <HAL_SPI_Transmit>
		GPIOA->BRR = (uint32_t) GPIO_PIN_15;
 80012ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012c2:	629a      	str	r2, [r3, #40]	@ 0x28
		for (int i = 0; i < 2; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	e008      	b.n	80012dc <main+0x140>
		{
			i--;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
			i++;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3301      	adds	r3, #1
 80012d4:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < 2; i++)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3301      	adds	r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	ddf3      	ble.n	80012ca <main+0x12e>
		}
		GPIOA->BSRR = (uint32_t) GPIO_PIN_15;
 80012e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012ea:	619a      	str	r2, [r3, #24]
		spiHandler.enableTransit = false;
 80012ec:	4b01      	ldr	r3, [pc, #4]	@ (80012f4 <main+0x158>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
	if (startParseInput)
 80012f2:	e7cb      	b.n	800128c <main+0xf0>
 80012f4:	20000090 	.word	0x20000090
 80012f8:	48000800 	.word	0x48000800
 80012fc:	2000010c 	.word	0x2000010c
 8001300:	20000094 	.word	0x20000094
 8001304:	20000088 	.word	0x20000088
 8001308:	200001a0 	.word	0x200001a0
 800130c:	20000158 	.word	0x20000158
 8001310:	08007f24 	.word	0x08007f24
 8001314:	20000084 	.word	0x20000084
 8001318:	20000085 	.word	0x20000085
 800131c:	20000092 	.word	0x20000092
 8001320:	200000a8 	.word	0x200000a8

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b096      	sub	sp, #88	@ 0x58
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2244      	movs	r2, #68	@ 0x44
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f006 fae2 	bl	80078fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001346:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800134a:	f002 f993 	bl	8003674 <HAL_PWREx_ControlVoltageScaling>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001354:	f000 fa06 	bl	8001764 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2302      	movs	r3, #2
 8001364:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	2303      	movs	r3, #3
 8001368:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800136e:	2314      	movs	r3, #20
 8001370:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001372:	2307      	movs	r3, #7
 8001374:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001376:	2302      	movs	r3, #2
 8001378:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800137a:	2302      	movs	r3, #2
 800137c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4618      	mov	r0, r3
 8001384:	f002 f9cc 	bl	8003720 <HAL_RCC_OscConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800138e:	f000 f9e9 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001392:	230f      	movs	r3, #15
 8001394:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001396:	2303      	movs	r3, #3
 8001398:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	2104      	movs	r1, #4
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 fd94 	bl	8003ed8 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013b6:	f000 f9d5 	bl	8001764 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3758      	adds	r7, #88	@ 0x58
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2224      	movs	r2, #36	@ 0x24
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f006 fa93 	bl	80078fc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_DAC1_Init+0x5c>)
 80013d8:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <MX_DAC1_Init+0x60>)
 80013da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013dc:	4810      	ldr	r0, [pc, #64]	@ (8001420 <MX_DAC1_Init+0x5c>)
 80013de:	f001 fb6c 	bl	8002aba <HAL_DAC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013e8:	f000 f9bc 	bl	8001764 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	@ (8001420 <MX_DAC1_Init+0x5c>)
 8001408:	f001 fbc6 	bl	8002b98 <HAL_DAC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001412:	f000 f9a7 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	@ 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000094 	.word	0x20000094
 8001424:	40007400 	.word	0x40007400

08001428 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_SPI1_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <MX_SPI1_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_SPI1_Init+0x74>)
 8001434:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_SPI1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_SPI1_Init+0x74>)
 8001442:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001446:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_SPI1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_SPI1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_SPI1_Init+0x74>)
 8001456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_SPI1_Init+0x74>)
 800145e:	2238      	movs	r2, #56	@ 0x38
 8001460:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_SPI1_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_SPI1_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_SPI1_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_SPI1_Init+0x74>)
 8001476:	2207      	movs	r2, #7
 8001478:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_SPI1_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_SPI1_Init+0x74>)
 8001482:	2208      	movs	r2, #8
 8001484:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_SPI1_Init+0x74>)
 8001488:	f003 fc06 	bl	8004c98 <HAL_SPI_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001492:	f000 f967 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200000a8 	.word	0x200000a8
 80014a0:	40013000 	.word	0x40013000

080014a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <MX_TIM2_Init+0x98>)
 80014c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <MX_TIM2_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_TIM2_Init+0x98>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 320;
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <MX_TIM2_Init+0x98>)
 80014d8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <MX_TIM2_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e4:	4b15      	ldr	r3, [pc, #84]	@ (800153c <MX_TIM2_Init+0x98>)
 80014e6:	2280      	movs	r2, #128	@ 0x80
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ea:	4814      	ldr	r0, [pc, #80]	@ (800153c <MX_TIM2_Init+0x98>)
 80014ec:	f003 ff50 	bl	8005390 <HAL_TIM_Base_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014f6:	f000 f935 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	@ (800153c <MX_TIM2_Init+0x98>)
 8001508:	f004 f80a 	bl	8005520 <HAL_TIM_ConfigClockSource>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001512:	f000 f927 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001516:	2320      	movs	r3, #32
 8001518:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	@ (800153c <MX_TIM2_Init+0x98>)
 8001524:	f004 f9fa 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800152e:	f000 f919 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000010c 	.word	0x2000010c

08001540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001546:	4a15      	ldr	r2, [pc, #84]	@ (800159c <MX_USART2_UART_Init+0x5c>)
 8001548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001584:	f004 fa52 	bl	8005a2c <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800158e:	f000 f8e9 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001a0 	.word	0x200001a0
 800159c:	40004400 	.word	0x40004400

080015a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_DMA_Init+0x38>)
 80015a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015aa:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <MX_DMA_Init+0x38>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_DMA_Init+0x38>)
 80015b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	200c      	movs	r0, #12
 80015c4:	f001 fa43 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015c8:	200c      	movs	r0, #12
 80015ca:	f001 fa5c 	bl	8002a86 <HAL_NVIC_EnableIRQ>

}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	@ 0x28
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f2:	4b3a      	ldr	r3, [pc, #232]	@ (80016dc <MX_GPIO_Init+0x100>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	4a39      	ldr	r2, [pc, #228]	@ (80016dc <MX_GPIO_Init+0x100>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fe:	4b37      	ldr	r3, [pc, #220]	@ (80016dc <MX_GPIO_Init+0x100>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <MX_GPIO_Init+0x100>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	4a33      	ldr	r2, [pc, #204]	@ (80016dc <MX_GPIO_Init+0x100>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001616:	4b31      	ldr	r3, [pc, #196]	@ (80016dc <MX_GPIO_Init+0x100>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <MX_GPIO_Init+0x100>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <MX_GPIO_Init+0x100>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162e:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <MX_GPIO_Init+0x100>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <MX_GPIO_Init+0x100>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	4a27      	ldr	r2, [pc, #156]	@ (80016dc <MX_GPIO_Init+0x100>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001646:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <MX_GPIO_Init+0x100>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|DAC_CLR_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 716c 	mov.w	r1, #944	@ 0x3b0
 8001658:	4821      	ldr	r0, [pc, #132]	@ (80016e0 <MX_GPIO_Init+0x104>)
 800165a:	f001 ffe5 	bl	8003628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800165e:	2200      	movs	r2, #0
 8001660:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001664:	481f      	ldr	r0, [pc, #124]	@ (80016e4 <MX_GPIO_Init+0x108>)
 8001666:	f001 ffdf 	bl	8003628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001674:	f001 ffd8 	bl	8003628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 DAC_CLR_Pin PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DAC_CLR_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001678:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 800167c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4813      	ldr	r0, [pc, #76]	@ (80016e0 <MX_GPIO_Init+0x104>)
 8001692:	f001 fe1f 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800169a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <MX_GPIO_Init+0x108>)
 80016b0:	f001 fe10 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d0:	f001 fe00 	bl	80032d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000800 	.word	0x48000800
 80016e4:	48000400 	.word	0x48000400

080016e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

    if (checkCRC())
 80016f0:	f7ff fae6 	bl	8000cc0 <checkCRC>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <HAL_UART_RxCpltCallback+0x28>
    {
        if (!startParseInput)
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <HAL_UART_RxCpltCallback+0x6c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	f083 0301 	eor.w	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_UART_RxCpltCallback+0x2e>
        {
            startParseInput = 1;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_UART_RxCpltCallback+0x6c>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e002      	b.n	8001716 <HAL_UART_RxCpltCallback+0x2e>
        }
    } else
    {
        printf("CRC error\r\n");
 8001710:	4811      	ldr	r0, [pc, #68]	@ (8001758 <HAL_UART_RxCpltCallback+0x70>)
 8001712:	f006 f813 	bl	800773c <puts>
    }

    //reset timeout interrupt registers because transfer is complete
    CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RTOIE);
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_UART_RxCpltCallback+0x74>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_UART_RxCpltCallback+0x74>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001724:	601a      	str	r2, [r3, #0]
    WRITE_REG(huart2.Instance->ICR, USART_ICR_RTOCF);
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_UART_RxCpltCallback+0x74>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800172e:	621a      	str	r2, [r3, #32]
    CLEAR_BIT(huart2.Instance->CR2, USART_CR2_RTOEN);
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_UART_RxCpltCallback+0x74>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_UART_RxCpltCallback+0x74>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800173e:	605a      	str	r2, [r3, #4]

	HAL_UART_Receive_IT(huart, Rx_data, RX_SIZE);
 8001740:	2208      	movs	r2, #8
 8001742:	4907      	ldr	r1, [pc, #28]	@ (8001760 <HAL_UART_RxCpltCallback+0x78>)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f004 fa49 	bl	8005bdc <HAL_UART_Receive_IT>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000084 	.word	0x20000084
 8001758:	08007f2c 	.word	0x08007f2c
 800175c:	200001a0 	.word	0x200001a0
 8001760:	20000088 	.word	0x20000088

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <Error_Handler+0x8>

08001770 <initializeTimerSettings>:
TimerSettingHandle timerSetting;

StimulationControllerHandle stimulationController;

void initializeTimerSettings()
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
    timerSetting.A_ARR[0] = 312;
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <initializeTimerSettings+0x34>)
 8001776:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800177a:	801a      	strh	r2, [r3, #0]
    timerSetting.B_ARR[0] = 312;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <initializeTimerSettings+0x34>)
 800177e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8001782:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
    timerSetting.C_ARR[0] = 312;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <initializeTimerSettings+0x34>)
 8001788:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800178c:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    timerSetting.D_ARR[0] = 3125;
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <initializeTimerSettings+0x34>)
 8001792:	f640 4235 	movw	r2, #3125	@ 0xc35
 8001796:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258

}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	20000860 	.word	0x20000860

080017a8 <initializeStimparams>:

void initializeStimparams()
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
    stimulationController.enableStimulation = false;
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <initializeStimparams+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]

    stimulationController.continuousStimulation = false;
 80017b4:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <initializeStimparams+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	705a      	strb	r2, [r3, #1]

    stimulationController.maxWaveNumber = 10;
 80017ba:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <initializeStimparams+0xa8>)
 80017bc:	220a      	movs	r2, #10
 80017be:	805a      	strh	r2, [r3, #2]

    stimulationController.timeBetweenBursts = 50;
 80017c0:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <initializeStimparams+0xa8>)
 80017c2:	2232      	movs	r2, #50	@ 0x32
 80017c4:	809a      	strh	r2, [r3, #4]

    stimulationController.channelSwitchTime = 4999;
 80017c6:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <initializeStimparams+0xa8>)
 80017c8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80017cc:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    stimulationController.burstCounter = stimulationController.maxWaveNumber;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <initializeStimparams+0xa8>)
 80017d2:	885a      	ldrh	r2, [r3, #2]
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <initializeStimparams+0xa8>)
 80017d6:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202

    stimulationController.burstPauseIndex = 0;
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <initializeStimparams+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

    stimulationController.currentChannelRepeatIndex = 0;
 80017e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <initializeStimparams+0xa8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    stimulationController.currentWaveState = longFlat;
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <initializeStimparams+0xa8>)
 80017ec:	2204      	movs	r2, #4
 80017ee:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

    stimulationController.shortFlatNS = NS;
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <initializeStimparams+0xa8>)
 80017f4:	2284      	movs	r2, #132	@ 0x84
 80017f6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207

    stimulationController.skipDelay = false;
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <initializeStimparams+0xa8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208

    stimulationController.panelSwitchRequest = false;
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <initializeStimparams+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209

    stimulationController.panelSwitchAddress = 0x80;
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <initializeStimparams+0xa8>)
 800180c:	2280      	movs	r2, #128	@ 0x80
 800180e:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a

    stimulationController.intensityMultiplier = 1;
 8001812:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <initializeStimparams+0xa8>)
 8001814:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001818:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

    uint16_t dummyData = swapBits(2047);
 800181c:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001820:	f000 f9d8 	bl	8001bd4 <swapBits>
 8001824:	4603      	mov	r3, r0
 8001826:	80fb      	strh	r3, [r7, #6]
    Dummy_Cycle[0] = (~dummyData) << 16 | dummyData;
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	43db      	mvns	r3, r3
 800182c:	041a      	lsls	r2, r3, #16
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	4313      	orrs	r3, r2
 8001832:	461a      	mov	r2, r3
 8001834:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <initializeStimparams+0xac>)
 8001836:	601a      	str	r2, [r3, #0]
    Dummy_Cycle[1] = swapBits(0x9000);
 8001838:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800183c:	f000 f9ca 	bl	8001bd4 <swapBits>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <initializeStimparams+0xac>)
 8001846:	605a      	str	r2, [r3, #4]
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000b80 	.word	0x20000b80
 8001854:	20000858 	.word	0x20000858

08001858 <offsetData>:


void offsetData(uint32_t* array)
{
 8001858:	b480      	push	{r7}
 800185a:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 800185e:	af00      	add	r7, sp, #0
 8001860:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001864:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001868:	6018      	str	r0, [r3, #0]
    uint32_t copyArray[NS];

    for (uint16_t i = 0; i < NS; i++)
 800186a:	2300      	movs	r3, #0
 800186c:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 8001870:	e016      	b.n	80018a0 <offsetData+0x48>
    {
        copyArray[i] = array[i];
 8001872:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800187c:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	4413      	add	r3, r2
 8001884:	f8b7 221e 	ldrh.w	r2, [r7, #542]	@ 0x21e
 8001888:	6819      	ldr	r1, [r3, #0]
 800188a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800188e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint16_t i = 0; i < NS; i++)
 8001896:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 800189a:	3301      	adds	r3, #1
 800189c:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 80018a0:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 80018a4:	2b83      	cmp	r3, #131	@ 0x83
 80018a6:	d9e4      	bls.n	8001872 <offsetData+0x1a>
    }

    for (uint16_t i = TIMING_PADDING / 2; i < NS - TIMING_PADDING / 2; i++)
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
 80018ae:	e017      	b.n	80018e0 <offsetData+0x88>
    {
        array[i] = copyArray[i - TIMING_PADDING / 2];
 80018b0:	f8b7 321c 	ldrh.w	r3, [r7, #540]	@ 0x21c
 80018b4:	1e99      	subs	r1, r3, #2
 80018b6:	f8b7 321c 	ldrh.w	r3, [r7, #540]	@ 0x21c
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80018c0:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80018cc:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 80018d0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80018d4:	601a      	str	r2, [r3, #0]
    for (uint16_t i = TIMING_PADDING / 2; i < NS - TIMING_PADDING / 2; i++)
 80018d6:	f8b7 321c 	ldrh.w	r3, [r7, #540]	@ 0x21c
 80018da:	3301      	adds	r3, #1
 80018dc:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
 80018e0:	f8b7 321c 	ldrh.w	r3, [r7, #540]	@ 0x21c
 80018e4:	2b81      	cmp	r3, #129	@ 0x81
 80018e6:	d9e3      	bls.n	80018b0 <offsetData+0x58>
    }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <fillWithBell>:

void fillWithBell(uint32_t* array, size_t size, double avg, double dev, double amp, double offset)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0ae      	sub	sp, #184	@ 0xb8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8001900:	6239      	str	r1, [r7, #32]
 8001902:	ed87 0b06 	vstr	d0, [r7, #24]
 8001906:	ed87 1b04 	vstr	d1, [r7, #16]
 800190a:	ed87 2b02 	vstr	d2, [r7, #8]
 800190e:	ed87 3b00 	vstr	d3, [r7]

    //TODO IMPORTANT check NS!!!!!
    int16_t Wave[NS / 2] = {
 8001912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001916:	2284      	movs	r2, #132	@ 0x84
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f005 ffee 	bl	80078fc <memset>
 8001920:	233c      	movs	r3, #60	@ 0x3c
 8001922:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001924:	2352      	movs	r3, #82	@ 0x52
 8001926:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001928:	2370      	movs	r3, #112	@ 0x70
 800192a:	863b      	strh	r3, [r7, #48]	@ 0x30
 800192c:	2396      	movs	r3, #150	@ 0x96
 800192e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001930:	23c7      	movs	r3, #199	@ 0xc7
 8001932:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001934:	f240 1305 	movw	r3, #261	@ 0x105
 8001938:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800193a:	f240 1353 	movw	r3, #339	@ 0x153
 800193e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8001940:	f240 13b5 	movw	r3, #437	@ 0x1b5
 8001944:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001946:	f44f 730b 	mov.w	r3, #556	@ 0x22c
 800194a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800194c:	f240 23be 	movw	r3, #702	@ 0x2be
 8001950:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001952:	f44f 735b 	mov.w	r3, #876	@ 0x36c
 8001956:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800195a:	f240 433a 	movw	r3, #1082	@ 0x43a
 800195e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001962:	f240 532c 	movw	r3, #1324	@ 0x52c
 8001966:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800196a:	f240 6344 	movw	r3, #1604	@ 0x644
 800196e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001972:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001976:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800197a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800197e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001982:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001986:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800198a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800198e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001992:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001996:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800199a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800199e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80019a2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019a6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 80019aa:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019ae:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80019b2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019b6:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80019ba:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019be:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80019c2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019c6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80019ca:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019ce:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80019d2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019d6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80019da:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019de:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80019e2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019e6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80019ea:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019ee:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80019f2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019f6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80019fa:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80019fe:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8001a02:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a06:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001a0a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001a12:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a16:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 8001a1a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a1e:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8001a22:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a26:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8001a2a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a2e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8001a32:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a36:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8001a3a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a3e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8001a42:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a46:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8001a4a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a4e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8001a52:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a56:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 8001a5a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a5e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8001a62:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a66:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8001a6a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a6e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8001a72:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a76:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8001a7a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a7e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001a82:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a86:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8001a8a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001a8e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8001a92:	f240 6344 	movw	r3, #1604	@ 0x644
 8001a96:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8001a9a:	f240 532c 	movw	r3, #1324	@ 0x52c
 8001a9e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8001aa2:	f240 433a 	movw	r3, #1082	@ 0x43a
 8001aa6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8001aaa:	f44f 735b 	mov.w	r3, #876	@ 0x36c
 8001aae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8001ab2:	f240 23be 	movw	r3, #702	@ 0x2be
 8001ab6:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 8001aba:	f44f 730b 	mov.w	r3, #556	@ 0x22c
 8001abe:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
 8001ac2:	f240 13b5 	movw	r3, #437	@ 0x1b5
 8001ac6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001aca:	f240 1353 	movw	r3, #339	@ 0x153
 8001ace:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8001ad2:	f240 1305 	movw	r3, #261	@ 0x105
 8001ad6:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8001ada:	23c7      	movs	r3, #199	@ 0xc7
 8001adc:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8001ae0:	2396      	movs	r3, #150	@ 0x96
 8001ae2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
 8001ae6:	2370      	movs	r3, #112	@ 0x70
 8001ae8:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001aec:	2352      	movs	r3, #82	@ 0x52
 8001aee:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 8001af2:	233c      	movs	r3, #60	@ 0x3c
 8001af4:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    };




    for (int i = 0; i + 1 < size; i += 2)
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001afe:	e05c      	b.n	8001bba <fillWithBell+0x2c2>
        uint16_t gpioValue;

        //generate bell curve
        //gpioValue = amp * 1800 * exp(-((i - avg)*(i - avg)/(2*dev*dev))) + offset;

        gpioValue = amp * Wave[i / 2] + offset;
 8001b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b04:	0fda      	lsrs	r2, r3, #31
 8001b06:	4413      	add	r3, r2
 8001b08:	105b      	asrs	r3, r3, #1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	33b8      	adds	r3, #184	@ 0xb8
 8001b0e:	443b      	add	r3, r7
 8001b10:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fca9 	bl	800046c <__aeabi_i2d>
 8001b1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b1e:	f7fe fd0f 	bl	8000540 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b2e:	f7fe fb51 	bl	80001d4 <__adddf3>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7fe ff13 	bl	8000964 <__aeabi_d2uiz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
        if (gpioValue > 4095)
 8001b44:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b4c:	d303      	bcc.n	8001b56 <fillWithBell+0x25e>
        {
            gpioValue = 4095;
 8001b4e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001b52:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
        //LDAC (bit #13) - PB7
        //A/B (bit #14) - PB0
        //R/W (bit #15) - PB8

        //set control bits to 0, leave data bits as is
        gpioValue &= 0b0000111111111111;
 8001b56:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2


        //swap bits according to the actual PCB routing
        gpioValue = swapBits(gpioValue);
 8001b62:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f834 	bl	8001bd4 <swapBits>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2

        //1 in upper 16 bits: drive the corresponding pin low
        //1 in lower 16 bits: drive the corresponding bit high
        //0 anywhere: no change
        array[i] = (~gpioValue) << 16 | gpioValue;
 8001b72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001b76:	43db      	mvns	r3, r3
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001b7e:	ea42 0103 	orr.w	r1, r2, r3
 8001b82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8a:	4413      	add	r3, r2
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]


        //array[i + 1] = (uint32_t) ((1 << 14) | (1 << 13)); //TODO, redo this - redone, have to test

        // set CS, R/W, A/B high (0b1001 0000 0000 0000)
        gpioValue = swapBits(0x9000);
 8001b90:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001b94:	f000 f81e 	bl	8001bd4 <swapBits>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
        array[i + 1] =  gpioValue;
 8001b9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba8:	4413      	add	r3, r2
 8001baa:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 8001bae:	601a      	str	r2, [r3, #0]
    for (int i = 0; i + 1 < size; i += 2)
 8001bb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d89b      	bhi.n	8001b00 <fillWithBell+0x208>
    }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	37b8      	adds	r7, #184	@ 0xb8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <swapBits>:


uint16_t swapBits(uint16_t data)
{
 8001bd4:	b490      	push	{r4, r7}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]

    uint16_t result = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	83fb      	strh	r3, [r7, #30]
    /* single channel EEL:
     * uint8_t shiftTo[16] = {9, 12, 6, 11, 2, 1, 15, 10,
                           4, 14, 13, 3, 5, 7, 0, 8};*/

    // this is the pin configuration for the SMALL EEL PCB:
    uint8_t shiftTo[16] = {2, 11, 10, 12, 13, 14, 15, 9, 8, 7, 6, 3, 1, 5, 4, 0};
 8001be2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c54 <swapBits+0x80>)
 8001be4:	f107 040c 	add.w	r4, r7, #12
 8001be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    //shift every bit to its place
    result |= (data & 1) << shiftTo[0];
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	7b3a      	ldrb	r2, [r7, #12]
 8001bf6:	4093      	lsls	r3, r2
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 1; i < 16; i++)
 8001c04:	2301      	movs	r3, #1
 8001c06:	777b      	strb	r3, [r7, #29]
 8001c08:	e01b      	b.n	8001c42 <swapBits+0x6e>
    {
        data = data >> 1;
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	80fb      	strh	r3, [r7, #6]
        result |= (((data & 1) > 0) << shiftTo[i]);
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bfcc      	ite	gt
 8001c1a:	2301      	movgt	r3, #1
 8001c1c:	2300      	movle	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	7f7b      	ldrb	r3, [r7, #29]
 8001c24:	3320      	adds	r3, #32
 8001c26:	443b      	add	r3, r7
 8001c28:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 1; i < 16; i++)
 8001c3c:	7f7b      	ldrb	r3, [r7, #29]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	777b      	strb	r3, [r7, #29]
 8001c42:	7f7b      	ldrb	r3, [r7, #29]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d9e0      	bls.n	8001c0a <swapBits+0x36>
    }

    return result;
 8001c48:	8bfb      	ldrh	r3, [r7, #30]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc90      	pop	{r4, r7}
 8001c52:	4770      	bx	lr
 8001c54:	08007f38 	.word	0x08007f38

08001c58 <generateStimulationPattern>:


void generateStimulationPattern()
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
    fillWithBell(A_wave, NS, NS / 2.0, dev, 1, 2047);
 8001c5e:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8001de8 <generateStimulationPattern+0x190>
 8001c62:	ed9f 3b63 	vldr	d3, [pc, #396]	@ 8001df0 <generateStimulationPattern+0x198>
 8001c66:	ed9f 2b64 	vldr	d2, [pc, #400]	@ 8001df8 <generateStimulationPattern+0x1a0>
 8001c6a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c6e:	eef0 1a67 	vmov.f32	s3, s15
 8001c72:	ed9f 0b63 	vldr	d0, [pc, #396]	@ 8001e00 <generateStimulationPattern+0x1a8>
 8001c76:	2184      	movs	r1, #132	@ 0x84
 8001c78:	4865      	ldr	r0, [pc, #404]	@ (8001e10 <generateStimulationPattern+0x1b8>)
 8001c7a:	f7ff fe3d 	bl	80018f8 <fillWithBell>
    fillWithBell(C_wave, NS, NS / 2.0, dev, -1, 2047);
 8001c7e:	ed9f 7b5a 	vldr	d7, [pc, #360]	@ 8001de8 <generateStimulationPattern+0x190>
 8001c82:	ed9f 3b5b 	vldr	d3, [pc, #364]	@ 8001df0 <generateStimulationPattern+0x198>
 8001c86:	ed9f 2b60 	vldr	d2, [pc, #384]	@ 8001e08 <generateStimulationPattern+0x1b0>
 8001c8a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c8e:	eef0 1a67 	vmov.f32	s3, s15
 8001c92:	ed9f 0b5b 	vldr	d0, [pc, #364]	@ 8001e00 <generateStimulationPattern+0x1a8>
 8001c96:	2184      	movs	r1, #132	@ 0x84
 8001c98:	485e      	ldr	r0, [pc, #376]	@ (8001e14 <generateStimulationPattern+0x1bc>)
 8001c9a:	f7ff fe2d 	bl	80018f8 <fillWithBell>

    for (int i = 0; i + 1 < NS; i+=2)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e01e      	b.n	8001ce2 <generateStimulationPattern+0x8a>
    {
        uint16_t gpioValue;


        // set CS, R/W, A/B high (0b1001 0000 0000 0000)
        gpioValue = swapBits(2047);
 8001ca4:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001ca8:	f7ff ff94 	bl	8001bd4 <swapBits>
 8001cac:	4603      	mov	r3, r0
 8001cae:	80bb      	strh	r3, [r7, #4]
        Line_LUT[i] = (~gpioValue) << 16 | gpioValue; // set everything to 2047 (+ first 4 bits are control bits)
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	041a      	lsls	r2, r3, #16
 8001cb6:	88bb      	ldrh	r3, [r7, #4]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4a56      	ldr	r2, [pc, #344]	@ (8001e18 <generateStimulationPattern+0x1c0>)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        gpioValue = swapBits(0x9000);
 8001cc4:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001cc8:	f7ff ff84 	bl	8001bd4 <swapBits>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	80bb      	strh	r3, [r7, #4]
        Line_LUT[i + 1] = gpioValue;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	88ba      	ldrh	r2, [r7, #4]
 8001cd6:	4950      	ldr	r1, [pc, #320]	@ (8001e18 <generateStimulationPattern+0x1c0>)
 8001cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i + 1 < NS; i+=2)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3302      	adds	r3, #2
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b82      	cmp	r3, #130	@ 0x82
 8001ce6:	dddd      	ble.n	8001ca4 <generateStimulationPattern+0x4c>
    }

    offsetData(A_wave);
 8001ce8:	4849      	ldr	r0, [pc, #292]	@ (8001e10 <generateStimulationPattern+0x1b8>)
 8001cea:	f7ff fdb5 	bl	8001858 <offsetData>
    offsetData(C_wave);
 8001cee:	4849      	ldr	r0, [pc, #292]	@ (8001e14 <generateStimulationPattern+0x1bc>)
 8001cf0:	f7ff fdb2 	bl	8001858 <offsetData>

    //perform padding //TODO - shift the first n data points maybe? (because first elements also get padded over)
    uint16_t gpioValue;
    gpioValue = swapBits(2047);
 8001cf4:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001cf8:	f7ff ff6c 	bl	8001bd4 <swapBits>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	80fb      	strh	r3, [r7, #6]

    for (int i = 0; i < TIMING_PADDING / 2; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	e068      	b.n	8001dd8 <generateStimulationPattern+0x180>
    {
        A_wave[2 * i] = (~gpioValue) << 16 | gpioValue;
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	041a      	lsls	r2, r3, #16
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4611      	mov	r1, r2
 8001d16:	4a3e      	ldr	r2, [pc, #248]	@ (8001e10 <generateStimulationPattern+0x1b8>)
 8001d18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        A_wave[2 * i + 1] = swapBits(0x9000);
 8001d1c:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001d20:	f7ff ff58 	bl	8001bd4 <swapBits>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4a37      	ldr	r2, [pc, #220]	@ (8001e10 <generateStimulationPattern+0x1b8>)
 8001d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        A_wave[NS - 2 - 2 * i] = (~gpioValue) << 16 | gpioValue;
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f1c3 0341 	rsb	r3, r3, #65	@ 0x41
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4a31      	ldr	r2, [pc, #196]	@ (8001e10 <generateStimulationPattern+0x1b8>)
 8001d4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        A_wave[NS - 1 - 2 * i] = swapBits(0x9000);
 8001d50:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001d54:	f7ff ff3e 	bl	8001bd4 <swapBits>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8001d64:	4611      	mov	r1, r2
 8001d66:	4a2a      	ldr	r2, [pc, #168]	@ (8001e10 <generateStimulationPattern+0x1b8>)
 8001d68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        C_wave[2 * i] = (~gpioValue) << 16 | gpioValue;
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <generateStimulationPattern+0x1bc>)
 8001d7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        C_wave[2 * i + 1] = swapBits(0x9000);
 8001d82:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001d86:	f7ff ff25 	bl	8001bd4 <swapBits>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	3301      	adds	r3, #1
 8001d94:	4611      	mov	r1, r2
 8001d96:	4a1f      	ldr	r2, [pc, #124]	@ (8001e14 <generateStimulationPattern+0x1bc>)
 8001d98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        C_wave[NS - 2 - 2 * i] = (~gpioValue) << 16 | gpioValue;
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f1c3 0341 	rsb	r3, r3, #65	@ 0x41
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4611      	mov	r1, r2
 8001db0:	4a18      	ldr	r2, [pc, #96]	@ (8001e14 <generateStimulationPattern+0x1bc>)
 8001db2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        C_wave[NS - 1 - 2 * i] = swapBits(0x9000);
 8001db6:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8001dba:	f7ff ff0b 	bl	8001bd4 <swapBits>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4a11      	ldr	r2, [pc, #68]	@ (8001e14 <generateStimulationPattern+0x1bc>)
 8001dce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < TIMING_PADDING / 2; i++)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	dd93      	ble.n	8001d06 <generateStimulationPattern+0xae>
    }
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	00000000 	.word	0x00000000
 8001dec:	40340000 	.word	0x40340000
 8001df0:	00000000 	.word	0x00000000
 8001df4:	409ffc00 	.word	0x409ffc00
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	3ff00000 	.word	0x3ff00000
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40508000 	.word	0x40508000
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	bff00000 	.word	0xbff00000
 8001e10:	20000228 	.word	0x20000228
 8001e14:	20000438 	.word	0x20000438
 8001e18:	20000648 	.word	0x20000648

08001e1c <start_DMA>:

void start_DMA()
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
    if (HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t) Line_LUT, (uint32_t)&(GPIOB->BSRR), NS) != HAL_OK)
 8001e20:	4906      	ldr	r1, [pc, #24]	@ (8001e3c <start_DMA+0x20>)
 8001e22:	2384      	movs	r3, #132	@ 0x84
 8001e24:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <start_DMA+0x24>)
 8001e26:	4807      	ldr	r0, [pc, #28]	@ (8001e44 <start_DMA+0x28>)
 8001e28:	f001 f896 	bl	8002f58 <HAL_DMA_Start_IT>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <start_DMA+0x1a>
    {
        Error_Handler();
 8001e32:	f7ff fc97 	bl	8001764 <Error_Handler>
    }
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000648 	.word	0x20000648
 8001e40:	48000418 	.word	0x48000418
 8001e44:	20000158 	.word	0x20000158

08001e48 <enablePanel>:

void enablePanel(uint8_t address)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, address & 0x02);
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, address & 0x04);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, address & 0x08);
//
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, address & 0x80);
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <handleStimulation>:


void handleStimulation()
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, debugPin);
//    debugPin = !debugPin;
    //enableStimulation is controlled by user commands from UART
    if (!stimulationController.enableStimulation)
 8001e64:	4ba2      	ldr	r3, [pc, #648]	@ (80020f0 <handleStimulation+0x290>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <handleStimulation+0x1a>
    {
    	GPIOC->BRR = (uint32_t) GPIO_PIN_4;
 8001e72:	4ba0      	ldr	r3, [pc, #640]	@ (80020f4 <handleStimulation+0x294>)
 8001e74:	2210      	movs	r2, #16
 8001e76:	629a      	str	r2, [r3, #40]	@ 0x28
        return;
 8001e78:	e1b9      	b.n	80021ee <handleStimulation+0x38e>
    }

    //burstCounter counts the number of bursts remaining after the enableStimulation flag is set to true
    //if it is 0, we skip timeBetweenBursts * D_ARR / 1.25 microseconds of stimulation
    if (stimulationController.burstCounter == 0)
 8001e7a:	4b9d      	ldr	r3, [pc, #628]	@ (80020f0 <handleStimulation+0x290>)
 8001e7c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f040 80e6 	bne.w	8002052 <handleStimulation+0x1f2>
    {
        if (stimulationController.burstPauseIndex < stimulationController.timeBetweenBursts) // == it's pausing time
 8001e86:	4b9a      	ldr	r3, [pc, #616]	@ (80020f0 <handleStimulation+0x290>)
 8001e88:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 8001e8c:	4b98      	ldr	r3, [pc, #608]	@ (80020f0 <handleStimulation+0x290>)
 8001e8e:	889b      	ldrh	r3, [r3, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d237      	bcs.n	8001f04 <handleStimulation+0xa4>
        {
            htim2.Instance->ARR = timerSetting.D_ARR[stimulationController.channelIndex];
 8001e94:	4b96      	ldr	r3, [pc, #600]	@ (80020f0 <handleStimulation+0x290>)
 8001e96:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8001e9a:	4a97      	ldr	r2, [pc, #604]	@ (80020f8 <handleStimulation+0x298>)
 8001e9c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001ea0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ea4:	4b95      	ldr	r3, [pc, #596]	@ (80020fc <handleStimulation+0x29c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

            stimulationController.currentWaveState = longFlat;
 8001eaa:	4b91      	ldr	r3, [pc, #580]	@ (80020f0 <handleStimulation+0x290>)
 8001eac:	2204      	movs	r2, #4
 8001eae:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
            stimulationController.burstPauseIndex++;
 8001eb2:	4b8f      	ldr	r3, [pc, #572]	@ (80020f0 <handleStimulation+0x290>)
 8001eb4:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8001eb8:	3301      	adds	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80020f0 <handleStimulation+0x290>)
 8001ebe:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

            if ((stimulationController.timeBetweenBursts - stimulationController.burstPauseIndex)
 8001ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80020f0 <handleStimulation+0x290>)
 8001ec4:	889b      	ldrh	r3, [r3, #4]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b89      	ldr	r3, [pc, #548]	@ (80020f0 <handleStimulation+0x290>)
 8001eca:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8001ece:	1ad3      	subs	r3, r2, r3
            		* timerSetting.D_ARR[stimulationController.channelIndex] * NS < 400000)
 8001ed0:	4a87      	ldr	r2, [pc, #540]	@ (80020f0 <handleStimulation+0x290>)
 8001ed2:	f892 206e 	ldrb.w	r2, [r2, #110]	@ 0x6e
 8001ed6:	4988      	ldr	r1, [pc, #544]	@ (80020f8 <handleStimulation+0x298>)
 8001ed8:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8001edc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ee0:	fb03 f202 	mul.w	r2, r3, r2
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	015b      	lsls	r3, r3, #5
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	461a      	mov	r2, r3
            if ((stimulationController.timeBetweenBursts - stimulationController.burstPauseIndex)
 8001eee:	4b84      	ldr	r3, [pc, #528]	@ (8002100 <handleStimulation+0x2a0>)
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dc03      	bgt.n	8001efc <handleStimulation+0x9c>
            {
            	GPIOC->BSRR = (uint32_t) GPIO_PIN_4;
 8001ef4:	4b7f      	ldr	r3, [pc, #508]	@ (80020f4 <handleStimulation+0x294>)
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	619a      	str	r2, [r3, #24]
            } else
            {
            	GPIOC->BRR = (uint32_t) GPIO_PIN_4;
            }

            return; //return, as we have nothing else to do
 8001efa:	e178      	b.n	80021ee <handleStimulation+0x38e>
            	GPIOC->BRR = (uint32_t) GPIO_PIN_4;
 8001efc:	4b7d      	ldr	r3, [pc, #500]	@ (80020f4 <handleStimulation+0x294>)
 8001efe:	2210      	movs	r2, #16
 8001f00:	629a      	str	r2, [r3, #40]	@ 0x28
            return; //return, as we have nothing else to do
 8001f02:	e174      	b.n	80021ee <handleStimulation+0x38e>
        } else //pause over, start a burst of waves
        {
            //reset pause counter
            stimulationController.burstPauseIndex = 0;
 8001f04:	4b7a      	ldr	r3, [pc, #488]	@ (80020f0 <handleStimulation+0x290>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

            stimulationController.currentWaveState = upBump;
 8001f0c:	4b78      	ldr	r3, [pc, #480]	@ (80020f0 <handleStimulation+0x290>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

            //set TIM2 clock to frequency needed for the A wave
            htim2.Instance->ARR = timerSetting.A_ARR[stimulationController.channelIndex];
 8001f14:	4b76      	ldr	r3, [pc, #472]	@ (80020f0 <handleStimulation+0x290>)
 8001f16:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b76      	ldr	r3, [pc, #472]	@ (80020f8 <handleStimulation+0x298>)
 8001f1e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001f22:	4b76      	ldr	r3, [pc, #472]	@ (80020fc <handleStimulation+0x29c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	62da      	str	r2, [r3, #44]	@ 0x2c


            stimulationController.burstCounter = stimulationController.maxWaveNumber;
 8001f28:	4b71      	ldr	r3, [pc, #452]	@ (80020f0 <handleStimulation+0x290>)
 8001f2a:	885a      	ldrh	r2, [r3, #2]
 8001f2c:	4b70      	ldr	r3, [pc, #448]	@ (80020f0 <handleStimulation+0x290>)
 8001f2e:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202

            //this counts the number of times that a channel should be repeated for (is held in stimulationController.channelRepeatNumber[channelIndex])
            stimulationController.currentChannelRepeatIndex++;
 8001f32:	4b6f      	ldr	r3, [pc, #444]	@ (80020f0 <handleStimulation+0x290>)
 8001f34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8001f38:	3301      	adds	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4b6c      	ldr	r3, [pc, #432]	@ (80020f0 <handleStimulation+0x290>)
 8001f3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 8001f42:	4b70      	ldr	r3, [pc, #448]	@ (8002104 <handleStimulation+0x2a4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6f      	ldr	r2, [pc, #444]	@ (8002104 <handleStimulation+0x2a4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CNDTR = NS;
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002104 <handleStimulation+0x2a4>)
 8001f50:	2284      	movs	r2, #132	@ 0x84
 8001f52:	605a      	str	r2, [r3, #4]
            SET_BIT(DMA1_Channel2->CCR, 1);
 8001f54:	4b6b      	ldr	r3, [pc, #428]	@ (8002104 <handleStimulation+0x2a4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6a      	ldr	r2, [pc, #424]	@ (8002104 <handleStimulation+0x2a4>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6013      	str	r3, [r2, #0]

            if (stimulationController.currentChannelRepeatIndex >= stimulationController.channelRepeatNumber[stimulationController.channelIndex])
 8001f60:	4b63      	ldr	r3, [pc, #396]	@ (80020f0 <handleStimulation+0x290>)
 8001f62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8001f66:	4a62      	ldr	r2, [pc, #392]	@ (80020f0 <handleStimulation+0x290>)
 8001f68:	f892 206e 	ldrb.w	r2, [r2, #110]	@ 0x6e
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4a60      	ldr	r2, [pc, #384]	@ (80020f0 <handleStimulation+0x290>)
 8001f70:	440a      	add	r2, r1
 8001f72:	7992      	ldrb	r2, [r2, #6]
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d36c      	bcc.n	8002052 <handleStimulation+0x1f2>
            {

                stimulationController.currentChannelRepeatIndex = 0;
 8001f78:	4b5d      	ldr	r3, [pc, #372]	@ (80020f0 <handleStimulation+0x290>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

                //go to next channel
                stimulationController.channelIndex++;
 8001f80:	4b5b      	ldr	r3, [pc, #364]	@ (80020f0 <handleStimulation+0x290>)
 8001f82:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8001f86:	3301      	adds	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b59      	ldr	r3, [pc, #356]	@ (80020f0 <handleStimulation+0x290>)
 8001f8c:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
                if (stimulationController.channelIndex >= stimulationController.validIndeces)
 8001f90:	4b57      	ldr	r3, [pc, #348]	@ (80020f0 <handleStimulation+0x290>)
 8001f92:	f893 206e 	ldrb.w	r2, [r3, #110]	@ 0x6e
 8001f96:	4b56      	ldr	r3, [pc, #344]	@ (80020f0 <handleStimulation+0x290>)
 8001f98:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d331      	bcc.n	8002004 <handleStimulation+0x1a4>
                {
                    stimulationController.channelIndex = 0;
 8001fa0:	4b53      	ldr	r3, [pc, #332]	@ (80020f0 <handleStimulation+0x290>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

                    if (!stimulationController.continuousStimulation) {
 8001fa8:	4b51      	ldr	r3, [pc, #324]	@ (80020f0 <handleStimulation+0x290>)
 8001faa:	785b      	ldrb	r3, [r3, #1]
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d026      	beq.n	8002004 <handleStimulation+0x1a4>

                        //this means that only one stimulation was requested
                        stimulationController.enableStimulation = 0;
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <handleStimulation+0x290>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]

                        CLEAR_BIT(DMA1_Channel2->CCR, 1);
 8001fbc:	4b51      	ldr	r3, [pc, #324]	@ (8002104 <handleStimulation+0x2a4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a50      	ldr	r2, [pc, #320]	@ (8002104 <handleStimulation+0x2a4>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]
                        DMA1_Channel2->CMAR = (uint32_t) &Line_LUT;
 8001fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8002104 <handleStimulation+0x2a4>)
 8001fca:	4a4f      	ldr	r2, [pc, #316]	@ (8002108 <handleStimulation+0x2a8>)
 8001fcc:	60da      	str	r2, [r3, #12]
                        TIM2->ARR = DEFAULT_TIMING;
 8001fce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fd2:	f640 4235 	movw	r2, #3125	@ 0xc35
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
                        DMA1_Channel2->CNDTR = NS;
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8002104 <handleStimulation+0x2a4>)
 8001fda:	2284      	movs	r2, #132	@ 0x84
 8001fdc:	605a      	str	r2, [r3, #4]
                        SET_BIT(DMA1_Channel2->CCR, 1);
 8001fde:	4b49      	ldr	r3, [pc, #292]	@ (8002104 <handleStimulation+0x2a4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a48      	ldr	r2, [pc, #288]	@ (8002104 <handleStimulation+0x2a4>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6013      	str	r3, [r2, #0]

                    	GPIOC->BRR = (uint32_t) GPIO_PIN_4;
 8001fea:	4b42      	ldr	r3, [pc, #264]	@ (80020f4 <handleStimulation+0x294>)
 8001fec:	2210      	movs	r2, #16
 8001fee:	629a      	str	r2, [r3, #40]	@ 0x28


                        stimulationController.burstCounter = stimulationController.maxWaveNumber;
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80020f0 <handleStimulation+0x290>)
 8001ff2:	885a      	ldrh	r2, [r3, #2]
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80020f0 <handleStimulation+0x290>)
 8001ff6:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
                        stimulationController.burstPauseIndex = 0;
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80020f0 <handleStimulation+0x290>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
                        return;
 8002002:	e0f4      	b.n	80021ee <handleStimulation+0x38e>
                    }
                }
                //enablePanel(stimulationController.channelOrder[stimulationController.channelIndex]);
                spiHandler.data[0] = stimulationController.channelOrder[stimulationController.channelIndex];
 8002004:	4b3a      	ldr	r3, [pc, #232]	@ (80020f0 <handleStimulation+0x290>)
 8002006:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800200a:	4a39      	ldr	r2, [pc, #228]	@ (80020f0 <handleStimulation+0x290>)
 800200c:	3338      	adds	r3, #56	@ 0x38
 800200e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002012:	4b3e      	ldr	r3, [pc, #248]	@ (800210c <handleStimulation+0x2ac>)
 8002014:	805a      	strh	r2, [r3, #2]
                spiHandler.enableTransit = true;
 8002016:	4b3d      	ldr	r3, [pc, #244]	@ (800210c <handleStimulation+0x2ac>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]

                hdac1.Instance->DHR12R1 = (uint16_t)  (stimulationController.intensityMultiplier *
 800201c:	4b34      	ldr	r3, [pc, #208]	@ (80020f0 <handleStimulation+0x290>)
 800201e:	ed93 7a83 	vldr	s14, [r3, #524]	@ 0x20c
                        (float) (stimulationController.channelOrderIntensity[stimulationController.channelIndex] & 0x0fff));
 8002022:	4b33      	ldr	r3, [pc, #204]	@ (80020f0 <handleStimulation+0x290>)
 8002024:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8002028:	4a31      	ldr	r2, [pc, #196]	@ (80020f0 <handleStimulation+0x290>)
 800202a:	339c      	adds	r3, #156	@ 0x9c
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	885b      	ldrh	r3, [r3, #2]
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                hdac1.Instance->DHR12R1 = (uint16_t)  (stimulationController.intensityMultiplier *
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002046:	ee17 3a90 	vmov	r3, s15
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b30      	ldr	r3, [pc, #192]	@ (8002110 <handleStimulation+0x2b0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	609a      	str	r2, [r3, #8]
        }
    }
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, debugPin);
//    debugPin = !debugPin;

    switch (stimulationController.currentWaveState)
 8002052:	4b27      	ldr	r3, [pc, #156]	@ (80020f0 <handleStimulation+0x290>)
 8002054:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8002058:	2b04      	cmp	r3, #4
 800205a:	f200 80af 	bhi.w	80021bc <handleStimulation+0x35c>
 800205e:	a201      	add	r2, pc, #4	@ (adr r2, 8002064 <handleStimulation+0x204>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	08002079 	.word	0x08002079
 8002068:	080020b3 	.word	0x080020b3
 800206c:	08002119 	.word	0x08002119
 8002070:	08002153 	.word	0x08002153
 8002074:	08002181 	.word	0x08002181
    {
        case upBump:

            //disable channel
            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 8002078:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <handleStimulation+0x2a4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a21      	ldr	r2, [pc, #132]	@ (8002104 <handleStimulation+0x2a4>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6013      	str	r3, [r2, #0]
            //update array pointer
            DMA1_Channel2->CMAR = (uint32_t) &A_wave;
 8002084:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <handleStimulation+0x2a4>)
 8002086:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <handleStimulation+0x2b4>)
 8002088:	60da      	str	r2, [r3, #12]
            //set timer setting
            TIM2->ARR = timerSetting.A_ARR[stimulationController.channelIndex];
 800208a:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <handleStimulation+0x290>)
 800208c:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8002090:	461a      	mov	r2, r3
 8002092:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <handleStimulation+0x298>)
 8002094:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002098:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800209c:	62da      	str	r2, [r3, #44]	@ 0x2c
            //update DMA counter
            DMA1_Channel2->CNDTR = NS;
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <handleStimulation+0x2a4>)
 80020a0:	2284      	movs	r2, #132	@ 0x84
 80020a2:	605a      	str	r2, [r3, #4]
            //enable channel
            SET_BIT(DMA1_Channel2->CCR, 1);
 80020a4:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <handleStimulation+0x2a4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <handleStimulation+0x2a4>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6013      	str	r3, [r2, #0]
            break;
 80020b0:	e084      	b.n	80021bc <handleStimulation+0x35c>

        case shortFlat:

            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <handleStimulation+0x2a4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a13      	ldr	r2, [pc, #76]	@ (8002104 <handleStimulation+0x2a4>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CMAR = (uint32_t) &Line_LUT;
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <handleStimulation+0x2a4>)
 80020c0:	4a11      	ldr	r2, [pc, #68]	@ (8002108 <handleStimulation+0x2a8>)
 80020c2:	60da      	str	r2, [r3, #12]
            TIM2->ARR = timerSetting.B_ARR[stimulationController.channelIndex];
 80020c4:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <handleStimulation+0x290>)
 80020c6:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80020ca:	4a0b      	ldr	r2, [pc, #44]	@ (80020f8 <handleStimulation+0x298>)
 80020cc:	3364      	adds	r3, #100	@ 0x64
 80020ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020d6:	62da      	str	r2, [r3, #44]	@ 0x2c
            DMA1_Channel2->CNDTR = stimulationController.shortFlatNS;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <handleStimulation+0x290>)
 80020da:	f893 2207 	ldrb.w	r2, [r3, #519]	@ 0x207
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <handleStimulation+0x2a4>)
 80020e0:	605a      	str	r2, [r3, #4]
            SET_BIT(DMA1_Channel2->CCR, 1);
 80020e2:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <handleStimulation+0x2a4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a07      	ldr	r2, [pc, #28]	@ (8002104 <handleStimulation+0x2a4>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6013      	str	r3, [r2, #0]

            break;
 80020ee:	e065      	b.n	80021bc <handleStimulation+0x35c>
 80020f0:	20000b80 	.word	0x20000b80
 80020f4:	48000800 	.word	0x48000800
 80020f8:	20000860 	.word	0x20000860
 80020fc:	2000010c 	.word	0x2000010c
 8002100:	00061a7f 	.word	0x00061a7f
 8002104:	4002001c 	.word	0x4002001c
 8002108:	20000648 	.word	0x20000648
 800210c:	20000090 	.word	0x20000090
 8002110:	20000094 	.word	0x20000094
 8002114:	20000228 	.word	0x20000228

        case downBump:

            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 8002118:	4b37      	ldr	r3, [pc, #220]	@ (80021f8 <handleStimulation+0x398>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a36      	ldr	r2, [pc, #216]	@ (80021f8 <handleStimulation+0x398>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CMAR = (uint32_t) &C_wave;
 8002124:	4b34      	ldr	r3, [pc, #208]	@ (80021f8 <handleStimulation+0x398>)
 8002126:	4a35      	ldr	r2, [pc, #212]	@ (80021fc <handleStimulation+0x39c>)
 8002128:	60da      	str	r2, [r3, #12]
            TIM2->ARR = timerSetting.C_ARR[stimulationController.channelIndex];
 800212a:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <handleStimulation+0x3a0>)
 800212c:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8002130:	4a34      	ldr	r2, [pc, #208]	@ (8002204 <handleStimulation+0x3a4>)
 8002132:	33c8      	adds	r3, #200	@ 0xc8
 8002134:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002138:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800213c:	62da      	str	r2, [r3, #44]	@ 0x2c

            DMA1_Channel2->CNDTR = NS;
 800213e:	4b2e      	ldr	r3, [pc, #184]	@ (80021f8 <handleStimulation+0x398>)
 8002140:	2284      	movs	r2, #132	@ 0x84
 8002142:	605a      	str	r2, [r3, #4]
            SET_BIT(DMA1_Channel2->CCR, 1);
 8002144:	4b2c      	ldr	r3, [pc, #176]	@ (80021f8 <handleStimulation+0x398>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2b      	ldr	r2, [pc, #172]	@ (80021f8 <handleStimulation+0x398>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6013      	str	r3, [r2, #0]

            break;
 8002150:	e034      	b.n	80021bc <handleStimulation+0x35c>

        case delay2:

            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 8002152:	4b29      	ldr	r3, [pc, #164]	@ (80021f8 <handleStimulation+0x398>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a28      	ldr	r2, [pc, #160]	@ (80021f8 <handleStimulation+0x398>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CNDTR = 2;
 800215e:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <handleStimulation+0x398>)
 8002160:	2202      	movs	r2, #2
 8002162:	605a      	str	r2, [r3, #4]
            DMA1_Channel2->CMAR = (uint32_t) &Dummy_Cycle;
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <handleStimulation+0x398>)
 8002166:	4a28      	ldr	r2, [pc, #160]	@ (8002208 <handleStimulation+0x3a8>)
 8002168:	60da      	str	r2, [r3, #12]
            TIM2->ARR = 10;
 800216a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800216e:	220a      	movs	r2, #10
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c
            SET_BIT(DMA1_Channel2->CCR, 1);
 8002172:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <handleStimulation+0x398>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a20      	ldr	r2, [pc, #128]	@ (80021f8 <handleStimulation+0x398>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6013      	str	r3, [r2, #0]

            break;
 800217e:	e01d      	b.n	80021bc <handleStimulation+0x35c>

        case longFlat:

            CLEAR_BIT(DMA1_Channel2->CCR, 1);
 8002180:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <handleStimulation+0x398>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <handleStimulation+0x398>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6013      	str	r3, [r2, #0]
            DMA1_Channel2->CMAR = (uint32_t) &Line_LUT;
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <handleStimulation+0x398>)
 800218e:	4a1f      	ldr	r2, [pc, #124]	@ (800220c <handleStimulation+0x3ac>)
 8002190:	60da      	str	r2, [r3, #12]
            TIM2->ARR = timerSetting.D_ARR[stimulationController.channelIndex];
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <handleStimulation+0x3a0>)
 8002194:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8002198:	4a1a      	ldr	r2, [pc, #104]	@ (8002204 <handleStimulation+0x3a4>)
 800219a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800219e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80021a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021a6:	62da      	str	r2, [r3, #44]	@ 0x2c
            DMA1_Channel2->CNDTR = NS;
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <handleStimulation+0x398>)
 80021aa:	2284      	movs	r2, #132	@ 0x84
 80021ac:	605a      	str	r2, [r3, #4]
            SET_BIT(DMA1_Channel2->CCR, 1);
 80021ae:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <handleStimulation+0x398>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <handleStimulation+0x398>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6013      	str	r3, [r2, #0]
//                stimulationController.panelSwitchRequest = false;
//                //enablePanel(stimulationController.panelSwitchAddress);
//            }


            break;
 80021ba:	bf00      	nop
    }

    stimulationController.currentWaveState++;
 80021bc:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <handleStimulation+0x3a0>)
 80021be:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80021c2:	3301      	adds	r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <handleStimulation+0x3a0>)
 80021c8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
    if (stimulationController.currentWaveState > longFlat)
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <handleStimulation+0x3a0>)
 80021ce:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d90b      	bls.n	80021ee <handleStimulation+0x38e>
    {
        stimulationController.burstCounter--;
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <handleStimulation+0x3a0>)
 80021d8:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <handleStimulation+0x3a0>)
 80021e2:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
        stimulationController.currentWaveState = upBump;
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <handleStimulation+0x3a0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
    }

}
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	4002001c 	.word	0x4002001c
 80021fc:	20000438 	.word	0x20000438
 8002200:	20000b80 	.word	0x20000b80
 8002204:	20000860 	.word	0x20000860
 8002208:	20000858 	.word	0x20000858
 800220c:	20000648 	.word	0x20000648

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_MspInit+0x44>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221a:	4a0e      	ldr	r2, [pc, #56]	@ (8002254 <HAL_MspInit+0x44>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6613      	str	r3, [r2, #96]	@ 0x60
 8002222:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <HAL_MspInit+0x44>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_MspInit+0x44>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002232:	4a08      	ldr	r2, [pc, #32]	@ (8002254 <HAL_MspInit+0x44>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	@ 0x58
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_MspInit+0x44>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	@ 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a15      	ldr	r2, [pc, #84]	@ (80022cc <HAL_DAC_MspInit+0x74>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d124      	bne.n	80022c4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_DAC_MspInit+0x78>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	4a14      	ldr	r2, [pc, #80]	@ (80022d0 <HAL_DAC_MspInit+0x78>)
 8002280:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002284:	6593      	str	r3, [r2, #88]	@ 0x58
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_DAC_MspInit+0x78>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <HAL_DAC_MspInit+0x78>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	4a0e      	ldr	r2, [pc, #56]	@ (80022d0 <HAL_DAC_MspInit+0x78>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229e:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <HAL_DAC_MspInit+0x78>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022aa:	2310      	movs	r3, #16
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ae:	2303      	movs	r3, #3
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022c0:	f001 f808 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	@ 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40007400 	.word	0x40007400
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	@ 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a17      	ldr	r2, [pc, #92]	@ (8002350 <HAL_SPI_MspInit+0x7c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d128      	bne.n	8002348 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022f6:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <HAL_SPI_MspInit+0x80>)
 80022f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fa:	4a16      	ldr	r2, [pc, #88]	@ (8002354 <HAL_SPI_MspInit+0x80>)
 80022fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002300:	6613      	str	r3, [r2, #96]	@ 0x60
 8002302:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <HAL_SPI_MspInit+0x80>)
 8002304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_SPI_MspInit+0x80>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <HAL_SPI_MspInit+0x80>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_SPI_MspInit+0x80>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002326:	23e0      	movs	r3, #224	@ 0xe0
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002336:	2305      	movs	r3, #5
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002344:	f000 ffc6 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	@ 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40013000 	.word	0x40013000
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002368:	d137      	bne.n	80023da <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236a:	4b1e      	ldr	r3, [pc, #120]	@ (80023e4 <HAL_TIM_Base_MspInit+0x8c>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <HAL_TIM_Base_MspInit+0x8c>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6593      	str	r3, [r2, #88]	@ 0x58
 8002376:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <HAL_TIM_Base_MspInit+0x8c>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8002382:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 8002384:	4a19      	ldr	r2, [pc, #100]	@ (80023ec <HAL_TIM_Base_MspInit+0x94>)
 8002386:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_4;
 8002388:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 800238a:	2204      	movs	r2, #4
 800238c:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800238e:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 8002390:	2210      	movs	r2, #16
 8002392:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002394:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 800239c:	2280      	movs	r2, #128	@ 0x80
 800239e:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 80023a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023a6:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 80023aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023ae:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 80023b2:	2220      	movs	r2, #32
 80023b4:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023b6:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 80023b8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80023bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 80023be:	480a      	ldr	r0, [pc, #40]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 80023c0:	f000 fd12 	bl	8002de8 <HAL_DMA_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 80023ca:	f7ff f9cb 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a05      	ldr	r2, [pc, #20]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 80023d2:	621a      	str	r2, [r3, #32]
 80023d4:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <HAL_TIM_Base_MspInit+0x90>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	20000158 	.word	0x20000158
 80023ec:	4002001c 	.word	0x4002001c

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0ac      	sub	sp, #176	@ 0xb0
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2288      	movs	r2, #136	@ 0x88
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f005 fa73 	bl	80078fc <memset>
  if(huart->Instance==USART2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a25      	ldr	r2, [pc, #148]	@ (80024b0 <HAL_UART_MspInit+0xc0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d143      	bne.n	80024a8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002420:	2302      	movs	r3, #2
 8002422:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002424:	2300      	movs	r3, #0
 8002426:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4618      	mov	r0, r3
 800242e:	f001 ff77 	bl	8004320 <HAL_RCCEx_PeriphCLKConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002438:	f7ff f994 	bl	8001764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800243c:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 8002442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002446:	6593      	str	r3, [r2, #88]	@ 0x58
 8002448:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b17      	ldr	r3, [pc, #92]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002458:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800246c:	230c      	movs	r3, #12
 800246e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002484:	2307      	movs	r3, #7
 8002486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002494:	f000 ff1e 	bl	80032d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	2026      	movs	r0, #38	@ 0x26
 800249e:	f000 fad6 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024a2:	2026      	movs	r0, #38	@ 0x26
 80024a4:	f000 faef 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024a8:	bf00      	nop
 80024aa:	37b0      	adds	r7, #176	@ 0xb0
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40004400 	.word	0x40004400
 80024b4:	40021000 	.word	0x40021000

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <NMI_Handler+0x4>

080024c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <HardFault_Handler+0x4>

080024c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <MemManage_Handler+0x4>

080024d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <BusFault_Handler+0x4>

080024d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <UsageFault_Handler+0x4>

080024e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250e:	f000 f97f 	bl	8002810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	//disable timer
	CLEAR_BIT(TIM2->CR1, 1);
 800251c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800252c:	4807      	ldr	r0, [pc, #28]	@ (800254c <DMA1_Channel2_IRQHandler+0x34>)
 800252e:	f000 fdf2 	bl	8003116 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

	handleStimulation();
 8002532:	f7ff fc95 	bl	8001e60 <handleStimulation>

	//enable timer
	SET_BIT(TIM2->CR1, 1);
 8002536:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6013      	str	r3, [r2, #0]

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000158 	.word	0x20000158

08002550 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


	//check if timeout flag is set
	if ((huart2.Instance->ISR & 0x800) != 0)
 8002554:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <USART2_IRQHandler+0x50>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <USART2_IRQHandler+0x18>
	{
	  UART_timeOutOccured = true;
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <USART2_IRQHandler+0x54>)
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
	}



  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002568:	480d      	ldr	r0, [pc, #52]	@ (80025a0 <USART2_IRQHandler+0x50>)
 800256a:	f003 fcab 	bl	8005ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  // on the first data byte start the timeout counter
  if (huart2.RxXferCount == RX_SIZE - 1)
 800256e:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <USART2_IRQHandler+0x50>)
 8002570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b07      	cmp	r3, #7
 8002578:	d10f      	bne.n	800259a <USART2_IRQHandler+0x4a>
  {
	  SET_BIT(huart2.Instance->CR1, USART_CR1_RTOIE);
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <USART2_IRQHandler+0x50>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <USART2_IRQHandler+0x50>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002588:	601a      	str	r2, [r3, #0]
	  SET_BIT(huart2.Instance->CR2, USART_CR2_RTOEN);
 800258a:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <USART2_IRQHandler+0x50>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <USART2_IRQHandler+0x50>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002598:	605a      	str	r2, [r3, #4]
  }


  /* USER CODE END USART2_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200001a0 	.word	0x200001a0
 80025a4:	20000085 	.word	0x20000085

080025a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e00a      	b.n	80025d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ba:	f3af 8000 	nop.w
 80025be:	4601      	mov	r1, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	60ba      	str	r2, [r7, #8]
 80025c6:	b2ca      	uxtb	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3301      	adds	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dbf0      	blt.n	80025ba <_read+0x12>
  }

  return len;
 80025d8:	687b      	ldr	r3, [r7, #4]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e009      	b.n	8002608 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	60ba      	str	r2, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fdbb 	bl	8001178 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3301      	adds	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	dbf1      	blt.n	80025f4 <_write+0x12>
  }
  return len;
 8002610:	687b      	ldr	r3, [r7, #4]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_close>:

int _close(int file)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002642:	605a      	str	r2, [r3, #4]
  return 0;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_isatty>:

int _isatty(int file)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800268c:	4a14      	ldr	r2, [pc, #80]	@ (80026e0 <_sbrk+0x5c>)
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <_sbrk+0x60>)
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <_sbrk+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a0:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <_sbrk+0x64>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	@ (80026ec <_sbrk+0x68>)
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026a6:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d207      	bcs.n	80026c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b4:	f005 f970 	bl	8007998 <__errno>
 80026b8:	4603      	mov	r3, r0
 80026ba:	220c      	movs	r2, #12
 80026bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	e009      	b.n	80026d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ca:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	4a05      	ldr	r2, [pc, #20]	@ (80026e8 <_sbrk+0x64>)
 80026d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20018000 	.word	0x20018000
 80026e4:	00000400 	.word	0x00000400
 80026e8:	20000d90 	.word	0x20000d90
 80026ec:	20000ee8 	.word	0x20000ee8

080026f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026f4:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <SystemInit+0x20>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fa:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <SystemInit+0x20>)
 80026fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800274c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002718:	f7ff ffea 	bl	80026f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800271c:	480c      	ldr	r0, [pc, #48]	@ (8002750 <LoopForever+0x6>)
  ldr r1, =_edata
 800271e:	490d      	ldr	r1, [pc, #52]	@ (8002754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002720:	4a0d      	ldr	r2, [pc, #52]	@ (8002758 <LoopForever+0xe>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800272c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002732:	4a0a      	ldr	r2, [pc, #40]	@ (800275c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002734:	4c0a      	ldr	r4, [pc, #40]	@ (8002760 <LoopForever+0x16>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002742:	f005 f92f 	bl	80079a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002746:	f7fe fd29 	bl	800119c <main>

0800274a <LoopForever>:

LoopForever:
    b LoopForever
 800274a:	e7fe      	b.n	800274a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800274c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002754:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002758:	08007fa0 	.word	0x08007fa0
  ldr r2, =_sbss
 800275c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002760:	20000ee4 	.word	0x20000ee4

08002764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002764:	e7fe      	b.n	8002764 <ADC1_2_IRQHandler>

08002766 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002770:	2003      	movs	r0, #3
 8002772:	f000 f961 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002776:	200f      	movs	r0, #15
 8002778:	f000 f80e 	bl	8002798 <HAL_InitTick>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	e001      	b.n	800278c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002788:	f7ff fd42 	bl	8002210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800278c:	79fb      	ldrb	r3, [r7, #7]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027a4:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <HAL_InitTick+0x6c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d023      	beq.n	80027f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027ac:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <HAL_InitTick+0x70>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <HAL_InitTick+0x6c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f96d 	bl	8002aa2 <HAL_SYSTICK_Config>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d809      	bhi.n	80027e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f000 f937 	bl	8002a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027e0:	4a0a      	ldr	r2, [pc, #40]	@ (800280c <HAL_InitTick+0x74>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e007      	b.n	80027f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	e004      	b.n	80027f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e001      	b.n	80027f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000008 	.word	0x20000008
 8002808:	20000000 	.word	0x20000000
 800280c:	20000004 	.word	0x20000004

08002810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_IncTick+0x20>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_IncTick+0x24>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4413      	add	r3, r2
 8002820:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <HAL_IncTick+0x24>)
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000008 	.word	0x20000008
 8002834:	20000d94 	.word	0x20000d94

08002838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <HAL_GetTick+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000d94 	.word	0x20000d94

08002850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff ffee 	bl	8002838 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d005      	beq.n	8002876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <HAL_Delay+0x44>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002876:	bf00      	nop
 8002878:	f7ff ffde 	bl	8002838 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d8f7      	bhi.n	8002878 <HAL_Delay+0x28>
  {
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000008 	.word	0x20000008

08002898 <__NVIC_SetPriorityGrouping>:
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ca:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	60d3      	str	r3, [r2, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_GetPriorityGrouping>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4907      	ldr	r1, [pc, #28]	@ (8002934 <__NVIC_EnableIRQ+0x38>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_SetPriority>:
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	@ (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	@ (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	@ 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	@ 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff29 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff3e 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff31 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffa2 	bl	80029f4 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e014      	b.n	8002af6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	791b      	ldrb	r3, [r3, #4]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fbbb 	bl	8002258 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	795b      	ldrb	r3, [r3, #5]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_DAC_Start+0x16>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e03b      	b.n	8002b8c <HAL_DAC_Start+0x8e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d118      	bne.n	8002b7e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	e00f      	b.n	8002b7e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002b68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b6c:	d107      	bne.n	8002b7e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0202 	orr.w	r2, r2, #2
 8002b7c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	795b      	ldrb	r3, [r3, #5]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_DAC_ConfigChannel+0x1c>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e114      	b.n	8002dde <HAL_DAC_ConfigChannel+0x246>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	f040 8081 	bne.w	8002ccc <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002bca:	f7ff fe35 	bl	8002838 <HAL_GetTick>
 8002bce:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d140      	bne.n	8002c58 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002bd6:	e018      	b.n	8002c0a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002bd8:	f7ff fe2e 	bl	8002838 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d911      	bls.n	8002c0a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f043 0208 	orr.w	r2, r3, #8
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2203      	movs	r2, #3
 8002c04:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0e9      	b.n	8002dde <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1df      	bne.n	8002bd8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f7ff fe19 	bl	8002850 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	6992      	ldr	r2, [r2, #24]
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c28:	e023      	b.n	8002c72 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c2a:	f7ff fe05 	bl	8002838 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d90f      	bls.n	8002c58 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da0a      	bge.n	8002c58 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f043 0208 	orr.w	r2, r3, #8
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2203      	movs	r2, #3
 8002c52:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0c2      	b.n	8002dde <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	dbe3      	blt.n	8002c2a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7ff fdf4 	bl	8002850 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	6992      	ldr	r2, [r2, #24]
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	ea02 0103 	and.w	r1, r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	21ff      	movs	r1, #255	@ 0xff
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	ea02 0103 	and.w	r1, r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	6a1a      	ldr	r2, [r3, #32]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d11d      	bne.n	8002d10 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cda:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	221f      	movs	r2, #31
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2207      	movs	r2, #7
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6819      	ldr	r1, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	400a      	ands	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	22c0      	movs	r2, #192	@ 0xc0
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	400a      	ands	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e098      	b.n	8002f2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b4d      	ldr	r3, [pc, #308]	@ (8002f38 <HAL_DMA_Init+0x150>)
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d80f      	bhi.n	8002e26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f3c <HAL_DMA_Init+0x154>)
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a4b      	ldr	r2, [pc, #300]	@ (8002f40 <HAL_DMA_Init+0x158>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	009a      	lsls	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a48      	ldr	r2, [pc, #288]	@ (8002f44 <HAL_DMA_Init+0x15c>)
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e24:	e00e      	b.n	8002e44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b46      	ldr	r3, [pc, #280]	@ (8002f48 <HAL_DMA_Init+0x160>)
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a43      	ldr	r2, [pc, #268]	@ (8002f40 <HAL_DMA_Init+0x158>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	009a      	lsls	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a42      	ldr	r2, [pc, #264]	@ (8002f4c <HAL_DMA_Init+0x164>)
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e9e:	d039      	beq.n	8002f14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	4a27      	ldr	r2, [pc, #156]	@ (8002f44 <HAL_DMA_Init+0x15c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d11a      	bne.n	8002ee0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002eaa:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <HAL_DMA_Init+0x168>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f003 031c 	and.w	r3, r3, #28
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4924      	ldr	r1, [pc, #144]	@ (8002f50 <HAL_DMA_Init+0x168>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ec4:	4b22      	ldr	r3, [pc, #136]	@ (8002f50 <HAL_DMA_Init+0x168>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed0:	f003 031c 	and.w	r3, r3, #28
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	491d      	ldr	r1, [pc, #116]	@ (8002f50 <HAL_DMA_Init+0x168>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
 8002ede:	e019      	b.n	8002f14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <HAL_DMA_Init+0x16c>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	f003 031c 	and.w	r3, r3, #28
 8002eec:	210f      	movs	r1, #15
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	4917      	ldr	r1, [pc, #92]	@ (8002f54 <HAL_DMA_Init+0x16c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002efa:	4b16      	ldr	r3, [pc, #88]	@ (8002f54 <HAL_DMA_Init+0x16c>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	f003 031c 	and.w	r3, r3, #28
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	4911      	ldr	r1, [pc, #68]	@ (8002f54 <HAL_DMA_Init+0x16c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40020407 	.word	0x40020407
 8002f3c:	bffdfff8 	.word	0xbffdfff8
 8002f40:	cccccccd 	.word	0xcccccccd
 8002f44:	40020000 	.word	0x40020000
 8002f48:	bffdfbf8 	.word	0xbffdfbf8
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	400200a8 	.word	0x400200a8
 8002f54:	400204a8 	.word	0x400204a8

08002f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_DMA_Start_IT+0x20>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e04b      	b.n	8003010 <HAL_DMA_Start_IT+0xb8>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d13a      	bne.n	8003002 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f95f 	bl	8003274 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 020e 	orr.w	r2, r2, #14
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e00f      	b.n	8002ff0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 020a 	orr.w	r2, r2, #10
 8002fee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e005      	b.n	800300e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800300a:	2302      	movs	r3, #2
 800300c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800300e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d008      	beq.n	8003042 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2204      	movs	r2, #4
 8003034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e022      	b.n	8003088 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 020e 	bic.w	r2, r2, #14
 8003050:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	f003 021c 	and.w	r2, r3, #28
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d005      	beq.n	80030b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2204      	movs	r2, #4
 80030b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	e029      	b.n	800310c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 020e 	bic.w	r2, r2, #14
 80030c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030dc:	f003 021c 	and.w	r2, r3, #28
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
    }
  }
  return status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	f003 031c 	and.w	r3, r3, #28
 8003136:	2204      	movs	r2, #4
 8003138:	409a      	lsls	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d026      	beq.n	8003190 <HAL_DMA_IRQHandler+0x7a>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d021      	beq.n	8003190 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d107      	bne.n	800316a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0204 	bic.w	r2, r2, #4
 8003168:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	f003 021c 	and.w	r2, r3, #28
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	2104      	movs	r1, #4
 8003178:	fa01 f202 	lsl.w	r2, r1, r2
 800317c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	2b00      	cmp	r3, #0
 8003184:	d071      	beq.n	800326a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800318e:	e06c      	b.n	800326a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003194:	f003 031c 	and.w	r3, r3, #28
 8003198:	2202      	movs	r2, #2
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d02e      	beq.n	8003202 <HAL_DMA_IRQHandler+0xec>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d029      	beq.n	8003202 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 020a 	bic.w	r2, r2, #10
 80031ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d8:	f003 021c 	and.w	r2, r3, #28
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	2102      	movs	r1, #2
 80031e2:	fa01 f202 	lsl.w	r2, r1, r2
 80031e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d038      	beq.n	800326a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003200:	e033      	b.n	800326a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f003 031c 	and.w	r3, r3, #28
 800320a:	2208      	movs	r2, #8
 800320c:	409a      	lsls	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d02a      	beq.n	800326c <HAL_DMA_IRQHandler+0x156>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d025      	beq.n	800326c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 020e 	bic.w	r2, r2, #14
 800322e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003234:	f003 021c 	and.w	r2, r3, #28
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800326a:	bf00      	nop
 800326c:	bf00      	nop
}
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f003 021c 	and.w	r2, r3, #28
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f202 	lsl.w	r2, r1, r2
 8003294:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d108      	bne.n	80032b8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032b6:	e007      	b.n	80032c8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	60da      	str	r2, [r3, #12]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e2:	e17f      	b.n	80035e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2101      	movs	r1, #1
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8171 	beq.w	80035de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d005      	beq.n	8003314 <HAL_GPIO_Init+0x40>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d130      	bne.n	8003376 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800334a:	2201      	movs	r2, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 0201 	and.w	r2, r3, #1
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b03      	cmp	r3, #3
 8003380:	d118      	bne.n	80033b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003386:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003388:	2201      	movs	r2, #1
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	08db      	lsrs	r3, r3, #3
 800339e:	f003 0201 	and.w	r2, r3, #1
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d017      	beq.n	80033f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d123      	bne.n	8003444 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	08da      	lsrs	r2, r3, #3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3208      	adds	r2, #8
 8003404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	220f      	movs	r2, #15
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	08da      	lsrs	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3208      	adds	r2, #8
 800343e:	6939      	ldr	r1, [r7, #16]
 8003440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0203 	and.w	r2, r3, #3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80ac 	beq.w	80035de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	4b5f      	ldr	r3, [pc, #380]	@ (8003604 <HAL_GPIO_Init+0x330>)
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	4a5e      	ldr	r2, [pc, #376]	@ (8003604 <HAL_GPIO_Init+0x330>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6613      	str	r3, [r2, #96]	@ 0x60
 8003492:	4b5c      	ldr	r3, [pc, #368]	@ (8003604 <HAL_GPIO_Init+0x330>)
 8003494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800349e:	4a5a      	ldr	r2, [pc, #360]	@ (8003608 <HAL_GPIO_Init+0x334>)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	3302      	adds	r3, #2
 80034a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	220f      	movs	r2, #15
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034c8:	d025      	beq.n	8003516 <HAL_GPIO_Init+0x242>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4f      	ldr	r2, [pc, #316]	@ (800360c <HAL_GPIO_Init+0x338>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d01f      	beq.n	8003512 <HAL_GPIO_Init+0x23e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003610 <HAL_GPIO_Init+0x33c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d019      	beq.n	800350e <HAL_GPIO_Init+0x23a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003614 <HAL_GPIO_Init+0x340>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_GPIO_Init+0x236>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003618 <HAL_GPIO_Init+0x344>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00d      	beq.n	8003506 <HAL_GPIO_Init+0x232>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4b      	ldr	r2, [pc, #300]	@ (800361c <HAL_GPIO_Init+0x348>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d007      	beq.n	8003502 <HAL_GPIO_Init+0x22e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003620 <HAL_GPIO_Init+0x34c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_GPIO_Init+0x22a>
 80034fa:	2306      	movs	r3, #6
 80034fc:	e00c      	b.n	8003518 <HAL_GPIO_Init+0x244>
 80034fe:	2307      	movs	r3, #7
 8003500:	e00a      	b.n	8003518 <HAL_GPIO_Init+0x244>
 8003502:	2305      	movs	r3, #5
 8003504:	e008      	b.n	8003518 <HAL_GPIO_Init+0x244>
 8003506:	2304      	movs	r3, #4
 8003508:	e006      	b.n	8003518 <HAL_GPIO_Init+0x244>
 800350a:	2303      	movs	r3, #3
 800350c:	e004      	b.n	8003518 <HAL_GPIO_Init+0x244>
 800350e:	2302      	movs	r3, #2
 8003510:	e002      	b.n	8003518 <HAL_GPIO_Init+0x244>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_GPIO_Init+0x244>
 8003516:	2300      	movs	r3, #0
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	f002 0203 	and.w	r2, r2, #3
 800351e:	0092      	lsls	r2, r2, #2
 8003520:	4093      	lsls	r3, r2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003528:	4937      	ldr	r1, [pc, #220]	@ (8003608 <HAL_GPIO_Init+0x334>)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003536:	4b3b      	ldr	r3, [pc, #236]	@ (8003624 <HAL_GPIO_Init+0x350>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	43db      	mvns	r3, r3
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4013      	ands	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800355a:	4a32      	ldr	r2, [pc, #200]	@ (8003624 <HAL_GPIO_Init+0x350>)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003560:	4b30      	ldr	r3, [pc, #192]	@ (8003624 <HAL_GPIO_Init+0x350>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003584:	4a27      	ldr	r2, [pc, #156]	@ (8003624 <HAL_GPIO_Init+0x350>)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800358a:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <HAL_GPIO_Init+0x350>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	43db      	mvns	r3, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003624 <HAL_GPIO_Init+0x350>)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_GPIO_Init+0x350>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035d8:	4a12      	ldr	r2, [pc, #72]	@ (8003624 <HAL_GPIO_Init+0x350>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	3301      	adds	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f47f ae78 	bne.w	80032e4 <HAL_GPIO_Init+0x10>
  }
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	40010000 	.word	0x40010000
 800360c:	48000400 	.word	0x48000400
 8003610:	48000800 	.word	0x48000800
 8003614:	48000c00 	.word	0x48000c00
 8003618:	48001000 	.word	0x48001000
 800361c:	48001400 	.word	0x48001400
 8003620:	48001800 	.word	0x48001800
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
 8003634:	4613      	mov	r3, r2
 8003636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003638:	787b      	ldrb	r3, [r7, #1]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003644:	e002      	b.n	800364c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800365c:	4b04      	ldr	r3, [pc, #16]	@ (8003670 <HAL_PWREx_GetVoltageRange+0x18>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40007000 	.word	0x40007000

08003674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003682:	d130      	bne.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003684:	4b23      	ldr	r3, [pc, #140]	@ (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800368c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003690:	d038      	beq.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003692:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800369a:	4a1e      	ldr	r2, [pc, #120]	@ (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2232      	movs	r2, #50	@ 0x32
 80036a8:	fb02 f303 	mul.w	r3, r2, r3
 80036ac:	4a1b      	ldr	r2, [pc, #108]	@ (800371c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0c9b      	lsrs	r3, r3, #18
 80036b4:	3301      	adds	r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b8:	e002      	b.n	80036c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3b01      	subs	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c0:	4b14      	ldr	r3, [pc, #80]	@ (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036cc:	d102      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f2      	bne.n	80036ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e0:	d110      	bne.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e00f      	b.n	8003706 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f2:	d007      	beq.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036f4:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036fc:	4a05      	ldr	r2, [pc, #20]	@ (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003702:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40007000 	.word	0x40007000
 8003718:	20000000 	.word	0x20000000
 800371c:	431bde83 	.word	0x431bde83

08003720 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e3ca      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003732:	4b97      	ldr	r3, [pc, #604]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373c:	4b94      	ldr	r3, [pc, #592]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80e4 	beq.w	800391c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_RCC_OscConfig+0x4a>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	f040 808b 	bne.w	8003878 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b01      	cmp	r3, #1
 8003766:	f040 8087 	bne.w	8003878 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800376a:	4b89      	ldr	r3, [pc, #548]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_RCC_OscConfig+0x62>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e3a2      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	4b82      	ldr	r3, [pc, #520]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <HAL_RCC_OscConfig+0x7c>
 8003792:	4b7f      	ldr	r3, [pc, #508]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800379a:	e005      	b.n	80037a8 <HAL_RCC_OscConfig+0x88>
 800379c:	4b7c      	ldr	r3, [pc, #496]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d223      	bcs.n	80037f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fd55 	bl	8004260 <RCC_SetFlashLatencyFromMSIRange>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e383      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037c0:	4b73      	ldr	r3, [pc, #460]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a72      	ldr	r2, [pc, #456]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80037c6:	f043 0308 	orr.w	r3, r3, #8
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b70      	ldr	r3, [pc, #448]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	496d      	ldr	r1, [pc, #436]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037de:	4b6c      	ldr	r3, [pc, #432]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	4968      	ldr	r1, [pc, #416]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
 80037f2:	e025      	b.n	8003840 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037f4:	4b66      	ldr	r3, [pc, #408]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a65      	ldr	r2, [pc, #404]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80037fa:	f043 0308 	orr.w	r3, r3, #8
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b63      	ldr	r3, [pc, #396]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4960      	ldr	r1, [pc, #384]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003812:	4b5f      	ldr	r3, [pc, #380]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	495b      	ldr	r1, [pc, #364]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d109      	bne.n	8003840 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fd15 	bl	8004260 <RCC_SetFlashLatencyFromMSIRange>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e343      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003840:	f000 fc4a 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b52      	ldr	r3, [pc, #328]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	4950      	ldr	r1, [pc, #320]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	4a4e      	ldr	r2, [pc, #312]	@ (8003998 <HAL_RCC_OscConfig+0x278>)
 800385e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003860:	4b4e      	ldr	r3, [pc, #312]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe ff97 	bl	8002798 <HAL_InitTick>
 800386a:	4603      	mov	r3, r0
 800386c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d052      	beq.n	800391a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	e327      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d032      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003880:	4b43      	ldr	r3, [pc, #268]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a42      	ldr	r2, [pc, #264]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800388c:	f7fe ffd4 	bl	8002838 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003894:	f7fe ffd0 	bl	8002838 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e310      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038b2:	4b37      	ldr	r3, [pc, #220]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a36      	ldr	r2, [pc, #216]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b34      	ldr	r3, [pc, #208]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4931      	ldr	r1, [pc, #196]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	492c      	ldr	r1, [pc, #176]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
 80038e4:	e01a      	b.n	800391c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a29      	ldr	r2, [pc, #164]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038f2:	f7fe ffa1 	bl	8002838 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038fa:	f7fe ff9d 	bl	8002838 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e2dd      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800390c:	4b20      	ldr	r3, [pc, #128]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x1da>
 8003918:	e000      	b.n	800391c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800391a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d074      	beq.n	8003a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b08      	cmp	r3, #8
 800392c:	d005      	beq.n	800393a <HAL_RCC_OscConfig+0x21a>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d10e      	bne.n	8003952 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d10b      	bne.n	8003952 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393a:	4b15      	ldr	r3, [pc, #84]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d064      	beq.n	8003a10 <HAL_RCC_OscConfig+0x2f0>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d160      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e2ba      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800395a:	d106      	bne.n	800396a <HAL_RCC_OscConfig+0x24a>
 800395c:	4b0c      	ldr	r3, [pc, #48]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0b      	ldr	r2, [pc, #44]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	e026      	b.n	80039b8 <HAL_RCC_OscConfig+0x298>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003972:	d115      	bne.n	80039a0 <HAL_RCC_OscConfig+0x280>
 8003974:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a05      	ldr	r2, [pc, #20]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 800397a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b03      	ldr	r3, [pc, #12]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a02      	ldr	r2, [pc, #8]	@ (8003990 <HAL_RCC_OscConfig+0x270>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e014      	b.n	80039b8 <HAL_RCC_OscConfig+0x298>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	08007f48 	.word	0x08007f48
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004
 80039a0:	4ba0      	ldr	r3, [pc, #640]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a9f      	ldr	r2, [pc, #636]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a9c      	ldr	r2, [pc, #624]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fe ff3a 	bl	8002838 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fe ff36 	bl	8002838 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	@ 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e276      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039da:	4b92      	ldr	r3, [pc, #584]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x2a8>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe ff26 	bl	8002838 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe ff22 	bl	8002838 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	@ 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e262      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a02:	4b88      	ldr	r3, [pc, #544]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x2d0>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d060      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_OscConfig+0x310>
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d119      	bne.n	8003a5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d116      	bne.n	8003a5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a30:	4b7c      	ldr	r3, [pc, #496]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_OscConfig+0x328>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e23f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b76      	ldr	r3, [pc, #472]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	4973      	ldr	r1, [pc, #460]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a5c:	e040      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d023      	beq.n	8003aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a66:	4b6f      	ldr	r3, [pc, #444]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fe fee1 	bl	8002838 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a7a:	f7fe fedd 	bl	8002838 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e21d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a8c:	4b65      	ldr	r3, [pc, #404]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a98:	4b62      	ldr	r3, [pc, #392]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	495f      	ldr	r1, [pc, #380]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
 8003aac:	e018      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aae:	4b5d      	ldr	r3, [pc, #372]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fe febd 	bl	8002838 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fe feb9 	bl	8002838 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e1f9      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad4:	4b53      	ldr	r3, [pc, #332]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d03c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af4:	4b4b      	ldr	r3, [pc, #300]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003afa:	4a4a      	ldr	r2, [pc, #296]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fe fe98 	bl	8002838 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7fe fe94 	bl	8002838 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e1d4      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1e:	4b41      	ldr	r3, [pc, #260]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ef      	beq.n	8003b0c <HAL_RCC_OscConfig+0x3ec>
 8003b2c:	e01b      	b.n	8003b66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b34:	4a3b      	ldr	r2, [pc, #236]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fe7b 	bl	8002838 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b46:	f7fe fe77 	bl	8002838 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e1b7      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b58:	4b32      	ldr	r3, [pc, #200]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1ef      	bne.n	8003b46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80a6 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b74:	2300      	movs	r3, #0
 8003b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b78:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b84:	4b27      	ldr	r3, [pc, #156]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b88:	4a26      	ldr	r2, [pc, #152]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b90:	4b24      	ldr	r3, [pc, #144]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba0:	4b21      	ldr	r3, [pc, #132]	@ (8003c28 <HAL_RCC_OscConfig+0x508>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d118      	bne.n	8003bde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bac:	4b1e      	ldr	r3, [pc, #120]	@ (8003c28 <HAL_RCC_OscConfig+0x508>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c28 <HAL_RCC_OscConfig+0x508>)
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb8:	f7fe fe3e 	bl	8002838 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc0:	f7fe fe3a 	bl	8002838 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e17a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd2:	4b15      	ldr	r3, [pc, #84]	@ (8003c28 <HAL_RCC_OscConfig+0x508>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d108      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4d8>
 8003be6:	4b0f      	ldr	r3, [pc, #60]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bec:	4a0d      	ldr	r2, [pc, #52]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bf6:	e029      	b.n	8003c4c <HAL_RCC_OscConfig+0x52c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d115      	bne.n	8003c2c <HAL_RCC_OscConfig+0x50c>
 8003c00:	4b08      	ldr	r3, [pc, #32]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	4a07      	ldr	r2, [pc, #28]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c10:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	4a03      	ldr	r2, [pc, #12]	@ (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c20:	e014      	b.n	8003c4c <HAL_RCC_OscConfig+0x52c>
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40007000 	.word	0x40007000
 8003c2c:	4b9c      	ldr	r3, [pc, #624]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	4a9b      	ldr	r2, [pc, #620]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c3c:	4b98      	ldr	r3, [pc, #608]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	4a97      	ldr	r2, [pc, #604]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d016      	beq.n	8003c82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fe fdf0 	bl	8002838 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fe fdec 	bl	8002838 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e12a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c72:	4b8b      	ldr	r3, [pc, #556]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0ed      	beq.n	8003c5c <HAL_RCC_OscConfig+0x53c>
 8003c80:	e015      	b.n	8003cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fe fdd9 	bl	8002838 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fe fdd5 	bl	8002838 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e113      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ca0:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ed      	bne.n	8003c8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cae:	7ffb      	ldrb	r3, [r7, #31]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	4a79      	ldr	r2, [pc, #484]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80fe 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	f040 80d0 	bne.w	8003e74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cd4:	4b72      	ldr	r3, [pc, #456]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0203 	and.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d130      	bne.n	8003d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d127      	bne.n	8003d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d11f      	bne.n	8003d4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d14:	2a07      	cmp	r2, #7
 8003d16:	bf14      	ite	ne
 8003d18:	2201      	movne	r2, #1
 8003d1a:	2200      	moveq	r2, #0
 8003d1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d113      	bne.n	8003d4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d06e      	beq.n	8003e28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	d069      	beq.n	8003e24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d50:	4b53      	ldr	r3, [pc, #332]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d5c:	4b50      	ldr	r3, [pc, #320]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0ad      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d78:	f7fe fd5e 	bl	8002838 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe fd5a 	bl	8002838 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e09a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d92:	4b43      	ldr	r3, [pc, #268]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9e:	4b40      	ldr	r3, [pc, #256]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	4b40      	ldr	r3, [pc, #256]	@ (8003ea4 <HAL_RCC_OscConfig+0x784>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003dae:	3a01      	subs	r2, #1
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	4311      	orrs	r1, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003db8:	0212      	lsls	r2, r2, #8
 8003dba:	4311      	orrs	r1, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dc0:	0852      	lsrs	r2, r2, #1
 8003dc2:	3a01      	subs	r2, #1
 8003dc4:	0552      	lsls	r2, r2, #21
 8003dc6:	4311      	orrs	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dcc:	0852      	lsrs	r2, r2, #1
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	0652      	lsls	r2, r2, #25
 8003dd2:	4311      	orrs	r1, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dd8:	0912      	lsrs	r2, r2, #4
 8003dda:	0452      	lsls	r2, r2, #17
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	4930      	ldr	r1, [pc, #192]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003de4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dfc:	f7fe fd1c 	bl	8002838 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fe fd18 	bl	8002838 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e058      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e16:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e22:	e050      	b.n	8003ec6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e04f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d148      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a19      	ldr	r2, [pc, #100]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e40:	4b17      	ldr	r3, [pc, #92]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a16      	ldr	r2, [pc, #88]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e4c:	f7fe fcf4 	bl	8002838 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fcf0 	bl	8002838 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e030      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x734>
 8003e72:	e028      	b.n	8003ec6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d023      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ea0 <HAL_RCC_OscConfig+0x780>)
 8003e80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fe fcd7 	bl	8002838 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8c:	e00c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fe fcd3 	bl	8002838 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d905      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e013      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea8:	4b09      	ldr	r3, [pc, #36]	@ (8003ed0 <HAL_RCC_OscConfig+0x7b0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ec      	bne.n	8003e8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003eb4:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_RCC_OscConfig+0x7b0>)
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	4905      	ldr	r1, [pc, #20]	@ (8003ed0 <HAL_RCC_OscConfig+0x7b0>)
 8003eba:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b4>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60cb      	str	r3, [r1, #12]
 8003ec0:	e001      	b.n	8003ec6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	feeefffc 	.word	0xfeeefffc

08003ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0e7      	b.n	80040bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eec:	4b75      	ldr	r3, [pc, #468]	@ (80040c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d910      	bls.n	8003f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b72      	ldr	r3, [pc, #456]	@ (80040c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 0207 	bic.w	r2, r3, #7
 8003f02:	4970      	ldr	r1, [pc, #448]	@ (80040c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80040c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0cf      	b.n	80040bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d010      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	4b66      	ldr	r3, [pc, #408]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d908      	bls.n	8003f4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b63      	ldr	r3, [pc, #396]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4960      	ldr	r1, [pc, #384]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d04c      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d121      	bne.n	8003fae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0a6      	b.n	80040bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f76:	4b54      	ldr	r3, [pc, #336]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d115      	bne.n	8003fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e09a      	b.n	80040bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e08e      	b.n	80040bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e086      	b.n	80040bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fae:	4b46      	ldr	r3, [pc, #280]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f023 0203 	bic.w	r2, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4943      	ldr	r1, [pc, #268]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc0:	f7fe fc3a 	bl	8002838 <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc8:	f7fe fc36 	bl	8002838 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e06e      	b.n	80040bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	4b3a      	ldr	r3, [pc, #232]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 020c 	and.w	r2, r3, #12
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d1eb      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	4b31      	ldr	r3, [pc, #196]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004008:	429a      	cmp	r2, r3
 800400a:	d208      	bcs.n	800401e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b2e      	ldr	r3, [pc, #184]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	492b      	ldr	r1, [pc, #172]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800401e:	4b29      	ldr	r3, [pc, #164]	@ (80040c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d210      	bcs.n	800404e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402c:	4b25      	ldr	r3, [pc, #148]	@ (80040c4 <HAL_RCC_ClockConfig+0x1ec>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 0207 	bic.w	r2, r3, #7
 8004034:	4923      	ldr	r1, [pc, #140]	@ (80040c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403c:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <HAL_RCC_ClockConfig+0x1ec>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d001      	beq.n	800404e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e036      	b.n	80040bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800405a:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4918      	ldr	r1, [pc, #96]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004078:	4b13      	ldr	r3, [pc, #76]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4910      	ldr	r1, [pc, #64]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800408c:	f000 f824 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	490b      	ldr	r1, [pc, #44]	@ (80040cc <HAL_RCC_ClockConfig+0x1f4>)
 800409e:	5ccb      	ldrb	r3, [r1, r3]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
 80040a8:	4a09      	ldr	r2, [pc, #36]	@ (80040d0 <HAL_RCC_ClockConfig+0x1f8>)
 80040aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040ac:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <HAL_RCC_ClockConfig+0x1fc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fb71 	bl	8002798 <HAL_InitTick>
 80040b6:	4603      	mov	r3, r0
 80040b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80040ba:	7afb      	ldrb	r3, [r7, #11]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40022000 	.word	0x40022000
 80040c8:	40021000 	.word	0x40021000
 80040cc:	08007f48 	.word	0x08007f48
 80040d0:	20000000 	.word	0x20000000
 80040d4:	20000004 	.word	0x20000004

080040d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	@ 0x24
 80040dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e6:	4b3e      	ldr	r3, [pc, #248]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f0:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x34>
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d121      	bne.n	800414a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d11e      	bne.n	800414a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800410c:	4b34      	ldr	r3, [pc, #208]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d107      	bne.n	8004128 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004118:	4b31      	ldr	r3, [pc, #196]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	e005      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004128:	4b2d      	ldr	r3, [pc, #180]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	091b      	lsrs	r3, r3, #4
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004134:	4a2b      	ldr	r2, [pc, #172]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10d      	bne.n	8004160 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d102      	bne.n	8004156 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004150:	4b25      	ldr	r3, [pc, #148]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e004      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d101      	bne.n	8004160 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800415c:	4b23      	ldr	r3, [pc, #140]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x114>)
 800415e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d134      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004166:	4b1e      	ldr	r3, [pc, #120]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0xa6>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d003      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0xac>
 800417c:	e005      	b.n	800418a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800417e:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004180:	617b      	str	r3, [r7, #20]
      break;
 8004182:	e005      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004184:	4b19      	ldr	r3, [pc, #100]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004186:	617b      	str	r3, [r7, #20]
      break;
 8004188:	e002      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	617b      	str	r3, [r7, #20]
      break;
 800418e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004190:	4b13      	ldr	r3, [pc, #76]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	3301      	adds	r3, #1
 800419c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800419e:	4b10      	ldr	r3, [pc, #64]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	fb03 f202 	mul.w	r2, r3, r2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041b6:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	0e5b      	lsrs	r3, r3, #25
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	3301      	adds	r3, #1
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041d0:	69bb      	ldr	r3, [r7, #24]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3724      	adds	r7, #36	@ 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	08007f60 	.word	0x08007f60
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	007a1200 	.word	0x007a1200

080041f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b03      	ldr	r3, [pc, #12]	@ (8004204 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000000 	.word	0x20000000

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800420c:	f7ff fff0 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4904      	ldr	r1, [pc, #16]	@ (8004230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	08007f58 	.word	0x08007f58

08004234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004238:	f7ff ffda 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0adb      	lsrs	r3, r3, #11
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4904      	ldr	r1, [pc, #16]	@ (800425c <HAL_RCC_GetPCLK2Freq+0x28>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	08007f58 	.word	0x08007f58

08004260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800426c:	4b2a      	ldr	r3, [pc, #168]	@ (8004318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004278:	f7ff f9ee 	bl	8003658 <HAL_PWREx_GetVoltageRange>
 800427c:	6178      	str	r0, [r7, #20]
 800427e:	e014      	b.n	80042aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004280:	4b25      	ldr	r3, [pc, #148]	@ (8004318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004284:	4a24      	ldr	r2, [pc, #144]	@ (8004318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428a:	6593      	str	r3, [r2, #88]	@ 0x58
 800428c:	4b22      	ldr	r3, [pc, #136]	@ (8004318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004298:	f7ff f9de 	bl	8003658 <HAL_PWREx_GetVoltageRange>
 800429c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800429e:	4b1e      	ldr	r3, [pc, #120]	@ (8004318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b0:	d10b      	bne.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b80      	cmp	r3, #128	@ 0x80
 80042b6:	d919      	bls.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80042bc:	d902      	bls.n	80042c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042be:	2302      	movs	r3, #2
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e013      	b.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042c4:	2301      	movs	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	e010      	b.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b80      	cmp	r3, #128	@ 0x80
 80042ce:	d902      	bls.n	80042d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042d0:	2303      	movs	r3, #3
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	e00a      	b.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b80      	cmp	r3, #128	@ 0x80
 80042da:	d102      	bne.n	80042e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042dc:	2302      	movs	r3, #2
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	e004      	b.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b70      	cmp	r3, #112	@ 0x70
 80042e6:	d101      	bne.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042e8:	2301      	movs	r3, #1
 80042ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f023 0207 	bic.w	r2, r3, #7
 80042f4:	4909      	ldr	r1, [pc, #36]	@ (800431c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042fc:	4b07      	ldr	r3, [pc, #28]	@ (800431c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	429a      	cmp	r2, r3
 8004308:	d001      	beq.n	800430e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000
 800431c:	40022000 	.word	0x40022000

08004320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004328:	2300      	movs	r3, #0
 800432a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800432c:	2300      	movs	r3, #0
 800432e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004338:	2b00      	cmp	r3, #0
 800433a:	d041      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004340:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004344:	d02a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004346:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800434a:	d824      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800434c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004352:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004356:	d81e      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800435c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004360:	d010      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004362:	e018      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004364:	4b86      	ldr	r3, [pc, #536]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a85      	ldr	r2, [pc, #532]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004370:	e015      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	2100      	movs	r1, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fabb 	bl	80048f4 <RCCEx_PLLSAI1_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004382:	e00c      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3320      	adds	r3, #32
 8004388:	2100      	movs	r1, #0
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fba6 	bl	8004adc <RCCEx_PLLSAI2_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004394:	e003      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	74fb      	strb	r3, [r7, #19]
      break;
 800439a:	e000      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800439c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043a4:	4b76      	ldr	r3, [pc, #472]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043b2:	4973      	ldr	r1, [pc, #460]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043ba:	e001      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d041      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043d4:	d02a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043da:	d824      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043e0:	d008      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043e6:	d81e      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043f0:	d010      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043f2:	e018      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043f4:	4b62      	ldr	r3, [pc, #392]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4a61      	ldr	r2, [pc, #388]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004400:	e015      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fa73 	bl	80048f4 <RCCEx_PLLSAI1_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004412:	e00c      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3320      	adds	r3, #32
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fb5e 	bl	8004adc <RCCEx_PLLSAI2_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004424:	e003      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	74fb      	strb	r3, [r7, #19]
      break;
 800442a:	e000      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800442c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10b      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004434:	4b52      	ldr	r3, [pc, #328]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004442:	494f      	ldr	r1, [pc, #316]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800444a:	e001      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80a0 	beq.w	800459e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004462:	4b47      	ldr	r3, [pc, #284]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004478:	4b41      	ldr	r3, [pc, #260]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447c:	4a40      	ldr	r2, [pc, #256]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004482:	6593      	str	r3, [r2, #88]	@ 0x58
 8004484:	4b3e      	ldr	r3, [pc, #248]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004490:	2301      	movs	r3, #1
 8004492:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004494:	4b3b      	ldr	r3, [pc, #236]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a3a      	ldr	r2, [pc, #232]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800449a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a0:	f7fe f9ca 	bl	8002838 <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044a6:	e009      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a8:	f7fe f9c6 	bl	8002838 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d902      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	74fb      	strb	r3, [r7, #19]
        break;
 80044ba:	e005      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044bc:	4b31      	ldr	r3, [pc, #196]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ef      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d15c      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01f      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d019      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044ec:	4b24      	ldr	r3, [pc, #144]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f8:	4b21      	ldr	r3, [pc, #132]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fe:	4a20      	ldr	r2, [pc, #128]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004508:	4b1d      	ldr	r3, [pc, #116]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450e:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004518:	4a19      	ldr	r2, [pc, #100]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452a:	f7fe f985 	bl	8002838 <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004530:	e00b      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7fe f981 	bl	8002838 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d902      	bls.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	74fb      	strb	r3, [r7, #19]
            break;
 8004548:	e006      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454a:	4b0d      	ldr	r3, [pc, #52]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ec      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10c      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455e:	4b08      	ldr	r3, [pc, #32]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004564:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456e:	4904      	ldr	r1, [pc, #16]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004576:	e009      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	74bb      	strb	r3, [r7, #18]
 800457c:	e006      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
 8004584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458c:	7c7b      	ldrb	r3, [r7, #17]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d105      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004592:	4b9e      	ldr	r3, [pc, #632]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004596:	4a9d      	ldr	r2, [pc, #628]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045aa:	4b98      	ldr	r3, [pc, #608]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b0:	f023 0203 	bic.w	r2, r3, #3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b8:	4994      	ldr	r1, [pc, #592]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045cc:	4b8f      	ldr	r3, [pc, #572]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d2:	f023 020c 	bic.w	r2, r3, #12
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	498c      	ldr	r1, [pc, #560]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045ee:	4b87      	ldr	r3, [pc, #540]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	4983      	ldr	r1, [pc, #524]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004610:	4b7e      	ldr	r3, [pc, #504]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004616:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	497b      	ldr	r1, [pc, #492]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004632:	4b76      	ldr	r3, [pc, #472]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004638:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004640:	4972      	ldr	r1, [pc, #456]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004654:	4b6d      	ldr	r3, [pc, #436]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	496a      	ldr	r1, [pc, #424]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004676:	4b65      	ldr	r3, [pc, #404]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004684:	4961      	ldr	r1, [pc, #388]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004698:	4b5c      	ldr	r3, [pc, #368]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a6:	4959      	ldr	r1, [pc, #356]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ba:	4b54      	ldr	r3, [pc, #336]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c8:	4950      	ldr	r1, [pc, #320]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046dc:	4b4b      	ldr	r3, [pc, #300]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ea:	4948      	ldr	r1, [pc, #288]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046fe:	4b43      	ldr	r3, [pc, #268]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470c:	493f      	ldr	r1, [pc, #252]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d028      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004720:	4b3a      	ldr	r3, [pc, #232]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800472e:	4937      	ldr	r1, [pc, #220]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800473e:	d106      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004740:	4b32      	ldr	r3, [pc, #200]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4a31      	ldr	r2, [pc, #196]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800474a:	60d3      	str	r3, [r2, #12]
 800474c:	e011      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004756:	d10c      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3304      	adds	r3, #4
 800475c:	2101      	movs	r1, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f8c8 	bl	80048f4 <RCCEx_PLLSAI1_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d028      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800477e:	4b23      	ldr	r3, [pc, #140]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004784:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478c:	491f      	ldr	r1, [pc, #124]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800479c:	d106      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800479e:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	4a1a      	ldr	r2, [pc, #104]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047a8:	60d3      	str	r3, [r2, #12]
 80047aa:	e011      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3304      	adds	r3, #4
 80047ba:	2101      	movs	r1, #1
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 f899 	bl	80048f4 <RCCEx_PLLSAI1_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d02b      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047dc:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ea:	4908      	ldr	r1, [pc, #32]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047fa:	d109      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047fc:	4b03      	ldr	r3, [pc, #12]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a02      	ldr	r2, [pc, #8]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004806:	60d3      	str	r3, [r2, #12]
 8004808:	e014      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004814:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004818:	d10c      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3304      	adds	r3, #4
 800481e:	2101      	movs	r1, #1
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f867 	bl	80048f4 <RCCEx_PLLSAI1_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800482a:	7cfb      	ldrb	r3, [r7, #19]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d02f      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004840:	4b2b      	ldr	r3, [pc, #172]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800484e:	4928      	ldr	r1, [pc, #160]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800485a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800485e:	d10d      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	2102      	movs	r1, #2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f844 	bl	80048f4 <RCCEx_PLLSAI1_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d014      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	74bb      	strb	r3, [r7, #18]
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3320      	adds	r3, #32
 800488a:	2102      	movs	r1, #2
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f925 	bl	8004adc <RCCEx_PLLSAI2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048ac:	4b10      	ldr	r3, [pc, #64]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048ba:	490d      	ldr	r1, [pc, #52]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00b      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048ce:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048de:	4904      	ldr	r1, [pc, #16]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000

080048f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004902:	4b75      	ldr	r3, [pc, #468]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d018      	beq.n	8004940 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800490e:	4b72      	ldr	r3, [pc, #456]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0203 	and.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d10d      	bne.n	800493a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
       ||
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004926:	4b6c      	ldr	r3, [pc, #432]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
       ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d047      	beq.n	80049ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	e044      	b.n	80049ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d018      	beq.n	800497a <RCCEx_PLLSAI1_Config+0x86>
 8004948:	2b03      	cmp	r3, #3
 800494a:	d825      	bhi.n	8004998 <RCCEx_PLLSAI1_Config+0xa4>
 800494c:	2b01      	cmp	r3, #1
 800494e:	d002      	beq.n	8004956 <RCCEx_PLLSAI1_Config+0x62>
 8004950:	2b02      	cmp	r3, #2
 8004952:	d009      	beq.n	8004968 <RCCEx_PLLSAI1_Config+0x74>
 8004954:	e020      	b.n	8004998 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004956:	4b60      	ldr	r3, [pc, #384]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11d      	bne.n	800499e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004966:	e01a      	b.n	800499e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004968:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d116      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004978:	e013      	b.n	80049a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800497a:	4b57      	ldr	r3, [pc, #348]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10f      	bne.n	80049a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004986:	4b54      	ldr	r3, [pc, #336]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004996:	e006      	b.n	80049a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
      break;
 800499c:	e004      	b.n	80049a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800499e:	bf00      	nop
 80049a0:	e002      	b.n	80049a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049a2:	bf00      	nop
 80049a4:	e000      	b.n	80049a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ae:	4b4a      	ldr	r3, [pc, #296]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6819      	ldr	r1, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	3b01      	subs	r3, #1
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	430b      	orrs	r3, r1
 80049c4:	4944      	ldr	r1, [pc, #272]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d17d      	bne.n	8004acc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049d0:	4b41      	ldr	r3, [pc, #260]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a40      	ldr	r2, [pc, #256]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049dc:	f7fd ff2c 	bl	8002838 <HAL_GetTick>
 80049e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049e2:	e009      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049e4:	f7fd ff28 	bl	8002838 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d902      	bls.n	80049f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	73fb      	strb	r3, [r7, #15]
        break;
 80049f6:	e005      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049f8:	4b37      	ldr	r3, [pc, #220]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1ef      	bne.n	80049e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d160      	bne.n	8004acc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d111      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a10:	4b31      	ldr	r3, [pc, #196]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6892      	ldr	r2, [r2, #8]
 8004a20:	0211      	lsls	r1, r2, #8
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68d2      	ldr	r2, [r2, #12]
 8004a26:	0912      	lsrs	r2, r2, #4
 8004a28:	0452      	lsls	r2, r2, #17
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	492a      	ldr	r1, [pc, #168]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	610b      	str	r3, [r1, #16]
 8004a32:	e027      	b.n	8004a84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d112      	bne.n	8004a60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6892      	ldr	r2, [r2, #8]
 8004a4a:	0211      	lsls	r1, r2, #8
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6912      	ldr	r2, [r2, #16]
 8004a50:	0852      	lsrs	r2, r2, #1
 8004a52:	3a01      	subs	r2, #1
 8004a54:	0552      	lsls	r2, r2, #21
 8004a56:	430a      	orrs	r2, r1
 8004a58:	491f      	ldr	r1, [pc, #124]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	610b      	str	r3, [r1, #16]
 8004a5e:	e011      	b.n	8004a84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a60:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6892      	ldr	r2, [r2, #8]
 8004a70:	0211      	lsls	r1, r2, #8
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6952      	ldr	r2, [r2, #20]
 8004a76:	0852      	lsrs	r2, r2, #1
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0652      	lsls	r2, r2, #25
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	4916      	ldr	r1, [pc, #88]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a84:	4b14      	ldr	r3, [pc, #80]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a13      	ldr	r2, [pc, #76]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fd fed2 	bl	8002838 <HAL_GetTick>
 8004a94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a96:	e009      	b.n	8004aac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a98:	f7fd fece 	bl	8002838 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d902      	bls.n	8004aac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	73fb      	strb	r3, [r7, #15]
          break;
 8004aaa:	e005      	b.n	8004ab8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0ef      	beq.n	8004a98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	4904      	ldr	r1, [pc, #16]	@ (8004ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000

08004adc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aea:	4b6a      	ldr	r3, [pc, #424]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d018      	beq.n	8004b28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004af6:	4b67      	ldr	r3, [pc, #412]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 0203 	and.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d10d      	bne.n	8004b22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
       ||
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b0e:	4b61      	ldr	r3, [pc, #388]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d047      	beq.n	8004bb2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	73fb      	strb	r3, [r7, #15]
 8004b26:	e044      	b.n	8004bb2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d018      	beq.n	8004b62 <RCCEx_PLLSAI2_Config+0x86>
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d825      	bhi.n	8004b80 <RCCEx_PLLSAI2_Config+0xa4>
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d002      	beq.n	8004b3e <RCCEx_PLLSAI2_Config+0x62>
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d009      	beq.n	8004b50 <RCCEx_PLLSAI2_Config+0x74>
 8004b3c:	e020      	b.n	8004b80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b3e:	4b55      	ldr	r3, [pc, #340]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11d      	bne.n	8004b86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4e:	e01a      	b.n	8004b86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b50:	4b50      	ldr	r3, [pc, #320]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d116      	bne.n	8004b8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b60:	e013      	b.n	8004b8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b62:	4b4c      	ldr	r3, [pc, #304]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10f      	bne.n	8004b8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b6e:	4b49      	ldr	r3, [pc, #292]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b7e:	e006      	b.n	8004b8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
      break;
 8004b84:	e004      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b86:	bf00      	nop
 8004b88:	e002      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10d      	bne.n	8004bb2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b96:	4b3f      	ldr	r3, [pc, #252]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	430b      	orrs	r3, r1
 8004bac:	4939      	ldr	r1, [pc, #228]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d167      	bne.n	8004c88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bb8:	4b36      	ldr	r3, [pc, #216]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a35      	ldr	r2, [pc, #212]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc4:	f7fd fe38 	bl	8002838 <HAL_GetTick>
 8004bc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bca:	e009      	b.n	8004be0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bcc:	f7fd fe34 	bl	8002838 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d902      	bls.n	8004be0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8004bde:	e005      	b.n	8004bec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004be0:	4b2c      	ldr	r3, [pc, #176]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1ef      	bne.n	8004bcc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d14a      	bne.n	8004c88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d111      	bne.n	8004c1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bf8:	4b26      	ldr	r3, [pc, #152]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6892      	ldr	r2, [r2, #8]
 8004c08:	0211      	lsls	r1, r2, #8
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68d2      	ldr	r2, [r2, #12]
 8004c0e:	0912      	lsrs	r2, r2, #4
 8004c10:	0452      	lsls	r2, r2, #17
 8004c12:	430a      	orrs	r2, r1
 8004c14:	491f      	ldr	r1, [pc, #124]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	614b      	str	r3, [r1, #20]
 8004c1a:	e011      	b.n	8004c40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6892      	ldr	r2, [r2, #8]
 8004c2c:	0211      	lsls	r1, r2, #8
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6912      	ldr	r2, [r2, #16]
 8004c32:	0852      	lsrs	r2, r2, #1
 8004c34:	3a01      	subs	r2, #1
 8004c36:	0652      	lsls	r2, r2, #25
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	4916      	ldr	r1, [pc, #88]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c40:	4b14      	ldr	r3, [pc, #80]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a13      	ldr	r2, [pc, #76]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fd fdf4 	bl	8002838 <HAL_GetTick>
 8004c50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c52:	e009      	b.n	8004c68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c54:	f7fd fdf0 	bl	8002838 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d902      	bls.n	8004c68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	73fb      	strb	r3, [r7, #15]
          break;
 8004c66:	e005      	b.n	8004c74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c68:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ef      	beq.n	8004c54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c7a:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	4904      	ldr	r1, [pc, #16]	@ (8004c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000

08004c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e095      	b.n	8004dd6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d108      	bne.n	8004cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cba:	d009      	beq.n	8004cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	61da      	str	r2, [r3, #28]
 8004cc2:	e005      	b.n	8004cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fd faf2 	bl	80022d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d10:	d902      	bls.n	8004d18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e002      	b.n	8004d1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d26:	d007      	beq.n	8004d38 <HAL_SPI_Init+0xa0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7a:	ea42 0103 	orr.w	r1, r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	f003 0204 	and.w	r2, r3, #4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004db4:	ea42 0103 	orr.w	r1, r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b088      	sub	sp, #32
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	603b      	str	r3, [r7, #0]
 8004dea:	4613      	mov	r3, r2
 8004dec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_SPI_Transmit+0x22>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e15f      	b.n	80050c0 <HAL_SPI_Transmit+0x2e2>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e08:	f7fd fd16 	bl	8002838 <HAL_GetTick>
 8004e0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d002      	beq.n	8004e24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
 8004e20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e22:	e148      	b.n	80050b6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_SPI_Transmit+0x52>
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e34:	e13f      	b.n	80050b6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	88fa      	ldrh	r2, [r7, #6]
 8004e4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e80:	d10f      	bne.n	8004ea2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ea0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eac:	2b40      	cmp	r3, #64	@ 0x40
 8004eae:	d007      	beq.n	8004ec0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ec8:	d94f      	bls.n	8004f6a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_SPI_Transmit+0xfa>
 8004ed2:	8afb      	ldrh	r3, [r7, #22]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d142      	bne.n	8004f5e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004edc:	881a      	ldrh	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee8:	1c9a      	adds	r2, r3, #2
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004efc:	e02f      	b.n	8004f5e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d112      	bne.n	8004f32 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f30:	e015      	b.n	8004f5e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f32:	f7fd fc81 	bl	8002838 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d803      	bhi.n	8004f4a <HAL_SPI_Transmit+0x16c>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d102      	bne.n	8004f50 <HAL_SPI_Transmit+0x172>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004f5c:	e0ab      	b.n	80050b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ca      	bne.n	8004efe <HAL_SPI_Transmit+0x120>
 8004f68:	e080      	b.n	800506c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_SPI_Transmit+0x19a>
 8004f72:	8afb      	ldrh	r3, [r7, #22]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d174      	bne.n	8005062 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d912      	bls.n	8004fa8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	881a      	ldrh	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f92:	1c9a      	adds	r2, r3, #2
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b02      	subs	r3, #2
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fa6:	e05c      	b.n	8005062 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004fce:	e048      	b.n	8005062 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d12b      	bne.n	8005036 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d912      	bls.n	800500e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fec:	881a      	ldrh	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff8:	1c9a      	adds	r2, r3, #2
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b02      	subs	r3, #2
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800500c:	e029      	b.n	8005062 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005034:	e015      	b.n	8005062 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005036:	f7fd fbff 	bl	8002838 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d803      	bhi.n	800504e <HAL_SPI_Transmit+0x270>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d102      	bne.n	8005054 <HAL_SPI_Transmit+0x276>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005060:	e029      	b.n	80050b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1b1      	bne.n	8004fd0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f947 	bl	8005304 <SPI_EndRxTxTransaction>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e003      	b.n	80050b6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80050be:	7ffb      	ldrb	r3, [r7, #31]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050d8:	f7fd fbae 	bl	8002838 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	4413      	add	r3, r2
 80050e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050e8:	f7fd fba6 	bl	8002838 <HAL_GetTick>
 80050ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050ee:	4b39      	ldr	r3, [pc, #228]	@ (80051d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	015b      	lsls	r3, r3, #5
 80050f4:	0d1b      	lsrs	r3, r3, #20
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	fb02 f303 	mul.w	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050fe:	e054      	b.n	80051aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d050      	beq.n	80051aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005108:	f7fd fb96 	bl	8002838 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	429a      	cmp	r2, r3
 8005116:	d902      	bls.n	800511e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d13d      	bne.n	800519a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800512c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005136:	d111      	bne.n	800515c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005140:	d004      	beq.n	800514c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800514a:	d107      	bne.n	800515c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005164:	d10f      	bne.n	8005186 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e017      	b.n	80051ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4013      	ands	r3, r2
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d19b      	bne.n	8005100 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000000 	.word	0x20000000

080051d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	@ 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051ea:	f7fd fb25 	bl	8002838 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	4413      	add	r3, r2
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80051fa:	f7fd fb1d 	bl	8002838 <HAL_GetTick>
 80051fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005208:	4b3d      	ldr	r3, [pc, #244]	@ (8005300 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	00da      	lsls	r2, r3, #3
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	0d1b      	lsrs	r3, r3, #20
 8005218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005220:	e060      	b.n	80052e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005228:	d107      	bne.n	800523a <SPI_WaitFifoStateUntilTimeout+0x62>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005238:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d050      	beq.n	80052e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005242:	f7fd faf9 	bl	8002838 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524e:	429a      	cmp	r2, r3
 8005250:	d902      	bls.n	8005258 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d13d      	bne.n	80052d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005266:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005270:	d111      	bne.n	8005296 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527a:	d004      	beq.n	8005286 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005284:	d107      	bne.n	8005296 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005294:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800529e:	d10f      	bne.n	80052c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e010      	b.n	80052f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d196      	bne.n	8005222 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3728      	adds	r7, #40	@ 0x28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000000 	.word	0x20000000

08005304 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff ff5b 	bl	80051d8 <SPI_WaitFifoStateUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e027      	b.n	8005388 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2200      	movs	r2, #0
 8005340:	2180      	movs	r1, #128	@ 0x80
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff fec0 	bl	80050c8 <SPI_WaitFlagStateUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e014      	b.n	8005388 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7ff ff34 	bl	80051d8 <SPI_WaitFifoStateUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e000      	b.n	8005388 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e049      	b.n	8005436 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc ffce 	bl	8002358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f000 f970 	bl	80056b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e04f      	b.n	80054f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a23      	ldr	r2, [pc, #140]	@ (8005504 <HAL_TIM_Base_Start_IT+0xc4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01d      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0x76>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005482:	d018      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0x76>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1f      	ldr	r2, [pc, #124]	@ (8005508 <HAL_TIM_Base_Start_IT+0xc8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0x76>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1e      	ldr	r2, [pc, #120]	@ (800550c <HAL_TIM_Base_Start_IT+0xcc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0x76>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1c      	ldr	r2, [pc, #112]	@ (8005510 <HAL_TIM_Base_Start_IT+0xd0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0x76>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <HAL_TIM_Base_Start_IT+0xd4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0x76>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a19      	ldr	r2, [pc, #100]	@ (8005518 <HAL_TIM_Base_Start_IT+0xd8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d115      	bne.n	80054e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	4b17      	ldr	r3, [pc, #92]	@ (800551c <HAL_TIM_Base_Start_IT+0xdc>)
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b06      	cmp	r3, #6
 80054c6:	d015      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0xb4>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ce:	d011      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e0:	e008      	b.n	80054f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e000      	b.n	80054f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	00010007 	.word	0x00010007

08005520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIM_ConfigClockSource+0x1c>
 8005538:	2302      	movs	r3, #2
 800553a:	e0b6      	b.n	80056aa <HAL_TIM_ConfigClockSource+0x18a>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800555a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800555e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005578:	d03e      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0xd8>
 800557a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800557e:	f200 8087 	bhi.w	8005690 <HAL_TIM_ConfigClockSource+0x170>
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005586:	f000 8086 	beq.w	8005696 <HAL_TIM_ConfigClockSource+0x176>
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558e:	d87f      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x170>
 8005590:	2b70      	cmp	r3, #112	@ 0x70
 8005592:	d01a      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0xaa>
 8005594:	2b70      	cmp	r3, #112	@ 0x70
 8005596:	d87b      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x170>
 8005598:	2b60      	cmp	r3, #96	@ 0x60
 800559a:	d050      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x11e>
 800559c:	2b60      	cmp	r3, #96	@ 0x60
 800559e:	d877      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x170>
 80055a0:	2b50      	cmp	r3, #80	@ 0x50
 80055a2:	d03c      	beq.n	800561e <HAL_TIM_ConfigClockSource+0xfe>
 80055a4:	2b50      	cmp	r3, #80	@ 0x50
 80055a6:	d873      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x170>
 80055a8:	2b40      	cmp	r3, #64	@ 0x40
 80055aa:	d058      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x13e>
 80055ac:	2b40      	cmp	r3, #64	@ 0x40
 80055ae:	d86f      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x170>
 80055b0:	2b30      	cmp	r3, #48	@ 0x30
 80055b2:	d064      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15e>
 80055b4:	2b30      	cmp	r3, #48	@ 0x30
 80055b6:	d86b      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x170>
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d060      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15e>
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d867      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x170>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d05c      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15e>
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d05a      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15e>
 80055c8:	e062      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055da:	f000 f97f 	bl	80058dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	609a      	str	r2, [r3, #8]
      break;
 80055f6:	e04f      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005608:	f000 f968 	bl	80058dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800561a:	609a      	str	r2, [r3, #8]
      break;
 800561c:	e03c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800562a:	461a      	mov	r2, r3
 800562c:	f000 f8dc 	bl	80057e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2150      	movs	r1, #80	@ 0x50
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f935 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 800563c:	e02c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800564a:	461a      	mov	r2, r3
 800564c:	f000 f8fb 	bl	8005846 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2160      	movs	r1, #96	@ 0x60
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f925 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 800565c:	e01c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800566a:	461a      	mov	r2, r3
 800566c:	f000 f8bc 	bl	80057e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2140      	movs	r1, #64	@ 0x40
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f915 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 800567c:	e00c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f000 f90c 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 800568e:	e003      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      break;
 8005694:	e000      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a40      	ldr	r2, [pc, #256]	@ (80057c8 <TIM_Base_SetConfig+0x114>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d2:	d00f      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a3d      	ldr	r2, [pc, #244]	@ (80057cc <TIM_Base_SetConfig+0x118>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00b      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a3c      	ldr	r2, [pc, #240]	@ (80057d0 <TIM_Base_SetConfig+0x11c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d007      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a3b      	ldr	r2, [pc, #236]	@ (80057d4 <TIM_Base_SetConfig+0x120>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a3a      	ldr	r2, [pc, #232]	@ (80057d8 <TIM_Base_SetConfig+0x124>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d108      	bne.n	8005706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a2f      	ldr	r2, [pc, #188]	@ (80057c8 <TIM_Base_SetConfig+0x114>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01f      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005714:	d01b      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2c      	ldr	r2, [pc, #176]	@ (80057cc <TIM_Base_SetConfig+0x118>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d017      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2b      	ldr	r2, [pc, #172]	@ (80057d0 <TIM_Base_SetConfig+0x11c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2a      	ldr	r2, [pc, #168]	@ (80057d4 <TIM_Base_SetConfig+0x120>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00f      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a29      	ldr	r2, [pc, #164]	@ (80057d8 <TIM_Base_SetConfig+0x124>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00b      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a28      	ldr	r2, [pc, #160]	@ (80057dc <TIM_Base_SetConfig+0x128>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a27      	ldr	r2, [pc, #156]	@ (80057e0 <TIM_Base_SetConfig+0x12c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a26      	ldr	r2, [pc, #152]	@ (80057e4 <TIM_Base_SetConfig+0x130>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d108      	bne.n	8005760 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a10      	ldr	r2, [pc, #64]	@ (80057c8 <TIM_Base_SetConfig+0x114>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00f      	beq.n	80057ac <TIM_Base_SetConfig+0xf8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a12      	ldr	r2, [pc, #72]	@ (80057d8 <TIM_Base_SetConfig+0x124>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00b      	beq.n	80057ac <TIM_Base_SetConfig+0xf8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a11      	ldr	r2, [pc, #68]	@ (80057dc <TIM_Base_SetConfig+0x128>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d007      	beq.n	80057ac <TIM_Base_SetConfig+0xf8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a10      	ldr	r2, [pc, #64]	@ (80057e0 <TIM_Base_SetConfig+0x12c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_Base_SetConfig+0xf8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a0f      	ldr	r2, [pc, #60]	@ (80057e4 <TIM_Base_SetConfig+0x130>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d103      	bne.n	80057b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	615a      	str	r2, [r3, #20]
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40000400 	.word	0x40000400
 80057d0:	40000800 	.word	0x40000800
 80057d4:	40000c00 	.word	0x40000c00
 80057d8:	40013400 	.word	0x40013400
 80057dc:	40014000 	.word	0x40014000
 80057e0:	40014400 	.word	0x40014400
 80057e4:	40014800 	.word	0x40014800

080057e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0201 	bic.w	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 030a 	bic.w	r3, r3, #10
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005846:	b480      	push	{r7}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f023 0210 	bic.w	r2, r3, #16
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	031b      	lsls	r3, r3, #12
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005882:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f043 0307 	orr.w	r3, r3, #7
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	021a      	lsls	r2, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	431a      	orrs	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005930:	2302      	movs	r3, #2
 8005932:	e068      	b.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2e      	ldr	r2, [pc, #184]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2d      	ldr	r2, [pc, #180]	@ (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d108      	bne.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800596e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005980:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1e      	ldr	r2, [pc, #120]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01d      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a6:	d018      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1b      	ldr	r2, [pc, #108]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00e      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a18      	ldr	r2, [pc, #96]	@ (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a13      	ldr	r2, [pc, #76]	@ (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a14      	ldr	r2, [pc, #80]	@ (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d10c      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	40014000 	.word	0x40014000

08005a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e040      	b.n	8005ac0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fc fcce 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	@ 0x24
 8005a58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fff2 	bl	8006a5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fd37 	bl	80064ec <UART_SetConfig>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e01b      	b.n	8005ac0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005aa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 f871 	bl	8006ba0 <UART_CheckIdleState>
 8005abe:	4603      	mov	r3, r0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	@ 0x28
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d177      	bne.n	8005bd0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_UART_Transmit+0x24>
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e070      	b.n	8005bd2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2221      	movs	r2, #33	@ 0x21
 8005afc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005afe:	f7fc fe9b 	bl	8002838 <HAL_GetTick>
 8005b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	88fa      	ldrh	r2, [r7, #6]
 8005b08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b1c:	d108      	bne.n	8005b30 <HAL_UART_Transmit+0x68>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e003      	b.n	8005b38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b38:	e02f      	b.n	8005b9a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2200      	movs	r2, #0
 8005b42:	2180      	movs	r1, #128	@ 0x80
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f001 f8d3 	bl	8006cf0 <UART_WaitOnFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e03b      	b.n	8005bd2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10b      	bne.n	8005b78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	881a      	ldrh	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b6c:	b292      	uxth	r2, r2
 8005b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	3302      	adds	r3, #2
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	e007      	b.n	8005b88 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1c9      	bne.n	8005b3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2140      	movs	r1, #64	@ 0x40
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f001 f89d 	bl	8006cf0 <UART_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e005      	b.n	8005bd2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	@ 0x28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d137      	bne.n	8005c64 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_UART_Receive_IT+0x24>
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e030      	b.n	8005c66 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a18      	ldr	r2, [pc, #96]	@ (8005c70 <HAL_UART_Receive_IT+0x94>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d01f      	beq.n	8005c54 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d018      	beq.n	8005c54 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	623b      	str	r3, [r7, #32]
 8005c42:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	69f9      	ldr	r1, [r7, #28]
 8005c46:	6a3a      	ldr	r2, [r7, #32]
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e6      	bne.n	8005c22 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	461a      	mov	r2, r3
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f001 f8b0 	bl	8006dc0 <UART_Start_Receive_IT>
 8005c60:	4603      	mov	r3, r0
 8005c62:	e000      	b.n	8005c66 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3728      	adds	r7, #40	@ 0x28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40008000 	.word	0x40008000

08005c74 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b0a2      	sub	sp, #136	@ 0x88
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c92:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8005c96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ca4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ca6:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005caa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e4      	bne.n	8005c82 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cca:	f023 0301 	bic.w	r3, r3, #1
 8005cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005cd8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cda:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <HAL_UART_Abort_IT+0x44>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d118      	bne.n	8005d26 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d04:	f023 0310 	bic.w	r3, r3, #16
 8005d08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d14:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e6      	bne.n	8005cf4 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00f      	beq.n	8005d4e <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d38:	2b80      	cmp	r3, #128	@ 0x80
 8005d3a:	d104      	bne.n	8005d46 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d40:	4a5e      	ldr	r2, [pc, #376]	@ (8005ebc <HAL_UART_Abort_IT+0x248>)
 8005d42:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d44:	e003      	b.n	8005d4e <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00f      	beq.n	8005d76 <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d104      	bne.n	8005d6e <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d68:	4a55      	ldr	r2, [pc, #340]	@ (8005ec0 <HAL_UART_Abort_IT+0x24c>)
 8005d6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d6c:	e003      	b.n	8005d76 <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d72:	2200      	movs	r2, #0
 8005d74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d80:	2b80      	cmp	r3, #128	@ 0x80
 8005d82:	d12d      	bne.n	8005de0 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	623b      	str	r3, [r7, #32]
   return(result);
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005da4:	633a      	str	r2, [r7, #48]	@ 0x30
 8005da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e5      	bne.n	8005d84 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00f      	beq.n	8005de0 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fd f965 	bl	8003094 <HAL_DMA_Abort_IT>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005dd8:	e002      	b.n	8005de0 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dea:	2b40      	cmp	r3, #64	@ 0x40
 8005dec:	d130      	bne.n	8005e50 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e04:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005e0e:	61fa      	str	r2, [r7, #28]
 8005e10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	69b9      	ldr	r1, [r7, #24]
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d012      	beq.n	8005e50 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fd f930 	bl	8003094 <HAL_DMA_Abort_IT>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e3e:	2200      	movs	r2, #0
 8005e40:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e48:	e002      	b.n	8005e50 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8005e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d12c      	bne.n	8005eb2 <HAL_UART_Abort_IT+0x23e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->RxXferCount = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	669a      	str	r2, [r3, #104]	@ 0x68
    huart->TxISR = NULL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	220f      	movs	r2, #15
 8005e82:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	8b1b      	ldrh	r3, [r3, #24]
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0208 	orr.w	r2, r2, #8
 8005e94:	b292      	uxth	r2, r2
 8005e96:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fb07 	bl	80064c0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3788      	adds	r7, #136	@ 0x88
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	08007041 	.word	0x08007041
 8005ec0:	080070ad 	.word	0x080070ad

08005ec4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b0ba      	sub	sp, #232	@ 0xe8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005eea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005eee:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d115      	bne.n	8005f2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00f      	beq.n	8005f2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 82ae 	beq.w	800647e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
      }
      return;
 8005f2a:	e2a8      	b.n	800647e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8117 	beq.w	8006164 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f46:	4b85      	ldr	r3, [pc, #532]	@ (800615c <HAL_UART_IRQHandler+0x298>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 810a 	beq.w	8006164 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d011      	beq.n	8005f80 <HAL_UART_IRQHandler+0xbc>
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00b      	beq.n	8005f80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f76:	f043 0201 	orr.w	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d011      	beq.n	8005fb0 <HAL_UART_IRQHandler+0xec>
 8005f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa6:	f043 0204 	orr.w	r2, r3, #4
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d011      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x11c>
 8005fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fd6:	f043 0202 	orr.w	r2, r3, #2
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d017      	beq.n	800601c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ffc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2208      	movs	r2, #8
 800600a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006012:	f043 0208 	orr.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006024:	2b00      	cmp	r3, #0
 8006026:	d012      	beq.n	800604e <HAL_UART_IRQHandler+0x18a>
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800602c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00c      	beq.n	800604e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800603c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006044:	f043 0220 	orr.w	r2, r3, #32
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8214 	beq.w	8006482 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00d      	beq.n	8006082 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006088:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006096:	2b40      	cmp	r3, #64	@ 0x40
 8006098:	d005      	beq.n	80060a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800609a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800609e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d04f      	beq.n	8006146 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 ff50 	bl	8006f4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b6:	2b40      	cmp	r3, #64	@ 0x40
 80060b8:	d141      	bne.n	800613e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3308      	adds	r3, #8
 80060c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3308      	adds	r3, #8
 80060e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1d9      	bne.n	80060ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800610a:	2b00      	cmp	r3, #0
 800610c:	d013      	beq.n	8006136 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006112:	4a13      	ldr	r2, [pc, #76]	@ (8006160 <HAL_UART_IRQHandler+0x29c>)
 8006114:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611a:	4618      	mov	r0, r3
 800611c:	f7fc ffba 	bl	8003094 <HAL_DMA_Abort_IT>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d017      	beq.n	8006156 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006130:	4610      	mov	r0, r2
 8006132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	e00f      	b.n	8006156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f9b8 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800613c:	e00b      	b.n	8006156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f9b4 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006144:	e007      	b.n	8006156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f9b0 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006154:	e195      	b.n	8006482 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006156:	bf00      	nop
    return;
 8006158:	e193      	b.n	8006482 <HAL_UART_IRQHandler+0x5be>
 800615a:	bf00      	nop
 800615c:	04000120 	.word	0x04000120
 8006160:	08007015 	.word	0x08007015

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006168:	2b01      	cmp	r3, #1
 800616a:	f040 814e 	bne.w	800640a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006172:	f003 0310 	and.w	r3, r3, #16
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 8147 	beq.w	800640a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800617c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8140 	beq.w	800640a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2210      	movs	r2, #16
 8006190:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619c:	2b40      	cmp	r3, #64	@ 0x40
 800619e:	f040 80b8 	bne.w	8006312 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 8167 	beq.w	8006486 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061c2:	429a      	cmp	r2, r3
 80061c4:	f080 815f 	bcs.w	8006486 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f040 8086 	bne.w	80062f0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800620e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006212:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800621a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1da      	bne.n	80061e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800623e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3308      	adds	r3, #8
 800624e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006252:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006256:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800625a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e1      	bne.n	800622e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800627a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800627c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800628e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006290:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006294:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800629c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e3      	bne.n	800626a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062c0:	f023 0310 	bic.w	r3, r3, #16
 80062c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e4      	bne.n	80062b0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fc fe94 	bl	8003018 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006302:	b29b      	uxth	r3, r3
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	b29b      	uxth	r3, r3
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f8e2 	bl	80064d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006310:	e0b9      	b.n	8006486 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800631e:	b29b      	uxth	r3, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80ab 	beq.w	800648a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 80a6 	beq.w	800648a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800634c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006360:	647b      	str	r3, [r7, #68]	@ 0x44
 8006362:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800636e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e4      	bne.n	800633e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	623b      	str	r3, [r7, #32]
   return(result);
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006398:	633a      	str	r2, [r7, #48]	@ 0x30
 800639a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800639e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e3      	bne.n	8006374 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f023 0310 	bic.w	r3, r3, #16
 80063d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	69b9      	ldr	r1, [r7, #24]
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	617b      	str	r3, [r7, #20]
   return(result);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e4      	bne.n	80063c0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2202      	movs	r2, #2
 80063fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f866 	bl	80064d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006408:	e03f      	b.n	800648a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00e      	beq.n	8006434 <HAL_UART_IRQHandler+0x570>
 8006416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800641a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800642a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 f863 	bl	80074f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006432:	e02d      	b.n	8006490 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00e      	beq.n	800645e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01c      	beq.n	800648e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
    }
    return;
 800645c:	e017      	b.n	800648e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800645e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d012      	beq.n	8006490 <HAL_UART_IRQHandler+0x5cc>
 800646a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800646e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fe58 	bl	800712c <UART_EndTransmit_IT>
    return;
 800647c:	e008      	b.n	8006490 <HAL_UART_IRQHandler+0x5cc>
      return;
 800647e:	bf00      	nop
 8006480:	e006      	b.n	8006490 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006482:	bf00      	nop
 8006484:	e004      	b.n	8006490 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <HAL_UART_IRQHandler+0x5cc>
      return;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <HAL_UART_IRQHandler+0x5cc>
    return;
 800648e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006490:	37e8      	adds	r7, #232	@ 0xe8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop

08006498 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b08a      	sub	sp, #40	@ 0x28
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	431a      	orrs	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	4313      	orrs	r3, r2
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4ba4      	ldr	r3, [pc, #656]	@ (80067ac <UART_SetConfig+0x2c0>)
 800651c:	4013      	ands	r3, r2
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006524:	430b      	orrs	r3, r1
 8006526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a99      	ldr	r2, [pc, #612]	@ (80067b0 <UART_SetConfig+0x2c4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006554:	4313      	orrs	r3, r2
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006568:	430a      	orrs	r2, r1
 800656a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a90      	ldr	r2, [pc, #576]	@ (80067b4 <UART_SetConfig+0x2c8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d126      	bne.n	80065c4 <UART_SetConfig+0xd8>
 8006576:	4b90      	ldr	r3, [pc, #576]	@ (80067b8 <UART_SetConfig+0x2cc>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	2b03      	cmp	r3, #3
 8006582:	d81b      	bhi.n	80065bc <UART_SetConfig+0xd0>
 8006584:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <UART_SetConfig+0xa0>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	0800659d 	.word	0x0800659d
 8006590:	080065ad 	.word	0x080065ad
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065b5 	.word	0x080065b5
 800659c:	2301      	movs	r3, #1
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a2:	e116      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80065a4:	2302      	movs	r3, #2
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065aa:	e112      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80065ac:	2304      	movs	r3, #4
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b2:	e10e      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80065b4:	2308      	movs	r3, #8
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ba:	e10a      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c2:	e106      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a7c      	ldr	r2, [pc, #496]	@ (80067bc <UART_SetConfig+0x2d0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d138      	bne.n	8006640 <UART_SetConfig+0x154>
 80065ce:	4b7a      	ldr	r3, [pc, #488]	@ (80067b8 <UART_SetConfig+0x2cc>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d4:	f003 030c 	and.w	r3, r3, #12
 80065d8:	2b0c      	cmp	r3, #12
 80065da:	d82d      	bhi.n	8006638 <UART_SetConfig+0x14c>
 80065dc:	a201      	add	r2, pc, #4	@ (adr r2, 80065e4 <UART_SetConfig+0xf8>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	08006619 	.word	0x08006619
 80065e8:	08006639 	.word	0x08006639
 80065ec:	08006639 	.word	0x08006639
 80065f0:	08006639 	.word	0x08006639
 80065f4:	08006629 	.word	0x08006629
 80065f8:	08006639 	.word	0x08006639
 80065fc:	08006639 	.word	0x08006639
 8006600:	08006639 	.word	0x08006639
 8006604:	08006621 	.word	0x08006621
 8006608:	08006639 	.word	0x08006639
 800660c:	08006639 	.word	0x08006639
 8006610:	08006639 	.word	0x08006639
 8006614:	08006631 	.word	0x08006631
 8006618:	2300      	movs	r3, #0
 800661a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800661e:	e0d8      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006620:	2302      	movs	r3, #2
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006626:	e0d4      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006628:	2304      	movs	r3, #4
 800662a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800662e:	e0d0      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006630:	2308      	movs	r3, #8
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006636:	e0cc      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006638:	2310      	movs	r3, #16
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663e:	e0c8      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a5e      	ldr	r2, [pc, #376]	@ (80067c0 <UART_SetConfig+0x2d4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d125      	bne.n	8006696 <UART_SetConfig+0x1aa>
 800664a:	4b5b      	ldr	r3, [pc, #364]	@ (80067b8 <UART_SetConfig+0x2cc>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006650:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006654:	2b30      	cmp	r3, #48	@ 0x30
 8006656:	d016      	beq.n	8006686 <UART_SetConfig+0x19a>
 8006658:	2b30      	cmp	r3, #48	@ 0x30
 800665a:	d818      	bhi.n	800668e <UART_SetConfig+0x1a2>
 800665c:	2b20      	cmp	r3, #32
 800665e:	d00a      	beq.n	8006676 <UART_SetConfig+0x18a>
 8006660:	2b20      	cmp	r3, #32
 8006662:	d814      	bhi.n	800668e <UART_SetConfig+0x1a2>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <UART_SetConfig+0x182>
 8006668:	2b10      	cmp	r3, #16
 800666a:	d008      	beq.n	800667e <UART_SetConfig+0x192>
 800666c:	e00f      	b.n	800668e <UART_SetConfig+0x1a2>
 800666e:	2300      	movs	r3, #0
 8006670:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006674:	e0ad      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006676:	2302      	movs	r3, #2
 8006678:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800667c:	e0a9      	b.n	80067d2 <UART_SetConfig+0x2e6>
 800667e:	2304      	movs	r3, #4
 8006680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006684:	e0a5      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006686:	2308      	movs	r3, #8
 8006688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668c:	e0a1      	b.n	80067d2 <UART_SetConfig+0x2e6>
 800668e:	2310      	movs	r3, #16
 8006690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006694:	e09d      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a4a      	ldr	r2, [pc, #296]	@ (80067c4 <UART_SetConfig+0x2d8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d125      	bne.n	80066ec <UART_SetConfig+0x200>
 80066a0:	4b45      	ldr	r3, [pc, #276]	@ (80067b8 <UART_SetConfig+0x2cc>)
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80066ac:	d016      	beq.n	80066dc <UART_SetConfig+0x1f0>
 80066ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80066b0:	d818      	bhi.n	80066e4 <UART_SetConfig+0x1f8>
 80066b2:	2b80      	cmp	r3, #128	@ 0x80
 80066b4:	d00a      	beq.n	80066cc <UART_SetConfig+0x1e0>
 80066b6:	2b80      	cmp	r3, #128	@ 0x80
 80066b8:	d814      	bhi.n	80066e4 <UART_SetConfig+0x1f8>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <UART_SetConfig+0x1d8>
 80066be:	2b40      	cmp	r3, #64	@ 0x40
 80066c0:	d008      	beq.n	80066d4 <UART_SetConfig+0x1e8>
 80066c2:	e00f      	b.n	80066e4 <UART_SetConfig+0x1f8>
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ca:	e082      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80066cc:	2302      	movs	r3, #2
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d2:	e07e      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80066d4:	2304      	movs	r3, #4
 80066d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066da:	e07a      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80066dc:	2308      	movs	r3, #8
 80066de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e2:	e076      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80066e4:	2310      	movs	r3, #16
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ea:	e072      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a35      	ldr	r2, [pc, #212]	@ (80067c8 <UART_SetConfig+0x2dc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d12a      	bne.n	800674c <UART_SetConfig+0x260>
 80066f6:	4b30      	ldr	r3, [pc, #192]	@ (80067b8 <UART_SetConfig+0x2cc>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006704:	d01a      	beq.n	800673c <UART_SetConfig+0x250>
 8006706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800670a:	d81b      	bhi.n	8006744 <UART_SetConfig+0x258>
 800670c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006710:	d00c      	beq.n	800672c <UART_SetConfig+0x240>
 8006712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006716:	d815      	bhi.n	8006744 <UART_SetConfig+0x258>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <UART_SetConfig+0x238>
 800671c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006720:	d008      	beq.n	8006734 <UART_SetConfig+0x248>
 8006722:	e00f      	b.n	8006744 <UART_SetConfig+0x258>
 8006724:	2300      	movs	r3, #0
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800672a:	e052      	b.n	80067d2 <UART_SetConfig+0x2e6>
 800672c:	2302      	movs	r3, #2
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006732:	e04e      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006734:	2304      	movs	r3, #4
 8006736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800673a:	e04a      	b.n	80067d2 <UART_SetConfig+0x2e6>
 800673c:	2308      	movs	r3, #8
 800673e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006742:	e046      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006744:	2310      	movs	r3, #16
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800674a:	e042      	b.n	80067d2 <UART_SetConfig+0x2e6>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a17      	ldr	r2, [pc, #92]	@ (80067b0 <UART_SetConfig+0x2c4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d13a      	bne.n	80067cc <UART_SetConfig+0x2e0>
 8006756:	4b18      	ldr	r3, [pc, #96]	@ (80067b8 <UART_SetConfig+0x2cc>)
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800675c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006760:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006764:	d01a      	beq.n	800679c <UART_SetConfig+0x2b0>
 8006766:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800676a:	d81b      	bhi.n	80067a4 <UART_SetConfig+0x2b8>
 800676c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006770:	d00c      	beq.n	800678c <UART_SetConfig+0x2a0>
 8006772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006776:	d815      	bhi.n	80067a4 <UART_SetConfig+0x2b8>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <UART_SetConfig+0x298>
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006780:	d008      	beq.n	8006794 <UART_SetConfig+0x2a8>
 8006782:	e00f      	b.n	80067a4 <UART_SetConfig+0x2b8>
 8006784:	2300      	movs	r3, #0
 8006786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678a:	e022      	b.n	80067d2 <UART_SetConfig+0x2e6>
 800678c:	2302      	movs	r3, #2
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006792:	e01e      	b.n	80067d2 <UART_SetConfig+0x2e6>
 8006794:	2304      	movs	r3, #4
 8006796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800679a:	e01a      	b.n	80067d2 <UART_SetConfig+0x2e6>
 800679c:	2308      	movs	r3, #8
 800679e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067a2:	e016      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80067a4:	2310      	movs	r3, #16
 80067a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067aa:	e012      	b.n	80067d2 <UART_SetConfig+0x2e6>
 80067ac:	efff69f3 	.word	0xefff69f3
 80067b0:	40008000 	.word	0x40008000
 80067b4:	40013800 	.word	0x40013800
 80067b8:	40021000 	.word	0x40021000
 80067bc:	40004400 	.word	0x40004400
 80067c0:	40004800 	.word	0x40004800
 80067c4:	40004c00 	.word	0x40004c00
 80067c8:	40005000 	.word	0x40005000
 80067cc:	2310      	movs	r3, #16
 80067ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a9f      	ldr	r2, [pc, #636]	@ (8006a54 <UART_SetConfig+0x568>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d17a      	bne.n	80068d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d824      	bhi.n	800682e <UART_SetConfig+0x342>
 80067e4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <UART_SetConfig+0x300>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	08006811 	.word	0x08006811
 80067f0:	0800682f 	.word	0x0800682f
 80067f4:	08006819 	.word	0x08006819
 80067f8:	0800682f 	.word	0x0800682f
 80067fc:	0800681f 	.word	0x0800681f
 8006800:	0800682f 	.word	0x0800682f
 8006804:	0800682f 	.word	0x0800682f
 8006808:	0800682f 	.word	0x0800682f
 800680c:	08006827 	.word	0x08006827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006810:	f7fd fcfa 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8006814:	61f8      	str	r0, [r7, #28]
        break;
 8006816:	e010      	b.n	800683a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006818:	4b8f      	ldr	r3, [pc, #572]	@ (8006a58 <UART_SetConfig+0x56c>)
 800681a:	61fb      	str	r3, [r7, #28]
        break;
 800681c:	e00d      	b.n	800683a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681e:	f7fd fc5b 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8006822:	61f8      	str	r0, [r7, #28]
        break;
 8006824:	e009      	b.n	800683a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800682a:	61fb      	str	r3, [r7, #28]
        break;
 800682c:	e005      	b.n	800683a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006838:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80fb 	beq.w	8006a38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	4613      	mov	r3, r2
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4413      	add	r3, r2
 800684c:	69fa      	ldr	r2, [r7, #28]
 800684e:	429a      	cmp	r2, r3
 8006850:	d305      	bcc.n	800685e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	429a      	cmp	r2, r3
 800685c:	d903      	bls.n	8006866 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006864:	e0e8      	b.n	8006a38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2200      	movs	r2, #0
 800686a:	461c      	mov	r4, r3
 800686c:	4615      	mov	r5, r2
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	022b      	lsls	r3, r5, #8
 8006878:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800687c:	0222      	lsls	r2, r4, #8
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	6849      	ldr	r1, [r1, #4]
 8006882:	0849      	lsrs	r1, r1, #1
 8006884:	2000      	movs	r0, #0
 8006886:	4688      	mov	r8, r1
 8006888:	4681      	mov	r9, r0
 800688a:	eb12 0a08 	adds.w	sl, r2, r8
 800688e:	eb43 0b09 	adc.w	fp, r3, r9
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a0:	4650      	mov	r0, sl
 80068a2:	4659      	mov	r1, fp
 80068a4:	f7fa f87e 	bl	80009a4 <__aeabi_uldivmod>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4613      	mov	r3, r2
 80068ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068b6:	d308      	bcc.n	80068ca <UART_SetConfig+0x3de>
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068be:	d204      	bcs.n	80068ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	60da      	str	r2, [r3, #12]
 80068c8:	e0b6      	b.n	8006a38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068d0:	e0b2      	b.n	8006a38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068da:	d15e      	bne.n	800699a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80068dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d828      	bhi.n	8006936 <UART_SetConfig+0x44a>
 80068e4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <UART_SetConfig+0x400>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006921 	.word	0x08006921
 80068f8:	08006937 	.word	0x08006937
 80068fc:	08006927 	.word	0x08006927
 8006900:	08006937 	.word	0x08006937
 8006904:	08006937 	.word	0x08006937
 8006908:	08006937 	.word	0x08006937
 800690c:	0800692f 	.word	0x0800692f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006910:	f7fd fc7a 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8006914:	61f8      	str	r0, [r7, #28]
        break;
 8006916:	e014      	b.n	8006942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006918:	f7fd fc8c 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 800691c:	61f8      	str	r0, [r7, #28]
        break;
 800691e:	e010      	b.n	8006942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006920:	4b4d      	ldr	r3, [pc, #308]	@ (8006a58 <UART_SetConfig+0x56c>)
 8006922:	61fb      	str	r3, [r7, #28]
        break;
 8006924:	e00d      	b.n	8006942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006926:	f7fd fbd7 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 800692a:	61f8      	str	r0, [r7, #28]
        break;
 800692c:	e009      	b.n	8006942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006932:	61fb      	str	r3, [r7, #28]
        break;
 8006934:	e005      	b.n	8006942 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d077      	beq.n	8006a38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	005a      	lsls	r2, r3, #1
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	441a      	add	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	fbb2 f3f3 	udiv	r3, r2, r3
 800695c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b0f      	cmp	r3, #15
 8006962:	d916      	bls.n	8006992 <UART_SetConfig+0x4a6>
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800696a:	d212      	bcs.n	8006992 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f023 030f 	bic.w	r3, r3, #15
 8006974:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	b29b      	uxth	r3, r3
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	b29a      	uxth	r2, r3
 8006982:	8afb      	ldrh	r3, [r7, #22]
 8006984:	4313      	orrs	r3, r2
 8006986:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	8afa      	ldrh	r2, [r7, #22]
 800698e:	60da      	str	r2, [r3, #12]
 8006990:	e052      	b.n	8006a38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006998:	e04e      	b.n	8006a38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800699a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d827      	bhi.n	80069f2 <UART_SetConfig+0x506>
 80069a2:	a201      	add	r2, pc, #4	@ (adr r2, 80069a8 <UART_SetConfig+0x4bc>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069cd 	.word	0x080069cd
 80069ac:	080069d5 	.word	0x080069d5
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	080069f3 	.word	0x080069f3
 80069b8:	080069e3 	.word	0x080069e3
 80069bc:	080069f3 	.word	0x080069f3
 80069c0:	080069f3 	.word	0x080069f3
 80069c4:	080069f3 	.word	0x080069f3
 80069c8:	080069eb 	.word	0x080069eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069cc:	f7fd fc1c 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 80069d0:	61f8      	str	r0, [r7, #28]
        break;
 80069d2:	e014      	b.n	80069fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069d4:	f7fd fc2e 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 80069d8:	61f8      	str	r0, [r7, #28]
        break;
 80069da:	e010      	b.n	80069fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006a58 <UART_SetConfig+0x56c>)
 80069de:	61fb      	str	r3, [r7, #28]
        break;
 80069e0:	e00d      	b.n	80069fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069e2:	f7fd fb79 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 80069e6:	61f8      	str	r0, [r7, #28]
        break;
 80069e8:	e009      	b.n	80069fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ee:	61fb      	str	r3, [r7, #28]
        break;
 80069f0:	e005      	b.n	80069fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069fc:	bf00      	nop
    }

    if (pclk != 0U)
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d019      	beq.n	8006a38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	085a      	lsrs	r2, r3, #1
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	441a      	add	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2b0f      	cmp	r3, #15
 8006a1c:	d909      	bls.n	8006a32 <UART_SetConfig+0x546>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a24:	d205      	bcs.n	8006a32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	e002      	b.n	8006a38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3728      	adds	r7, #40	@ 0x28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a52:	bf00      	nop
 8006a54:	40008000 	.word	0x40008000
 8006a58:	00f42400 	.word	0x00f42400

08006a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01a      	beq.n	8006b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b5a:	d10a      	bne.n	8006b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	605a      	str	r2, [r3, #4]
  }
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b098      	sub	sp, #96	@ 0x60
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bb0:	f7fb fe42 	bl	8002838 <HAL_GetTick>
 8006bb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d12e      	bne.n	8006c22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f88c 	bl	8006cf0 <UART_WaitOnFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d021      	beq.n	8006c22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e6      	bne.n	8006bde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e062      	b.n	8006ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d149      	bne.n	8006cc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f856 	bl	8006cf0 <UART_WaitOnFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d03c      	beq.n	8006cc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	623b      	str	r3, [r7, #32]
   return(result);
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e6      	bne.n	8006c4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c9c:	61fa      	str	r2, [r7, #28]
 8006c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e5      	bne.n	8006c7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e011      	b.n	8006ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3758      	adds	r7, #88	@ 0x58
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d00:	e049      	b.n	8006d96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d08:	d045      	beq.n	8006d96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0a:	f7fb fd95 	bl	8002838 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d302      	bcc.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e048      	b.n	8006db6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d031      	beq.n	8006d96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d110      	bne.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2208      	movs	r2, #8
 8006d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f8ff 	bl	8006f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2208      	movs	r2, #8
 8006d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e029      	b.n	8006db6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d70:	d111      	bne.n	8006d96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f8e5 	bl	8006f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e00f      	b.n	8006db6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	bf0c      	ite	eq
 8006da6:	2301      	moveq	r3, #1
 8006da8:	2300      	movne	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d0a6      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b097      	sub	sp, #92	@ 0x5c
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	88fa      	ldrh	r2, [r7, #6]
 8006dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df2:	d10e      	bne.n	8006e12 <UART_Start_Receive_IT+0x52>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d105      	bne.n	8006e08 <UART_Start_Receive_IT+0x48>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e06:	e02d      	b.n	8006e64 <UART_Start_Receive_IT+0xa4>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	22ff      	movs	r2, #255	@ 0xff
 8006e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e10:	e028      	b.n	8006e64 <UART_Start_Receive_IT+0xa4>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10d      	bne.n	8006e36 <UART_Start_Receive_IT+0x76>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d104      	bne.n	8006e2c <UART_Start_Receive_IT+0x6c>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	22ff      	movs	r2, #255	@ 0xff
 8006e26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e2a:	e01b      	b.n	8006e64 <UART_Start_Receive_IT+0xa4>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	227f      	movs	r2, #127	@ 0x7f
 8006e30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e34:	e016      	b.n	8006e64 <UART_Start_Receive_IT+0xa4>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e3e:	d10d      	bne.n	8006e5c <UART_Start_Receive_IT+0x9c>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <UART_Start_Receive_IT+0x92>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	227f      	movs	r2, #127	@ 0x7f
 8006e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e50:	e008      	b.n	8006e64 <UART_Start_Receive_IT+0xa4>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	223f      	movs	r2, #63	@ 0x3f
 8006e56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e5a:	e003      	b.n	8006e64 <UART_Start_Receive_IT+0xa4>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2222      	movs	r2, #34	@ 0x22
 8006e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3308      	adds	r3, #8
 8006e92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e94:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006e96:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e5      	bne.n	8006e74 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb0:	d107      	bne.n	8006ec2 <UART_Start_Receive_IT+0x102>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4a21      	ldr	r2, [pc, #132]	@ (8006f44 <UART_Start_Receive_IT+0x184>)
 8006ebe:	669a      	str	r2, [r3, #104]	@ 0x68
 8006ec0:	e002      	b.n	8006ec8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4a20      	ldr	r2, [pc, #128]	@ (8006f48 <UART_Start_Receive_IT+0x188>)
 8006ec6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d019      	beq.n	8006f04 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e6      	bne.n	8006ed0 <UART_Start_Receive_IT+0x110>
 8006f02:	e018      	b.n	8006f36 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	613b      	str	r3, [r7, #16]
   return(result);
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f043 0320 	orr.w	r3, r3, #32
 8006f18:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f22:	623b      	str	r3, [r7, #32]
 8006f24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	69f9      	ldr	r1, [r7, #28]
 8006f28:	6a3a      	ldr	r2, [r7, #32]
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e6      	bne.n	8006f04 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	375c      	adds	r7, #92	@ 0x5c
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	0800733d 	.word	0x0800733d
 8006f48:	08007181 	.word	0x08007181

08006f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b095      	sub	sp, #84	@ 0x54
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e6      	bne.n	8006f54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e5      	bne.n	8006f86 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d118      	bne.n	8006ff4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f023 0310 	bic.w	r3, r3, #16
 8006fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6979      	ldr	r1, [r7, #20]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	613b      	str	r3, [r7, #16]
   return(result);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e6      	bne.n	8006fc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007008:	bf00      	nop
 800700a:	3754      	adds	r7, #84	@ 0x54
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007020:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff fa3a 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704c:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007052:	2200      	movs	r2, #0
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800705a:	2b00      	cmp	r3, #0
 800705c:	d004      	beq.n	8007068 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007064:	2b00      	cmp	r3, #0
 8007066:	d11d      	bne.n	80070a4 <UART_DMATxAbortCallback+0x64>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	220f      	movs	r2, #15
 8007086:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff fa0f 	bl	80064c0 <HAL_UART_AbortCpltCallback>
 80070a2:	e000      	b.n	80070a6 <UART_DMATxAbortCallback+0x66>
      return;
 80070a4:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070be:	2200      	movs	r2, #0
 80070c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d127      	bne.n	8007124 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	220f      	movs	r2, #15
 80070f2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	8b1b      	ldrh	r3, [r3, #24]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0208 	orr.w	r2, r2, #8
 8007104:	b292      	uxth	r2, r2
 8007106:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2220      	movs	r2, #32
 800710c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7ff f9cf 	bl	80064c0 <HAL_UART_AbortCpltCallback>
 8007122:	e000      	b.n	8007126 <UART_DMARxAbortCallback+0x7a>
      return;
 8007124:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	60bb      	str	r3, [r7, #8]
   return(result);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007148:	61fb      	str	r3, [r7, #28]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6979      	ldr	r1, [r7, #20]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	613b      	str	r3, [r7, #16]
   return(result);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e6      	bne.n	8007134 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff f990 	bl	8006498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007178:	bf00      	nop
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b09c      	sub	sp, #112	@ 0x70
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800718e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007198:	2b22      	cmp	r3, #34	@ 0x22
 800719a:	f040 80be 	bne.w	800731a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80071a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071ac:	b2d9      	uxtb	r1, r3
 80071ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b8:	400a      	ands	r2, r1
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f040 80a3 	bne.w	800732e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007206:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007208:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800720c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e6      	bne.n	80071e8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800722a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	667b      	str	r3, [r7, #100]	@ 0x64
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3308      	adds	r3, #8
 8007238:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800723a:	647a      	str	r2, [r7, #68]	@ 0x44
 800723c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e5      	bne.n	800721a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a34      	ldr	r2, [pc, #208]	@ (8007338 <UART_RxISR_8BIT+0x1b8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d01f      	beq.n	80072ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d018      	beq.n	80072ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	623b      	str	r3, [r7, #32]
   return(result);
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800728e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007298:	633b      	str	r3, [r7, #48]	@ 0x30
 800729a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800729e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e6      	bne.n	800727a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d12e      	bne.n	8007312 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	e853 3f00 	ldrex	r3, [r3]
 80072c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0310 	bic.w	r3, r3, #16
 80072ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072d8:	61fb      	str	r3, [r7, #28]
 80072da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	69b9      	ldr	r1, [r7, #24]
 80072de:	69fa      	ldr	r2, [r7, #28]
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	617b      	str	r3, [r7, #20]
   return(result);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e6      	bne.n	80072ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	f003 0310 	and.w	r3, r3, #16
 80072f6:	2b10      	cmp	r3, #16
 80072f8:	d103      	bne.n	8007302 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2210      	movs	r2, #16
 8007300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff f8e2 	bl	80064d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007310:	e00d      	b.n	800732e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fa f9e8 	bl	80016e8 <HAL_UART_RxCpltCallback>
}
 8007318:	e009      	b.n	800732e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	8b1b      	ldrh	r3, [r3, #24]
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0208 	orr.w	r2, r2, #8
 800732a:	b292      	uxth	r2, r2
 800732c:	831a      	strh	r2, [r3, #24]
}
 800732e:	bf00      	nop
 8007330:	3770      	adds	r7, #112	@ 0x70
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	40008000 	.word	0x40008000

0800733c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b09c      	sub	sp, #112	@ 0x70
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800734a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007354:	2b22      	cmp	r3, #34	@ 0x22
 8007356:	f040 80be 	bne.w	80074d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007360:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007368:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800736a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800736e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007372:	4013      	ands	r3, r2
 8007374:	b29a      	uxth	r2, r3
 8007376:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007378:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737e:	1c9a      	adds	r2, r3, #2
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800738a:	b29b      	uxth	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f040 80a3 	bne.w	80074ea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80073c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e6      	bne.n	80073a4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3308      	adds	r3, #8
 80073dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	f023 0301 	bic.w	r3, r3, #1
 80073ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80073f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e5      	bne.n	80073d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a34      	ldr	r2, [pc, #208]	@ (80074f4 <UART_RxISR_16BIT+0x1b8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d01f      	beq.n	8007468 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d018      	beq.n	8007468 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	61fb      	str	r3, [r7, #28]
   return(result);
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800744a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007456:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800745a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e6      	bne.n	8007436 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800746c:	2b01      	cmp	r3, #1
 800746e:	d12e      	bne.n	80074ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	60bb      	str	r3, [r7, #8]
   return(result);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f023 0310 	bic.w	r3, r3, #16
 800748a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6979      	ldr	r1, [r7, #20]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	613b      	str	r3, [r7, #16]
   return(result);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e6      	bne.n	8007476 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f003 0310 	and.w	r3, r3, #16
 80074b2:	2b10      	cmp	r3, #16
 80074b4:	d103      	bne.n	80074be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2210      	movs	r2, #16
 80074bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff f804 	bl	80064d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074cc:	e00d      	b.n	80074ea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fa f90a 	bl	80016e8 <HAL_UART_RxCpltCallback>
}
 80074d4:	e009      	b.n	80074ea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	8b1b      	ldrh	r3, [r3, #24]
 80074dc:	b29a      	uxth	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0208 	orr.w	r2, r2, #8
 80074e6:	b292      	uxth	r2, r2
 80074e8:	831a      	strh	r2, [r3, #24]
}
 80074ea:	bf00      	nop
 80074ec:	3770      	adds	r7, #112	@ 0x70
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	40008000 	.word	0x40008000

080074f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <std>:
 800750c:	2300      	movs	r3, #0
 800750e:	b510      	push	{r4, lr}
 8007510:	4604      	mov	r4, r0
 8007512:	e9c0 3300 	strd	r3, r3, [r0]
 8007516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800751a:	6083      	str	r3, [r0, #8]
 800751c:	8181      	strh	r1, [r0, #12]
 800751e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007520:	81c2      	strh	r2, [r0, #14]
 8007522:	6183      	str	r3, [r0, #24]
 8007524:	4619      	mov	r1, r3
 8007526:	2208      	movs	r2, #8
 8007528:	305c      	adds	r0, #92	@ 0x5c
 800752a:	f000 f9e7 	bl	80078fc <memset>
 800752e:	4b0d      	ldr	r3, [pc, #52]	@ (8007564 <std+0x58>)
 8007530:	6263      	str	r3, [r4, #36]	@ 0x24
 8007532:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <std+0x5c>)
 8007534:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <std+0x60>)
 8007538:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800753a:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <std+0x64>)
 800753c:	6323      	str	r3, [r4, #48]	@ 0x30
 800753e:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <std+0x68>)
 8007540:	6224      	str	r4, [r4, #32]
 8007542:	429c      	cmp	r4, r3
 8007544:	d006      	beq.n	8007554 <std+0x48>
 8007546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800754a:	4294      	cmp	r4, r2
 800754c:	d002      	beq.n	8007554 <std+0x48>
 800754e:	33d0      	adds	r3, #208	@ 0xd0
 8007550:	429c      	cmp	r4, r3
 8007552:	d105      	bne.n	8007560 <std+0x54>
 8007554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800755c:	f000 ba46 	b.w	80079ec <__retarget_lock_init_recursive>
 8007560:	bd10      	pop	{r4, pc}
 8007562:	bf00      	nop
 8007564:	0800774d 	.word	0x0800774d
 8007568:	0800776f 	.word	0x0800776f
 800756c:	080077a7 	.word	0x080077a7
 8007570:	080077cb 	.word	0x080077cb
 8007574:	20000d98 	.word	0x20000d98

08007578 <stdio_exit_handler>:
 8007578:	4a02      	ldr	r2, [pc, #8]	@ (8007584 <stdio_exit_handler+0xc>)
 800757a:	4903      	ldr	r1, [pc, #12]	@ (8007588 <stdio_exit_handler+0x10>)
 800757c:	4803      	ldr	r0, [pc, #12]	@ (800758c <stdio_exit_handler+0x14>)
 800757e:	f000 b869 	b.w	8007654 <_fwalk_sglue>
 8007582:	bf00      	nop
 8007584:	2000000c 	.word	0x2000000c
 8007588:	08007ced 	.word	0x08007ced
 800758c:	2000001c 	.word	0x2000001c

08007590 <cleanup_stdio>:
 8007590:	6841      	ldr	r1, [r0, #4]
 8007592:	4b0c      	ldr	r3, [pc, #48]	@ (80075c4 <cleanup_stdio+0x34>)
 8007594:	4299      	cmp	r1, r3
 8007596:	b510      	push	{r4, lr}
 8007598:	4604      	mov	r4, r0
 800759a:	d001      	beq.n	80075a0 <cleanup_stdio+0x10>
 800759c:	f000 fba6 	bl	8007cec <_fflush_r>
 80075a0:	68a1      	ldr	r1, [r4, #8]
 80075a2:	4b09      	ldr	r3, [pc, #36]	@ (80075c8 <cleanup_stdio+0x38>)
 80075a4:	4299      	cmp	r1, r3
 80075a6:	d002      	beq.n	80075ae <cleanup_stdio+0x1e>
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 fb9f 	bl	8007cec <_fflush_r>
 80075ae:	68e1      	ldr	r1, [r4, #12]
 80075b0:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <cleanup_stdio+0x3c>)
 80075b2:	4299      	cmp	r1, r3
 80075b4:	d004      	beq.n	80075c0 <cleanup_stdio+0x30>
 80075b6:	4620      	mov	r0, r4
 80075b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075bc:	f000 bb96 	b.w	8007cec <_fflush_r>
 80075c0:	bd10      	pop	{r4, pc}
 80075c2:	bf00      	nop
 80075c4:	20000d98 	.word	0x20000d98
 80075c8:	20000e00 	.word	0x20000e00
 80075cc:	20000e68 	.word	0x20000e68

080075d0 <global_stdio_init.part.0>:
 80075d0:	b510      	push	{r4, lr}
 80075d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <global_stdio_init.part.0+0x30>)
 80075d4:	4c0b      	ldr	r4, [pc, #44]	@ (8007604 <global_stdio_init.part.0+0x34>)
 80075d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007608 <global_stdio_init.part.0+0x38>)
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	4620      	mov	r0, r4
 80075dc:	2200      	movs	r2, #0
 80075de:	2104      	movs	r1, #4
 80075e0:	f7ff ff94 	bl	800750c <std>
 80075e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075e8:	2201      	movs	r2, #1
 80075ea:	2109      	movs	r1, #9
 80075ec:	f7ff ff8e 	bl	800750c <std>
 80075f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075f4:	2202      	movs	r2, #2
 80075f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075fa:	2112      	movs	r1, #18
 80075fc:	f7ff bf86 	b.w	800750c <std>
 8007600:	20000ed0 	.word	0x20000ed0
 8007604:	20000d98 	.word	0x20000d98
 8007608:	08007579 	.word	0x08007579

0800760c <__sfp_lock_acquire>:
 800760c:	4801      	ldr	r0, [pc, #4]	@ (8007614 <__sfp_lock_acquire+0x8>)
 800760e:	f000 b9ee 	b.w	80079ee <__retarget_lock_acquire_recursive>
 8007612:	bf00      	nop
 8007614:	20000ed9 	.word	0x20000ed9

08007618 <__sfp_lock_release>:
 8007618:	4801      	ldr	r0, [pc, #4]	@ (8007620 <__sfp_lock_release+0x8>)
 800761a:	f000 b9e9 	b.w	80079f0 <__retarget_lock_release_recursive>
 800761e:	bf00      	nop
 8007620:	20000ed9 	.word	0x20000ed9

08007624 <__sinit>:
 8007624:	b510      	push	{r4, lr}
 8007626:	4604      	mov	r4, r0
 8007628:	f7ff fff0 	bl	800760c <__sfp_lock_acquire>
 800762c:	6a23      	ldr	r3, [r4, #32]
 800762e:	b11b      	cbz	r3, 8007638 <__sinit+0x14>
 8007630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007634:	f7ff bff0 	b.w	8007618 <__sfp_lock_release>
 8007638:	4b04      	ldr	r3, [pc, #16]	@ (800764c <__sinit+0x28>)
 800763a:	6223      	str	r3, [r4, #32]
 800763c:	4b04      	ldr	r3, [pc, #16]	@ (8007650 <__sinit+0x2c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1f5      	bne.n	8007630 <__sinit+0xc>
 8007644:	f7ff ffc4 	bl	80075d0 <global_stdio_init.part.0>
 8007648:	e7f2      	b.n	8007630 <__sinit+0xc>
 800764a:	bf00      	nop
 800764c:	08007591 	.word	0x08007591
 8007650:	20000ed0 	.word	0x20000ed0

08007654 <_fwalk_sglue>:
 8007654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007658:	4607      	mov	r7, r0
 800765a:	4688      	mov	r8, r1
 800765c:	4614      	mov	r4, r2
 800765e:	2600      	movs	r6, #0
 8007660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007664:	f1b9 0901 	subs.w	r9, r9, #1
 8007668:	d505      	bpl.n	8007676 <_fwalk_sglue+0x22>
 800766a:	6824      	ldr	r4, [r4, #0]
 800766c:	2c00      	cmp	r4, #0
 800766e:	d1f7      	bne.n	8007660 <_fwalk_sglue+0xc>
 8007670:	4630      	mov	r0, r6
 8007672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007676:	89ab      	ldrh	r3, [r5, #12]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d907      	bls.n	800768c <_fwalk_sglue+0x38>
 800767c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007680:	3301      	adds	r3, #1
 8007682:	d003      	beq.n	800768c <_fwalk_sglue+0x38>
 8007684:	4629      	mov	r1, r5
 8007686:	4638      	mov	r0, r7
 8007688:	47c0      	blx	r8
 800768a:	4306      	orrs	r6, r0
 800768c:	3568      	adds	r5, #104	@ 0x68
 800768e:	e7e9      	b.n	8007664 <_fwalk_sglue+0x10>

08007690 <_puts_r>:
 8007690:	6a03      	ldr	r3, [r0, #32]
 8007692:	b570      	push	{r4, r5, r6, lr}
 8007694:	6884      	ldr	r4, [r0, #8]
 8007696:	4605      	mov	r5, r0
 8007698:	460e      	mov	r6, r1
 800769a:	b90b      	cbnz	r3, 80076a0 <_puts_r+0x10>
 800769c:	f7ff ffc2 	bl	8007624 <__sinit>
 80076a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076a2:	07db      	lsls	r3, r3, #31
 80076a4:	d405      	bmi.n	80076b2 <_puts_r+0x22>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	0598      	lsls	r0, r3, #22
 80076aa:	d402      	bmi.n	80076b2 <_puts_r+0x22>
 80076ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ae:	f000 f99e 	bl	80079ee <__retarget_lock_acquire_recursive>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	0719      	lsls	r1, r3, #28
 80076b6:	d502      	bpl.n	80076be <_puts_r+0x2e>
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d135      	bne.n	800772a <_puts_r+0x9a>
 80076be:	4621      	mov	r1, r4
 80076c0:	4628      	mov	r0, r5
 80076c2:	f000 f8c5 	bl	8007850 <__swsetup_r>
 80076c6:	b380      	cbz	r0, 800772a <_puts_r+0x9a>
 80076c8:	f04f 35ff 	mov.w	r5, #4294967295
 80076cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076ce:	07da      	lsls	r2, r3, #31
 80076d0:	d405      	bmi.n	80076de <_puts_r+0x4e>
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	059b      	lsls	r3, r3, #22
 80076d6:	d402      	bmi.n	80076de <_puts_r+0x4e>
 80076d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076da:	f000 f989 	bl	80079f0 <__retarget_lock_release_recursive>
 80076de:	4628      	mov	r0, r5
 80076e0:	bd70      	pop	{r4, r5, r6, pc}
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da04      	bge.n	80076f0 <_puts_r+0x60>
 80076e6:	69a2      	ldr	r2, [r4, #24]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	dc17      	bgt.n	800771c <_puts_r+0x8c>
 80076ec:	290a      	cmp	r1, #10
 80076ee:	d015      	beq.n	800771c <_puts_r+0x8c>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	6022      	str	r2, [r4, #0]
 80076f6:	7019      	strb	r1, [r3, #0]
 80076f8:	68a3      	ldr	r3, [r4, #8]
 80076fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076fe:	3b01      	subs	r3, #1
 8007700:	60a3      	str	r3, [r4, #8]
 8007702:	2900      	cmp	r1, #0
 8007704:	d1ed      	bne.n	80076e2 <_puts_r+0x52>
 8007706:	2b00      	cmp	r3, #0
 8007708:	da11      	bge.n	800772e <_puts_r+0x9e>
 800770a:	4622      	mov	r2, r4
 800770c:	210a      	movs	r1, #10
 800770e:	4628      	mov	r0, r5
 8007710:	f000 f85f 	bl	80077d2 <__swbuf_r>
 8007714:	3001      	adds	r0, #1
 8007716:	d0d7      	beq.n	80076c8 <_puts_r+0x38>
 8007718:	250a      	movs	r5, #10
 800771a:	e7d7      	b.n	80076cc <_puts_r+0x3c>
 800771c:	4622      	mov	r2, r4
 800771e:	4628      	mov	r0, r5
 8007720:	f000 f857 	bl	80077d2 <__swbuf_r>
 8007724:	3001      	adds	r0, #1
 8007726:	d1e7      	bne.n	80076f8 <_puts_r+0x68>
 8007728:	e7ce      	b.n	80076c8 <_puts_r+0x38>
 800772a:	3e01      	subs	r6, #1
 800772c:	e7e4      	b.n	80076f8 <_puts_r+0x68>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	6022      	str	r2, [r4, #0]
 8007734:	220a      	movs	r2, #10
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	e7ee      	b.n	8007718 <_puts_r+0x88>
	...

0800773c <puts>:
 800773c:	4b02      	ldr	r3, [pc, #8]	@ (8007748 <puts+0xc>)
 800773e:	4601      	mov	r1, r0
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	f7ff bfa5 	b.w	8007690 <_puts_r>
 8007746:	bf00      	nop
 8007748:	20000018 	.word	0x20000018

0800774c <__sread>:
 800774c:	b510      	push	{r4, lr}
 800774e:	460c      	mov	r4, r1
 8007750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007754:	f000 f8fc 	bl	8007950 <_read_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	bfab      	itete	ge
 800775c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800775e:	89a3      	ldrhlt	r3, [r4, #12]
 8007760:	181b      	addge	r3, r3, r0
 8007762:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007766:	bfac      	ite	ge
 8007768:	6563      	strge	r3, [r4, #84]	@ 0x54
 800776a:	81a3      	strhlt	r3, [r4, #12]
 800776c:	bd10      	pop	{r4, pc}

0800776e <__swrite>:
 800776e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007772:	461f      	mov	r7, r3
 8007774:	898b      	ldrh	r3, [r1, #12]
 8007776:	05db      	lsls	r3, r3, #23
 8007778:	4605      	mov	r5, r0
 800777a:	460c      	mov	r4, r1
 800777c:	4616      	mov	r6, r2
 800777e:	d505      	bpl.n	800778c <__swrite+0x1e>
 8007780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007784:	2302      	movs	r3, #2
 8007786:	2200      	movs	r2, #0
 8007788:	f000 f8d0 	bl	800792c <_lseek_r>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	4632      	mov	r2, r6
 800779a:	463b      	mov	r3, r7
 800779c:	4628      	mov	r0, r5
 800779e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077a2:	f000 b8e7 	b.w	8007974 <_write_r>

080077a6 <__sseek>:
 80077a6:	b510      	push	{r4, lr}
 80077a8:	460c      	mov	r4, r1
 80077aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ae:	f000 f8bd 	bl	800792c <_lseek_r>
 80077b2:	1c43      	adds	r3, r0, #1
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	bf15      	itete	ne
 80077b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077c2:	81a3      	strheq	r3, [r4, #12]
 80077c4:	bf18      	it	ne
 80077c6:	81a3      	strhne	r3, [r4, #12]
 80077c8:	bd10      	pop	{r4, pc}

080077ca <__sclose>:
 80077ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ce:	f000 b89d 	b.w	800790c <_close_r>

080077d2 <__swbuf_r>:
 80077d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d4:	460e      	mov	r6, r1
 80077d6:	4614      	mov	r4, r2
 80077d8:	4605      	mov	r5, r0
 80077da:	b118      	cbz	r0, 80077e4 <__swbuf_r+0x12>
 80077dc:	6a03      	ldr	r3, [r0, #32]
 80077de:	b90b      	cbnz	r3, 80077e4 <__swbuf_r+0x12>
 80077e0:	f7ff ff20 	bl	8007624 <__sinit>
 80077e4:	69a3      	ldr	r3, [r4, #24]
 80077e6:	60a3      	str	r3, [r4, #8]
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	071a      	lsls	r2, r3, #28
 80077ec:	d501      	bpl.n	80077f2 <__swbuf_r+0x20>
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	b943      	cbnz	r3, 8007804 <__swbuf_r+0x32>
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 f82b 	bl	8007850 <__swsetup_r>
 80077fa:	b118      	cbz	r0, 8007804 <__swbuf_r+0x32>
 80077fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007800:	4638      	mov	r0, r7
 8007802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	6922      	ldr	r2, [r4, #16]
 8007808:	1a98      	subs	r0, r3, r2
 800780a:	6963      	ldr	r3, [r4, #20]
 800780c:	b2f6      	uxtb	r6, r6
 800780e:	4283      	cmp	r3, r0
 8007810:	4637      	mov	r7, r6
 8007812:	dc05      	bgt.n	8007820 <__swbuf_r+0x4e>
 8007814:	4621      	mov	r1, r4
 8007816:	4628      	mov	r0, r5
 8007818:	f000 fa68 	bl	8007cec <_fflush_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	d1ed      	bne.n	80077fc <__swbuf_r+0x2a>
 8007820:	68a3      	ldr	r3, [r4, #8]
 8007822:	3b01      	subs	r3, #1
 8007824:	60a3      	str	r3, [r4, #8]
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	6022      	str	r2, [r4, #0]
 800782c:	701e      	strb	r6, [r3, #0]
 800782e:	6962      	ldr	r2, [r4, #20]
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	429a      	cmp	r2, r3
 8007834:	d004      	beq.n	8007840 <__swbuf_r+0x6e>
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	07db      	lsls	r3, r3, #31
 800783a:	d5e1      	bpl.n	8007800 <__swbuf_r+0x2e>
 800783c:	2e0a      	cmp	r6, #10
 800783e:	d1df      	bne.n	8007800 <__swbuf_r+0x2e>
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 fa52 	bl	8007cec <_fflush_r>
 8007848:	2800      	cmp	r0, #0
 800784a:	d0d9      	beq.n	8007800 <__swbuf_r+0x2e>
 800784c:	e7d6      	b.n	80077fc <__swbuf_r+0x2a>
	...

08007850 <__swsetup_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4b29      	ldr	r3, [pc, #164]	@ (80078f8 <__swsetup_r+0xa8>)
 8007854:	4605      	mov	r5, r0
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	460c      	mov	r4, r1
 800785a:	b118      	cbz	r0, 8007864 <__swsetup_r+0x14>
 800785c:	6a03      	ldr	r3, [r0, #32]
 800785e:	b90b      	cbnz	r3, 8007864 <__swsetup_r+0x14>
 8007860:	f7ff fee0 	bl	8007624 <__sinit>
 8007864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007868:	0719      	lsls	r1, r3, #28
 800786a:	d422      	bmi.n	80078b2 <__swsetup_r+0x62>
 800786c:	06da      	lsls	r2, r3, #27
 800786e:	d407      	bmi.n	8007880 <__swsetup_r+0x30>
 8007870:	2209      	movs	r2, #9
 8007872:	602a      	str	r2, [r5, #0]
 8007874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	e033      	b.n	80078e8 <__swsetup_r+0x98>
 8007880:	0758      	lsls	r0, r3, #29
 8007882:	d512      	bpl.n	80078aa <__swsetup_r+0x5a>
 8007884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007886:	b141      	cbz	r1, 800789a <__swsetup_r+0x4a>
 8007888:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800788c:	4299      	cmp	r1, r3
 800788e:	d002      	beq.n	8007896 <__swsetup_r+0x46>
 8007890:	4628      	mov	r0, r5
 8007892:	f000 f8af 	bl	80079f4 <_free_r>
 8007896:	2300      	movs	r3, #0
 8007898:	6363      	str	r3, [r4, #52]	@ 0x34
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	2300      	movs	r3, #0
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	6923      	ldr	r3, [r4, #16]
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	f043 0308 	orr.w	r3, r3, #8
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	6923      	ldr	r3, [r4, #16]
 80078b4:	b94b      	cbnz	r3, 80078ca <__swsetup_r+0x7a>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c0:	d003      	beq.n	80078ca <__swsetup_r+0x7a>
 80078c2:	4621      	mov	r1, r4
 80078c4:	4628      	mov	r0, r5
 80078c6:	f000 fa5f 	bl	8007d88 <__smakebuf_r>
 80078ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ce:	f013 0201 	ands.w	r2, r3, #1
 80078d2:	d00a      	beq.n	80078ea <__swsetup_r+0x9a>
 80078d4:	2200      	movs	r2, #0
 80078d6:	60a2      	str	r2, [r4, #8]
 80078d8:	6962      	ldr	r2, [r4, #20]
 80078da:	4252      	negs	r2, r2
 80078dc:	61a2      	str	r2, [r4, #24]
 80078de:	6922      	ldr	r2, [r4, #16]
 80078e0:	b942      	cbnz	r2, 80078f4 <__swsetup_r+0xa4>
 80078e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078e6:	d1c5      	bne.n	8007874 <__swsetup_r+0x24>
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
 80078ea:	0799      	lsls	r1, r3, #30
 80078ec:	bf58      	it	pl
 80078ee:	6962      	ldrpl	r2, [r4, #20]
 80078f0:	60a2      	str	r2, [r4, #8]
 80078f2:	e7f4      	b.n	80078de <__swsetup_r+0x8e>
 80078f4:	2000      	movs	r0, #0
 80078f6:	e7f7      	b.n	80078e8 <__swsetup_r+0x98>
 80078f8:	20000018 	.word	0x20000018

080078fc <memset>:
 80078fc:	4402      	add	r2, r0
 80078fe:	4603      	mov	r3, r0
 8007900:	4293      	cmp	r3, r2
 8007902:	d100      	bne.n	8007906 <memset+0xa>
 8007904:	4770      	bx	lr
 8007906:	f803 1b01 	strb.w	r1, [r3], #1
 800790a:	e7f9      	b.n	8007900 <memset+0x4>

0800790c <_close_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d06      	ldr	r5, [pc, #24]	@ (8007928 <_close_r+0x1c>)
 8007910:	2300      	movs	r3, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	f7fa fe7f 	bl	800261a <_close>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_close_r+0x1a>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_close_r+0x1a>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	20000ed4 	.word	0x20000ed4

0800792c <_lseek_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d07      	ldr	r5, [pc, #28]	@ (800794c <_lseek_r+0x20>)
 8007930:	4604      	mov	r4, r0
 8007932:	4608      	mov	r0, r1
 8007934:	4611      	mov	r1, r2
 8007936:	2200      	movs	r2, #0
 8007938:	602a      	str	r2, [r5, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	f7fa fe94 	bl	8002668 <_lseek>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_lseek_r+0x1e>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_lseek_r+0x1e>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	20000ed4 	.word	0x20000ed4

08007950 <_read_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d07      	ldr	r5, [pc, #28]	@ (8007970 <_read_r+0x20>)
 8007954:	4604      	mov	r4, r0
 8007956:	4608      	mov	r0, r1
 8007958:	4611      	mov	r1, r2
 800795a:	2200      	movs	r2, #0
 800795c:	602a      	str	r2, [r5, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	f7fa fe22 	bl	80025a8 <_read>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_read_r+0x1e>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b103      	cbz	r3, 800796e <_read_r+0x1e>
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	20000ed4 	.word	0x20000ed4

08007974 <_write_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4d07      	ldr	r5, [pc, #28]	@ (8007994 <_write_r+0x20>)
 8007978:	4604      	mov	r4, r0
 800797a:	4608      	mov	r0, r1
 800797c:	4611      	mov	r1, r2
 800797e:	2200      	movs	r2, #0
 8007980:	602a      	str	r2, [r5, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	f7fa fe2d 	bl	80025e2 <_write>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d102      	bne.n	8007992 <_write_r+0x1e>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	b103      	cbz	r3, 8007992 <_write_r+0x1e>
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	20000ed4 	.word	0x20000ed4

08007998 <__errno>:
 8007998:	4b01      	ldr	r3, [pc, #4]	@ (80079a0 <__errno+0x8>)
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20000018 	.word	0x20000018

080079a4 <__libc_init_array>:
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	4d0d      	ldr	r5, [pc, #52]	@ (80079dc <__libc_init_array+0x38>)
 80079a8:	4c0d      	ldr	r4, [pc, #52]	@ (80079e0 <__libc_init_array+0x3c>)
 80079aa:	1b64      	subs	r4, r4, r5
 80079ac:	10a4      	asrs	r4, r4, #2
 80079ae:	2600      	movs	r6, #0
 80079b0:	42a6      	cmp	r6, r4
 80079b2:	d109      	bne.n	80079c8 <__libc_init_array+0x24>
 80079b4:	4d0b      	ldr	r5, [pc, #44]	@ (80079e4 <__libc_init_array+0x40>)
 80079b6:	4c0c      	ldr	r4, [pc, #48]	@ (80079e8 <__libc_init_array+0x44>)
 80079b8:	f000 fa54 	bl	8007e64 <_init>
 80079bc:	1b64      	subs	r4, r4, r5
 80079be:	10a4      	asrs	r4, r4, #2
 80079c0:	2600      	movs	r6, #0
 80079c2:	42a6      	cmp	r6, r4
 80079c4:	d105      	bne.n	80079d2 <__libc_init_array+0x2e>
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
 80079c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079cc:	4798      	blx	r3
 80079ce:	3601      	adds	r6, #1
 80079d0:	e7ee      	b.n	80079b0 <__libc_init_array+0xc>
 80079d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d6:	4798      	blx	r3
 80079d8:	3601      	adds	r6, #1
 80079da:	e7f2      	b.n	80079c2 <__libc_init_array+0x1e>
 80079dc:	08007f98 	.word	0x08007f98
 80079e0:	08007f98 	.word	0x08007f98
 80079e4:	08007f98 	.word	0x08007f98
 80079e8:	08007f9c 	.word	0x08007f9c

080079ec <__retarget_lock_init_recursive>:
 80079ec:	4770      	bx	lr

080079ee <__retarget_lock_acquire_recursive>:
 80079ee:	4770      	bx	lr

080079f0 <__retarget_lock_release_recursive>:
 80079f0:	4770      	bx	lr
	...

080079f4 <_free_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4605      	mov	r5, r0
 80079f8:	2900      	cmp	r1, #0
 80079fa:	d041      	beq.n	8007a80 <_free_r+0x8c>
 80079fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a00:	1f0c      	subs	r4, r1, #4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bfb8      	it	lt
 8007a06:	18e4      	addlt	r4, r4, r3
 8007a08:	f000 f8e0 	bl	8007bcc <__malloc_lock>
 8007a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007a84 <_free_r+0x90>)
 8007a0e:	6813      	ldr	r3, [r2, #0]
 8007a10:	b933      	cbnz	r3, 8007a20 <_free_r+0x2c>
 8007a12:	6063      	str	r3, [r4, #4]
 8007a14:	6014      	str	r4, [r2, #0]
 8007a16:	4628      	mov	r0, r5
 8007a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a1c:	f000 b8dc 	b.w	8007bd8 <__malloc_unlock>
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	d908      	bls.n	8007a36 <_free_r+0x42>
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	1821      	adds	r1, r4, r0
 8007a28:	428b      	cmp	r3, r1
 8007a2a:	bf01      	itttt	eq
 8007a2c:	6819      	ldreq	r1, [r3, #0]
 8007a2e:	685b      	ldreq	r3, [r3, #4]
 8007a30:	1809      	addeq	r1, r1, r0
 8007a32:	6021      	streq	r1, [r4, #0]
 8007a34:	e7ed      	b.n	8007a12 <_free_r+0x1e>
 8007a36:	461a      	mov	r2, r3
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	b10b      	cbz	r3, 8007a40 <_free_r+0x4c>
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	d9fa      	bls.n	8007a36 <_free_r+0x42>
 8007a40:	6811      	ldr	r1, [r2, #0]
 8007a42:	1850      	adds	r0, r2, r1
 8007a44:	42a0      	cmp	r0, r4
 8007a46:	d10b      	bne.n	8007a60 <_free_r+0x6c>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	4401      	add	r1, r0
 8007a4c:	1850      	adds	r0, r2, r1
 8007a4e:	4283      	cmp	r3, r0
 8007a50:	6011      	str	r1, [r2, #0]
 8007a52:	d1e0      	bne.n	8007a16 <_free_r+0x22>
 8007a54:	6818      	ldr	r0, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	6053      	str	r3, [r2, #4]
 8007a5a:	4408      	add	r0, r1
 8007a5c:	6010      	str	r0, [r2, #0]
 8007a5e:	e7da      	b.n	8007a16 <_free_r+0x22>
 8007a60:	d902      	bls.n	8007a68 <_free_r+0x74>
 8007a62:	230c      	movs	r3, #12
 8007a64:	602b      	str	r3, [r5, #0]
 8007a66:	e7d6      	b.n	8007a16 <_free_r+0x22>
 8007a68:	6820      	ldr	r0, [r4, #0]
 8007a6a:	1821      	adds	r1, r4, r0
 8007a6c:	428b      	cmp	r3, r1
 8007a6e:	bf04      	itt	eq
 8007a70:	6819      	ldreq	r1, [r3, #0]
 8007a72:	685b      	ldreq	r3, [r3, #4]
 8007a74:	6063      	str	r3, [r4, #4]
 8007a76:	bf04      	itt	eq
 8007a78:	1809      	addeq	r1, r1, r0
 8007a7a:	6021      	streq	r1, [r4, #0]
 8007a7c:	6054      	str	r4, [r2, #4]
 8007a7e:	e7ca      	b.n	8007a16 <_free_r+0x22>
 8007a80:	bd38      	pop	{r3, r4, r5, pc}
 8007a82:	bf00      	nop
 8007a84:	20000ee0 	.word	0x20000ee0

08007a88 <sbrk_aligned>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8007ac8 <sbrk_aligned+0x40>)
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	6831      	ldr	r1, [r6, #0]
 8007a90:	4605      	mov	r5, r0
 8007a92:	b911      	cbnz	r1, 8007a9a <sbrk_aligned+0x12>
 8007a94:	f000 f9d6 	bl	8007e44 <_sbrk_r>
 8007a98:	6030      	str	r0, [r6, #0]
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 f9d1 	bl	8007e44 <_sbrk_r>
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	d103      	bne.n	8007aae <sbrk_aligned+0x26>
 8007aa6:	f04f 34ff 	mov.w	r4, #4294967295
 8007aaa:	4620      	mov	r0, r4
 8007aac:	bd70      	pop	{r4, r5, r6, pc}
 8007aae:	1cc4      	adds	r4, r0, #3
 8007ab0:	f024 0403 	bic.w	r4, r4, #3
 8007ab4:	42a0      	cmp	r0, r4
 8007ab6:	d0f8      	beq.n	8007aaa <sbrk_aligned+0x22>
 8007ab8:	1a21      	subs	r1, r4, r0
 8007aba:	4628      	mov	r0, r5
 8007abc:	f000 f9c2 	bl	8007e44 <_sbrk_r>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d1f2      	bne.n	8007aaa <sbrk_aligned+0x22>
 8007ac4:	e7ef      	b.n	8007aa6 <sbrk_aligned+0x1e>
 8007ac6:	bf00      	nop
 8007ac8:	20000edc 	.word	0x20000edc

08007acc <_malloc_r>:
 8007acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad0:	1ccd      	adds	r5, r1, #3
 8007ad2:	f025 0503 	bic.w	r5, r5, #3
 8007ad6:	3508      	adds	r5, #8
 8007ad8:	2d0c      	cmp	r5, #12
 8007ada:	bf38      	it	cc
 8007adc:	250c      	movcc	r5, #12
 8007ade:	2d00      	cmp	r5, #0
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	db01      	blt.n	8007ae8 <_malloc_r+0x1c>
 8007ae4:	42a9      	cmp	r1, r5
 8007ae6:	d904      	bls.n	8007af2 <_malloc_r+0x26>
 8007ae8:	230c      	movs	r3, #12
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	2000      	movs	r0, #0
 8007aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bc8 <_malloc_r+0xfc>
 8007af6:	f000 f869 	bl	8007bcc <__malloc_lock>
 8007afa:	f8d8 3000 	ldr.w	r3, [r8]
 8007afe:	461c      	mov	r4, r3
 8007b00:	bb44      	cbnz	r4, 8007b54 <_malloc_r+0x88>
 8007b02:	4629      	mov	r1, r5
 8007b04:	4630      	mov	r0, r6
 8007b06:	f7ff ffbf 	bl	8007a88 <sbrk_aligned>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	d158      	bne.n	8007bc2 <_malloc_r+0xf6>
 8007b10:	f8d8 4000 	ldr.w	r4, [r8]
 8007b14:	4627      	mov	r7, r4
 8007b16:	2f00      	cmp	r7, #0
 8007b18:	d143      	bne.n	8007ba2 <_malloc_r+0xd6>
 8007b1a:	2c00      	cmp	r4, #0
 8007b1c:	d04b      	beq.n	8007bb6 <_malloc_r+0xea>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	4639      	mov	r1, r7
 8007b22:	4630      	mov	r0, r6
 8007b24:	eb04 0903 	add.w	r9, r4, r3
 8007b28:	f000 f98c 	bl	8007e44 <_sbrk_r>
 8007b2c:	4581      	cmp	r9, r0
 8007b2e:	d142      	bne.n	8007bb6 <_malloc_r+0xea>
 8007b30:	6821      	ldr	r1, [r4, #0]
 8007b32:	1a6d      	subs	r5, r5, r1
 8007b34:	4629      	mov	r1, r5
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff ffa6 	bl	8007a88 <sbrk_aligned>
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d03a      	beq.n	8007bb6 <_malloc_r+0xea>
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	442b      	add	r3, r5
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	f8d8 3000 	ldr.w	r3, [r8]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	bb62      	cbnz	r2, 8007ba8 <_malloc_r+0xdc>
 8007b4e:	f8c8 7000 	str.w	r7, [r8]
 8007b52:	e00f      	b.n	8007b74 <_malloc_r+0xa8>
 8007b54:	6822      	ldr	r2, [r4, #0]
 8007b56:	1b52      	subs	r2, r2, r5
 8007b58:	d420      	bmi.n	8007b9c <_malloc_r+0xd0>
 8007b5a:	2a0b      	cmp	r2, #11
 8007b5c:	d917      	bls.n	8007b8e <_malloc_r+0xc2>
 8007b5e:	1961      	adds	r1, r4, r5
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	6025      	str	r5, [r4, #0]
 8007b64:	bf18      	it	ne
 8007b66:	6059      	strne	r1, [r3, #4]
 8007b68:	6863      	ldr	r3, [r4, #4]
 8007b6a:	bf08      	it	eq
 8007b6c:	f8c8 1000 	streq.w	r1, [r8]
 8007b70:	5162      	str	r2, [r4, r5]
 8007b72:	604b      	str	r3, [r1, #4]
 8007b74:	4630      	mov	r0, r6
 8007b76:	f000 f82f 	bl	8007bd8 <__malloc_unlock>
 8007b7a:	f104 000b 	add.w	r0, r4, #11
 8007b7e:	1d23      	adds	r3, r4, #4
 8007b80:	f020 0007 	bic.w	r0, r0, #7
 8007b84:	1ac2      	subs	r2, r0, r3
 8007b86:	bf1c      	itt	ne
 8007b88:	1a1b      	subne	r3, r3, r0
 8007b8a:	50a3      	strne	r3, [r4, r2]
 8007b8c:	e7af      	b.n	8007aee <_malloc_r+0x22>
 8007b8e:	6862      	ldr	r2, [r4, #4]
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	bf0c      	ite	eq
 8007b94:	f8c8 2000 	streq.w	r2, [r8]
 8007b98:	605a      	strne	r2, [r3, #4]
 8007b9a:	e7eb      	b.n	8007b74 <_malloc_r+0xa8>
 8007b9c:	4623      	mov	r3, r4
 8007b9e:	6864      	ldr	r4, [r4, #4]
 8007ba0:	e7ae      	b.n	8007b00 <_malloc_r+0x34>
 8007ba2:	463c      	mov	r4, r7
 8007ba4:	687f      	ldr	r7, [r7, #4]
 8007ba6:	e7b6      	b.n	8007b16 <_malloc_r+0x4a>
 8007ba8:	461a      	mov	r2, r3
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	d1fb      	bne.n	8007ba8 <_malloc_r+0xdc>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	6053      	str	r3, [r2, #4]
 8007bb4:	e7de      	b.n	8007b74 <_malloc_r+0xa8>
 8007bb6:	230c      	movs	r3, #12
 8007bb8:	6033      	str	r3, [r6, #0]
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f000 f80c 	bl	8007bd8 <__malloc_unlock>
 8007bc0:	e794      	b.n	8007aec <_malloc_r+0x20>
 8007bc2:	6005      	str	r5, [r0, #0]
 8007bc4:	e7d6      	b.n	8007b74 <_malloc_r+0xa8>
 8007bc6:	bf00      	nop
 8007bc8:	20000ee0 	.word	0x20000ee0

08007bcc <__malloc_lock>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	@ (8007bd4 <__malloc_lock+0x8>)
 8007bce:	f7ff bf0e 	b.w	80079ee <__retarget_lock_acquire_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	20000ed8 	.word	0x20000ed8

08007bd8 <__malloc_unlock>:
 8007bd8:	4801      	ldr	r0, [pc, #4]	@ (8007be0 <__malloc_unlock+0x8>)
 8007bda:	f7ff bf09 	b.w	80079f0 <__retarget_lock_release_recursive>
 8007bde:	bf00      	nop
 8007be0:	20000ed8 	.word	0x20000ed8

08007be4 <__sflush_r>:
 8007be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bec:	0716      	lsls	r6, r2, #28
 8007bee:	4605      	mov	r5, r0
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	d454      	bmi.n	8007c9e <__sflush_r+0xba>
 8007bf4:	684b      	ldr	r3, [r1, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dc02      	bgt.n	8007c00 <__sflush_r+0x1c>
 8007bfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd48      	ble.n	8007c92 <__sflush_r+0xae>
 8007c00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c02:	2e00      	cmp	r6, #0
 8007c04:	d045      	beq.n	8007c92 <__sflush_r+0xae>
 8007c06:	2300      	movs	r3, #0
 8007c08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c0c:	682f      	ldr	r7, [r5, #0]
 8007c0e:	6a21      	ldr	r1, [r4, #32]
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	d030      	beq.n	8007c76 <__sflush_r+0x92>
 8007c14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	0759      	lsls	r1, r3, #29
 8007c1a:	d505      	bpl.n	8007c28 <__sflush_r+0x44>
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	1ad2      	subs	r2, r2, r3
 8007c20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c22:	b10b      	cbz	r3, 8007c28 <__sflush_r+0x44>
 8007c24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c26:	1ad2      	subs	r2, r2, r3
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c2c:	6a21      	ldr	r1, [r4, #32]
 8007c2e:	4628      	mov	r0, r5
 8007c30:	47b0      	blx	r6
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	d106      	bne.n	8007c46 <__sflush_r+0x62>
 8007c38:	6829      	ldr	r1, [r5, #0]
 8007c3a:	291d      	cmp	r1, #29
 8007c3c:	d82b      	bhi.n	8007c96 <__sflush_r+0xb2>
 8007c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce8 <__sflush_r+0x104>)
 8007c40:	410a      	asrs	r2, r1
 8007c42:	07d6      	lsls	r6, r2, #31
 8007c44:	d427      	bmi.n	8007c96 <__sflush_r+0xb2>
 8007c46:	2200      	movs	r2, #0
 8007c48:	6062      	str	r2, [r4, #4]
 8007c4a:	04d9      	lsls	r1, r3, #19
 8007c4c:	6922      	ldr	r2, [r4, #16]
 8007c4e:	6022      	str	r2, [r4, #0]
 8007c50:	d504      	bpl.n	8007c5c <__sflush_r+0x78>
 8007c52:	1c42      	adds	r2, r0, #1
 8007c54:	d101      	bne.n	8007c5a <__sflush_r+0x76>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	b903      	cbnz	r3, 8007c5c <__sflush_r+0x78>
 8007c5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c5e:	602f      	str	r7, [r5, #0]
 8007c60:	b1b9      	cbz	r1, 8007c92 <__sflush_r+0xae>
 8007c62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c66:	4299      	cmp	r1, r3
 8007c68:	d002      	beq.n	8007c70 <__sflush_r+0x8c>
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f7ff fec2 	bl	80079f4 <_free_r>
 8007c70:	2300      	movs	r3, #0
 8007c72:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c74:	e00d      	b.n	8007c92 <__sflush_r+0xae>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b0      	blx	r6
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	1c50      	adds	r0, r2, #1
 8007c80:	d1c9      	bne.n	8007c16 <__sflush_r+0x32>
 8007c82:	682b      	ldr	r3, [r5, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0c6      	beq.n	8007c16 <__sflush_r+0x32>
 8007c88:	2b1d      	cmp	r3, #29
 8007c8a:	d001      	beq.n	8007c90 <__sflush_r+0xac>
 8007c8c:	2b16      	cmp	r3, #22
 8007c8e:	d11e      	bne.n	8007cce <__sflush_r+0xea>
 8007c90:	602f      	str	r7, [r5, #0]
 8007c92:	2000      	movs	r0, #0
 8007c94:	e022      	b.n	8007cdc <__sflush_r+0xf8>
 8007c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c9a:	b21b      	sxth	r3, r3
 8007c9c:	e01b      	b.n	8007cd6 <__sflush_r+0xf2>
 8007c9e:	690f      	ldr	r7, [r1, #16]
 8007ca0:	2f00      	cmp	r7, #0
 8007ca2:	d0f6      	beq.n	8007c92 <__sflush_r+0xae>
 8007ca4:	0793      	lsls	r3, r2, #30
 8007ca6:	680e      	ldr	r6, [r1, #0]
 8007ca8:	bf08      	it	eq
 8007caa:	694b      	ldreq	r3, [r1, #20]
 8007cac:	600f      	str	r7, [r1, #0]
 8007cae:	bf18      	it	ne
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	eba6 0807 	sub.w	r8, r6, r7
 8007cb6:	608b      	str	r3, [r1, #8]
 8007cb8:	f1b8 0f00 	cmp.w	r8, #0
 8007cbc:	dde9      	ble.n	8007c92 <__sflush_r+0xae>
 8007cbe:	6a21      	ldr	r1, [r4, #32]
 8007cc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007cc2:	4643      	mov	r3, r8
 8007cc4:	463a      	mov	r2, r7
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	47b0      	blx	r6
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	dc08      	bgt.n	8007ce0 <__sflush_r+0xfc>
 8007cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce0:	4407      	add	r7, r0
 8007ce2:	eba8 0800 	sub.w	r8, r8, r0
 8007ce6:	e7e7      	b.n	8007cb8 <__sflush_r+0xd4>
 8007ce8:	dfbffffe 	.word	0xdfbffffe

08007cec <_fflush_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	690b      	ldr	r3, [r1, #16]
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b913      	cbnz	r3, 8007cfc <_fflush_r+0x10>
 8007cf6:	2500      	movs	r5, #0
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	b118      	cbz	r0, 8007d06 <_fflush_r+0x1a>
 8007cfe:	6a03      	ldr	r3, [r0, #32]
 8007d00:	b90b      	cbnz	r3, 8007d06 <_fflush_r+0x1a>
 8007d02:	f7ff fc8f 	bl	8007624 <__sinit>
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0f3      	beq.n	8007cf6 <_fflush_r+0xa>
 8007d0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d10:	07d0      	lsls	r0, r2, #31
 8007d12:	d404      	bmi.n	8007d1e <_fflush_r+0x32>
 8007d14:	0599      	lsls	r1, r3, #22
 8007d16:	d402      	bmi.n	8007d1e <_fflush_r+0x32>
 8007d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d1a:	f7ff fe68 	bl	80079ee <__retarget_lock_acquire_recursive>
 8007d1e:	4628      	mov	r0, r5
 8007d20:	4621      	mov	r1, r4
 8007d22:	f7ff ff5f 	bl	8007be4 <__sflush_r>
 8007d26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d28:	07da      	lsls	r2, r3, #31
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	d4e4      	bmi.n	8007cf8 <_fflush_r+0xc>
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	059b      	lsls	r3, r3, #22
 8007d32:	d4e1      	bmi.n	8007cf8 <_fflush_r+0xc>
 8007d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d36:	f7ff fe5b 	bl	80079f0 <__retarget_lock_release_recursive>
 8007d3a:	e7dd      	b.n	8007cf8 <_fflush_r+0xc>

08007d3c <__swhatbuf_r>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	460c      	mov	r4, r1
 8007d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d44:	2900      	cmp	r1, #0
 8007d46:	b096      	sub	sp, #88	@ 0x58
 8007d48:	4615      	mov	r5, r2
 8007d4a:	461e      	mov	r6, r3
 8007d4c:	da0d      	bge.n	8007d6a <__swhatbuf_r+0x2e>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d54:	f04f 0100 	mov.w	r1, #0
 8007d58:	bf14      	ite	ne
 8007d5a:	2340      	movne	r3, #64	@ 0x40
 8007d5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d60:	2000      	movs	r0, #0
 8007d62:	6031      	str	r1, [r6, #0]
 8007d64:	602b      	str	r3, [r5, #0]
 8007d66:	b016      	add	sp, #88	@ 0x58
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	466a      	mov	r2, sp
 8007d6c:	f000 f848 	bl	8007e00 <_fstat_r>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	dbec      	blt.n	8007d4e <__swhatbuf_r+0x12>
 8007d74:	9901      	ldr	r1, [sp, #4]
 8007d76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d7e:	4259      	negs	r1, r3
 8007d80:	4159      	adcs	r1, r3
 8007d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d86:	e7eb      	b.n	8007d60 <__swhatbuf_r+0x24>

08007d88 <__smakebuf_r>:
 8007d88:	898b      	ldrh	r3, [r1, #12]
 8007d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d8c:	079d      	lsls	r5, r3, #30
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460c      	mov	r4, r1
 8007d92:	d507      	bpl.n	8007da4 <__smakebuf_r+0x1c>
 8007d94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	6123      	str	r3, [r4, #16]
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	6163      	str	r3, [r4, #20]
 8007da0:	b003      	add	sp, #12
 8007da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da4:	ab01      	add	r3, sp, #4
 8007da6:	466a      	mov	r2, sp
 8007da8:	f7ff ffc8 	bl	8007d3c <__swhatbuf_r>
 8007dac:	9f00      	ldr	r7, [sp, #0]
 8007dae:	4605      	mov	r5, r0
 8007db0:	4639      	mov	r1, r7
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7ff fe8a 	bl	8007acc <_malloc_r>
 8007db8:	b948      	cbnz	r0, 8007dce <__smakebuf_r+0x46>
 8007dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dbe:	059a      	lsls	r2, r3, #22
 8007dc0:	d4ee      	bmi.n	8007da0 <__smakebuf_r+0x18>
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	f043 0302 	orr.w	r3, r3, #2
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	e7e2      	b.n	8007d94 <__smakebuf_r+0xc>
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	6020      	str	r0, [r4, #0]
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	9b01      	ldr	r3, [sp, #4]
 8007dda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dde:	b15b      	cbz	r3, 8007df8 <__smakebuf_r+0x70>
 8007de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de4:	4630      	mov	r0, r6
 8007de6:	f000 f81d 	bl	8007e24 <_isatty_r>
 8007dea:	b128      	cbz	r0, 8007df8 <__smakebuf_r+0x70>
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	f023 0303 	bic.w	r3, r3, #3
 8007df2:	f043 0301 	orr.w	r3, r3, #1
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	431d      	orrs	r5, r3
 8007dfc:	81a5      	strh	r5, [r4, #12]
 8007dfe:	e7cf      	b.n	8007da0 <__smakebuf_r+0x18>

08007e00 <_fstat_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4d07      	ldr	r5, [pc, #28]	@ (8007e20 <_fstat_r+0x20>)
 8007e04:	2300      	movs	r3, #0
 8007e06:	4604      	mov	r4, r0
 8007e08:	4608      	mov	r0, r1
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	602b      	str	r3, [r5, #0]
 8007e0e:	f7fa fc10 	bl	8002632 <_fstat>
 8007e12:	1c43      	adds	r3, r0, #1
 8007e14:	d102      	bne.n	8007e1c <_fstat_r+0x1c>
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	b103      	cbz	r3, 8007e1c <_fstat_r+0x1c>
 8007e1a:	6023      	str	r3, [r4, #0]
 8007e1c:	bd38      	pop	{r3, r4, r5, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000ed4 	.word	0x20000ed4

08007e24 <_isatty_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d06      	ldr	r5, [pc, #24]	@ (8007e40 <_isatty_r+0x1c>)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	602b      	str	r3, [r5, #0]
 8007e30:	f7fa fc0f 	bl	8002652 <_isatty>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_isatty_r+0x1a>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_isatty_r+0x1a>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	20000ed4 	.word	0x20000ed4

08007e44 <_sbrk_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d06      	ldr	r5, [pc, #24]	@ (8007e60 <_sbrk_r+0x1c>)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	f7fa fc18 	bl	8002684 <_sbrk>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_sbrk_r+0x1a>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_sbrk_r+0x1a>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	20000ed4 	.word	0x20000ed4

08007e64 <_init>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	bf00      	nop
 8007e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6a:	bc08      	pop	{r3}
 8007e6c:	469e      	mov	lr, r3
 8007e6e:	4770      	bx	lr

08007e70 <_fini>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	bf00      	nop
 8007e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e76:	bc08      	pop	{r3}
 8007e78:	469e      	mov	lr, r3
 8007e7a:	4770      	bx	lr
